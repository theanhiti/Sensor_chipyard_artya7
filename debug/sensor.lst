
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/debug/sensor.elf:     file format elf64-littleriscv
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/debug/sensor.elf
architecture: riscv:rv64, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000000080000000

Program Header:
    LOAD off    0x0000000000001000 vaddr 0x0000000080000000 paddr 0x0000000080000000 align 2**12
         filesz 0x0000000000000978 memsz 0x0000000000000978 flags rwx
    LOAD off    0x0000000000002880 vaddr 0x0000000080006880 paddr 0x0000000080006880 align 2**12
         filesz 0x0000000000000d10 memsz 0x0000000000000d10 flags rw-
     TLS off    0x0000000000000000 vaddr 0x0000000000000000 paddr 0x0000000000000000 align 2**3
         filesz 0x0000000000000000 memsz 0x0000000000000000 flags ---
    LOAD off    0x0000000000003590 vaddr 0x0000000080007590 paddr 0x0000000080007590 align 2**12
         filesz 0x0000000000000000 memsz 0x0000000000000d40 flags rw-
    LOAD off    0x0000000000003590 vaddr 0x0000000000000000 paddr 0x0000000000000000 align 2**12
         filesz 0x0000000000000000 memsz 0x0000000000000000 flags ---
    LOAD off    0x0000000000003a00 vaddr 0x0000000080000a00 paddr 0x0000000080000a00 align 2**12
         filesz 0x0000000000005e7c memsz 0x0000000000005e7c flags r-x
    LOAD off    0x000000000000987c vaddr 0x0000000000000000 paddr 0x0000000000000000 align 2**12
         filesz 0x0000000000000000 memsz 0x0000000000000000 flags ---

Sections:
Idx Name              Size      VMA               LMA               File off  Algn  Flags
  0 .init             000002da  0000000080000000  0000000080000000  00001000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .init_array       00000008  00000000800002e0  00000000800002e0  000012e0  2**3  CONTENTS, ALLOC, LOAD, DATA
  2 .ctors            00000024  00000000800002e8  00000000800002e8  000012e8  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata           00000668  0000000080000310  0000000080000310  00001310  2**3  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .text             00005e7c  0000000080000a00  0000000080000a00  00003a00  2**8  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .data             00000d10  0000000080006880  0000000080006880  00002880  2**3  CONTENTS, ALLOC, LOAD, DATA
  6 .bss              0000013c  0000000080007590  0000000080007590  00003590  2**3  ALLOC
  7 .stack            00000400  00000000800076d0  00000000800076d0  00003590  2**4  ALLOC
  8 .heap             00000800  0000000080007ad0  0000000080007ad0  00003590  2**3  ALLOC
  9 .debug_info       00021ea5  0000000000000000  0000000000000000  0000987c  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev     00003429  0000000000000000  0000000000000000  0002b721  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges    00001390  0000000000000000  0000000000000000  0002eb50  2**4  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges     000011c0  0000000000000000  0000000000000000  0002fee0  2**4  CONTENTS, READONLY, DEBUGGING
 13 .debug_line       0000a6b9  0000000000000000  0000000000000000  000310a0  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_str        0000422b  0000000000000000  0000000000000000  0003b759  2**0  CONTENTS, READONLY, DEBUGGING
 15 .comment          00000028  0000000000000000  0000000000000000  0003f984  2**0  CONTENTS, READONLY
 16 .riscv.attributes 0000002b  0000000000000000  0000000000000000  0003f9ac  2**0  CONTENTS, READONLY
 17 .debug_frame      000033a0  0000000000000000  0000000000000000  0003f9d8  2**3  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
0000000080000000 l    d  .init	0000000000000000 .init
00000000800002e0 l    d  .init_array	0000000000000000 .init_array
00000000800002e8 l    d  .ctors	0000000000000000 .ctors
0000000080000310 l    d  .rodata	0000000000000000 .rodata
0000000080000a00 l    d  .text	0000000000000000 .text
0000000080006880 l    d  .data	0000000000000000 .data
0000000080007590 l    d  .bss	0000000000000000 .bss
00000000800076d0 l    d  .stack	0000000000000000 .stack
0000000080007ad0 l    d  .heap	0000000000000000 .heap
0000000000000000 l    d  .debug_info	0000000000000000 .debug_info
0000000000000000 l    d  .debug_abbrev	0000000000000000 .debug_abbrev
0000000000000000 l    d  .debug_aranges	0000000000000000 .debug_aranges
0000000000000000 l    d  .debug_ranges	0000000000000000 .debug_ranges
0000000000000000 l    d  .debug_line	0000000000000000 .debug_line
0000000000000000 l    d  .debug_str	0000000000000000 .debug_str
0000000000000000 l    d  .comment	0000000000000000 .comment
0000000000000000 l    d  .riscv.attributes	0000000000000000 .riscv.attributes
0000000000000000 l    d  .debug_frame	0000000000000000 .debug_frame
0000000000000000 l    df *ABS*	0000000000000000 scrub.o
00000000800000cc l     F .init	0000000000000000 __metal_memory_scrub
0000000080000140 l       .init	0000000000000000 skip_scrub
0000000000000000 l    df *ABS*	0000000000000000 synchronize_harts.c
0000000000000000 l    df *ABS*	0000000000000000 crt0.o
0000000080000250 l       .init	0000000000000000 _skip_init
0000000080000958 l       .rodata	0000000000000000 argv
0000000080000960 l       .rodata	0000000000000000 envp
0000000080000968 l       .rodata	0000000000000000 name
0000000000000000 l    df *ABS*	0000000000000000 tty.c
0000000000000000 l    df *ABS*	0000000000000000 main.c
0000000000000000 l    df *ABS*	0000000000000000 findfp.c
0000000080001290 l     F .text	0000000000000066 std
0000000000000000 l    df *ABS*	0000000000000000 nano-vfprintf.c
0000000080001810 l     F .text	000000000000002c __sfputc_r
0000000000000000 l    df *ABS*	0000000000000000 nano-vfprintf_i.c
0000000000000000 l    df *ABS*	0000000000000000 riscv_clint0.c
000000008000212c l     F .text	000000000000002a __metal_driver_sifive_clint0_control_base
0000000080002156 l     F .text	0000000000000028 __metal_driver_sifive_clint0_num_interrupts
000000008000217e l     F .text	0000000000000044 __metal_driver_sifive_clint0_interrupt_parents
00000000800021c2 l     F .text	0000000000000038 __metal_driver_sifive_clint0_interrupt_lines
0000000080002304 l     F .text	0000000000000036 _get_cpu_intc
0000000000000000 l    df *ABS*	0000000000000000 riscv_cpu.c
00000000800028f0 l     F .text	0000000000000028 __metal_driver_cpu_hartid
0000000080002918 l     F .text	0000000000000028 __metal_driver_cpu_timebase
0000000080002940 l     F .text	000000000000002e __metal_driver_cpu_interrupt_controller
000000008000296e l     F .text	0000000000000028 __metal_driver_cpu_buserror
0000000000000000 l    df *ABS*	0000000000000000 riscv_plic0.c
00000000800042d6 l     F .text	000000000000002a __metal_driver_sifive_plic0_control_base
0000000080004300 l     F .text	000000000000002a __metal_driver_sifive_plic0_num_interrupts
000000008000432a l     F .text	0000000000000028 __metal_driver_sifive_plic0_max_priority
0000000080004352 l     F .text	0000000000000044 __metal_driver_sifive_plic0_interrupt_parents
0000000080004396 l     F .text	0000000000000038 __metal_driver_sifive_plic0_interrupt_lines
00000000800043ce l     F .text	0000000000000022 __metal_driver_sifive_plic0_context_ids
0000000000000000 l    df *ABS*	0000000000000000 sifive_i2c0.c
0000000080004cc4 l     F .text	000000000000002a __metal_driver_sifive_i2c0_control_base
0000000080004cee l     F .text	000000000000002e __metal_driver_sifive_i2c0_clock
0000000080004d1c l     F .text	0000000000000036 pre_rate_change_callback
0000000080004d52 l     F .text	0000000000000032 post_rate_change_callback
0000000080004d84 l     F .text	000000000000005a __metal_driver_sifive_i2c0_init
0000000080004dde l     F .text	0000000000000022 __metal_driver_sifive_i2c0_get_baud_rate
0000000080004e00 l     F .text	0000000000000162 __metal_driver_sifive_i2c0_set_baud_rate
0000000080004f62 l     F .text	00000000000000f6 __metal_driver_sifive_i2c0_write_addr
0000000080005058 l     F .text	000000000000016e __metal_driver_sifive_i2c0_write
00000000800051c6 l     F .text	0000000000000154 __metal_driver_sifive_i2c0_read
000000008000531a l     F .text	0000000000000226 __metal_driver_sifive_i2c0_transfer
0000000000000000 l    df *ABS*	0000000000000000 sifive_uart0.c
0000000080005540 l     F .text	000000000000002a __metal_driver_sifive_uart0_control_base
000000008000556a l     F .text	000000000000002e __metal_driver_sifive_uart0_interrupt_parent
0000000080005598 l     F .text	0000000000000028 __metal_driver_sifive_uart0_interrupt_line
00000000800055c0 l     F .text	000000000000002e __metal_driver_sifive_uart0_clock
00000000800055ee l     F .text	0000000000000028 __metal_driver_sifive_uart0_pinmux
0000000080005616 l     F .text	0000000000000028 __metal_driver_sifive_uart0_pinmux_output_selector
000000008000563e l     F .text	0000000000000028 __metal_driver_sifive_uart0_pinmux_source_selector
0000000080005a92 l     F .text	00000000000000ec pre_rate_change_callback_func
0000000080005b7e l     F .text	0000000000000032 post_rate_change_callback_func
0000000000000000 l    df *ABS*	0000000000000000 fixed-clock.c
0000000080006200 l     F .text	0000000000000048 __metal_driver_fixed_clock_rate
0000000000000000 l    df *ABS*	0000000000000000 sgp30.c
0000000000000000 l    df *ABS*	0000000000000000 sht35.c
0000000000000000 l    df *ABS*	0000000000000000 printf.c
0000000000000000 l    df *ABS*	0000000000000000 puts.c
0000000000000000 l    df *ABS*	0000000000000000 wbuf.c
0000000000000000 l    df *ABS*	0000000000000000 wsetup.c
0000000000000000 l    df *ABS*	0000000000000000 fflush.c
0000000000000000 l    df *ABS*	0000000000000000 fwalk.c
0000000000000000 l    df *ABS*	0000000000000000 makebuf.c
0000000000000000 l    df *ABS*	0000000000000000 nano-mallocr.c
0000000000000000 l    df *ABS*	0000000000000000 nano-mallocr.c
0000000000000000 l    df *ABS*	0000000000000000 sbrkr.c
0000000000000000 l    df *ABS*	0000000000000000 stdio.c
0000000000000000 l    df *ABS*	0000000000000000 writer.c
0000000000000000 l    df *ABS*	0000000000000000 closer.c
0000000000000000 l    df *ABS*	0000000000000000 fstatr.c
0000000000000000 l    df *ABS*	0000000000000000 isattyr.c
0000000000000000 l    df *ABS*	0000000000000000 lseekr.c
0000000000000000 l    df *ABS*	0000000000000000 memchr.c
0000000000000000 l    df *ABS*	0000000000000000 mlock.c
0000000000000000 l    df *ABS*	0000000000000000 readr.c
0000000000000000 l    df *ABS*	0000000000000000 clock.c
0000000000000000 l    df *ABS*	0000000000000000 cpu.c
0000000000000000 l    df *ABS*	0000000000000000 i2c.c
0000000000000000 l    df *ABS*	0000000000000000 shutdown.c
0000000000000000 l    df *ABS*	0000000000000000 time.c
0000000000000000 l    df *ABS*	0000000000000000 uart.c
0000000000000000 l    df *ABS*	0000000000000000 vector.o
0000000080006100 l       .text	0000000000000000 IRQ_0
0000000080006104 l       .text	0000000000000000 IRQ_1
0000000080006108 l       .text	0000000000000000 IRQ_2
000000008000610c l       .text	0000000000000000 IRQ_3
0000000080006110 l       .text	0000000000000000 IRQ_4
0000000080006114 l       .text	0000000000000000 IRQ_5
0000000080006118 l       .text	0000000000000000 IRQ_6
000000008000611c l       .text	0000000000000000 IRQ_7
0000000080006120 l       .text	0000000000000000 IRQ_8
0000000080006124 l       .text	0000000000000000 IRQ_9
0000000080006128 l       .text	0000000000000000 IRQ_10
000000008000612c l       .text	0000000000000000 IRQ_11
0000000080006130 l       .text	0000000000000000 IRQ_12
0000000080006134 l       .text	0000000000000000 IRQ_13
0000000080006138 l       .text	0000000000000000 IRQ_14
000000008000613c l       .text	0000000000000000 IRQ_15
0000000080006140 l       .text	0000000000000000 IRQ_LC0
0000000080006144 l       .text	0000000000000000 IRQ_LC1
0000000080006148 l       .text	0000000000000000 IRQ_LC2
000000008000614c l       .text	0000000000000000 IRQ_LC3
0000000080006150 l       .text	0000000000000000 IRQ_LC4
0000000080006154 l       .text	0000000000000000 IRQ_LC5
0000000080006158 l       .text	0000000000000000 IRQ_LC6
000000008000615c l       .text	0000000000000000 IRQ_LC7
0000000080006160 l       .text	0000000000000000 IRQ_LC8
0000000080006164 l       .text	0000000000000000 IRQ_LC9
0000000080006168 l       .text	0000000000000000 IRQ_LC10
000000008000616c l       .text	0000000000000000 IRQ_LC11
0000000080006170 l       .text	0000000000000000 IRQ_LC12
0000000080006174 l       .text	0000000000000000 IRQ_LC13
0000000080006178 l       .text	0000000000000000 IRQ_LC14
000000008000617c l       .text	0000000000000000 IRQ_LC15
0000000000000000 l    df *ABS*	0000000000000000 timer.c
0000000000000000 l    df *ABS*	0000000000000000 sys_close.c
0000000000000000 l    df *ABS*	0000000000000000 sys_fstat.c
0000000000000000 l    df *ABS*	0000000000000000 sys_isatty.c
0000000000000000 l    df *ABS*	0000000000000000 sys_lseek.c
0000000000000000 l    df *ABS*	0000000000000000 sys_read.c
0000000000000000 l    df *ABS*	0000000000000000 sys_sbrk.c
0000000080007588 l     O .data	0000000000000008 __brk
0000000000000000 l    df *ABS*	0000000000000000 sys_write.c
0000000000000000 l    df *ABS*	0000000000000000 atexit.c
0000000000000000 l    df *ABS*	0000000000000000 errno.c
0000000000000000 l    df *ABS*	0000000000000000 exit.c
0000000000000000 l    df *ABS*	0000000000000000 fini.c
0000000000000000 l    df *ABS*	0000000000000000 init.c
0000000000000000 l    df *ABS*	0000000000000000 __atexit.c
00000000800075b0 l     O .bss	0000000000000118 _global_atexit0
0000000000000000 l    df *ABS*	0000000000000000 __call_atexit.c
0000000000000000 l    df *ABS*	0000000000000000 init.c
00000000800075a8 l     O .bss	0000000000000004 init_done.1952
00000000800075ac l     O .bss	0000000000000004 fini_done.1961
0000000000000000 l    df *ABS*	0000000000000000 sys_exit.c
0000000000000000 l    df *ABS*	0000000000000000 impure.c
0000000080006880 l     O .data	00000000000000b0 impure_data
0000000000000000 l    df *ABS*	0000000000000000 inline.c
0000000000000000 l    df *ABS*	0000000000000000 
00000000800002e8 l       .init_array	0000000000000000 metal_constructors_end
00000000800002e8 l       .init_array	0000000000000000 __fini_array_end
00000000800002e8 l       .init_array	0000000000000000 metal_destructors_end
00000000800002e8 l       .init_array	0000000000000000 metal_destructors_start
00000000800002e8 l       .init_array	0000000000000000 __fini_array_start
00000000800002e0 l       .init_array	0000000000000000 __init_array_end
00000000800002e0 l       .init_array	0000000000000000 __preinit_array_end
00000000800002e0 l       .init_array	0000000000000000 __init_array_start
00000000800002e0 l       .init_array	0000000000000000 metal_constructors_start
00000000800002e0 l       .init_array	0000000000000000 __preinit_array_start
00000000800008c8 g     O .rodata	0000000000000080 __metal_driver_vtable_sifive_uart0
0000000080006948 g     O .data	0000000000000018 __metal_dt_subsystem_pbus_clock
0000000080001ca2 g     F .text	000000000000002a _isatty_r
00000000800031d2  w    F .text	0000000000000096 metal_lc4_interrupt_vector_handler
0000000080000e22 g     F .text	00000000000000e8 _puts_r
0000000080005e40 g     F .text	0000000000000050 metal_i2c_write
0000000080001ccc g     F .text	000000000000002e _lseek_r
00000000800059da g     F .text	00000000000000b8 __metal_driver_sifive_uart0_set_baud_rate
000000008000251e g     F .text	0000000000000064 __metal_driver_riscv_clint0_set_vector_mode
00000000800057ea g     F .text	000000000000005e __metal_driver_sifive_uart0_set_tx_watermark
000000008000313c  w    F .text	0000000000000096 metal_lc3_interrupt_vector_handler
00000000800039d6 g     F .text	0000000000000082 __metal_valid_interrupt_id
0000000080000de0 g     F .text	0000000000000042 printf
0000000080007d68 g       .data	0000000000000000 __global_pointer$
0000000080003e98 g     F .text	000000000000001e __metal_driver_riscv_cpu_controller_get_vector_mode
00000000800002e8 g     F .ctors	0000000000000024 metal_tty_init
0000000080005c8c g     F .text	0000000000000054 _metal_clock_append_to_callbacks
0000000080004432 g     F .text	000000000000004e __metal_plic0_complete_interrupt
0000000080003c68 g     F .text	00000000000001d4 __metal_driver_riscv_cpu_controller_interrupt_register
0000000080001be0 g     F .text	0000000000000038 __sseek
0000000080001348 g     F .text	0000000000000072 __sinit
0000000080007570  w    O .data	0000000000000008 __metal_i2c_table
0000000080000f14 g     F .text	00000000000000c6 __swbuf_r
0000000080007590 g       .data	0000000000000000 __tls_base
0000000080001300 g     F .text	0000000000000048 __sfmoreglue
0000000080001d16 g     F .text	0000000000000002 __malloc_unlock
0000000080005e02 g     F .text	000000000000003e metal_i2c_init
0000000080005db6 g     F .text	0000000000000032 metal_cpu_get
0000000080007528 g     O .data	0000000000000040 __metal_dt_serial_10013000
0000000080000498 g     O .rodata	00000000000000c8 __metal_driver_vtable_riscv_clint0
00000000800076cc g       .bss	0000000000000000 metal_segment_bss_target_end
00000000800021fa g     F .text	000000000000006c __metal_clint0_mtime_get
0000000080004246 g     F .text	0000000000000032 __metal_driver_cpu_get_instruction_length
0000000000000001 g       *ABS*	0000000000000000 __metal_chicken_bit
00000000800058e0 g     F .text	000000000000003a __metal_driver_sifive_uart0_get_rx_watermark
00000000800064f0 g     F .text	0000000000000008 __errno
0000000080000978 g       .rodata	0000000000000000 metal_segment_itim_target_start
0000000080005d6a g     F .text	0000000000000026 metal_cpu_get_timebase
00000000800057b2 g     F .text	0000000000000038 __metal_driver_sifive_uart0_txready
000000008000572c g     F .text	0000000000000044 __metal_driver_sifive_uart0_rx_interrupt_enable
0000000080000152 g     F .init	000000000000000e __metal_synchronize_harts
0000000080007590 g       .data	0000000000000000 metal_segment_bss_target_start
0000000080002266 g     F .text	000000000000009e __metal_driver_riscv_clint0_mtimecmp_set
0000000080001c76 g     F .text	000000000000002c _fstat_r
00000000800076c8 g     O .bss	0000000000000004 errno
0000000000000400 g       *ABS*	0000000000000000 __stack_size
0000000080005ce0 g     F .text	0000000000000032 metal_clock_register_pre_rate_change_callback
00000000800034c0  w    F .text	0000000000000096 metal_lc9_interrupt_vector_handler
00000000800000d8  w    F .init	0000000000000000 __metal_before_start
000000008000680c  w    F .text	0000000000000016 metal_init_run
0000000080000748 g     O .rodata	00000000000000c8 __metal_driver_vtable_riscv_plic0
00000000800006c0 g     O .rodata	0000000000000088 __metal_driver_vtable_cpu
0000000080006078 g     F .text	0000000000000032 metal_uart_set_baud_rate
0000000080005bb0 g     F .text	00000000000000dc __metal_driver_sifive_uart0_init
0000000000000000 g       *ABS*	0000000000000000 __metal_eccscrub_bit
0000000080003f34 g     F .text	0000000000000022 __metal_driver_cpu_mcycle_get
0000000080007ad0 g       .heap	0000000000000000 metal_segment_heap_target_start
00000000800012f6 g     F .text	000000000000000a _cleanup_r
0000000080006970 g     O .data	0000000000000010 __metal_dt_cpu_0
000000008000342a  w    F .text	0000000000000096 metal_lc8_interrupt_vector_handler
00000000800062d2 g     F .text	0000000000000046 metal_timer_get_timebase_frequency
0000000080004c16 g     F .text	0000000000000082 __metal_driver_riscv_plic0_affinity_set_threshold
0000000080000f0a g     F .text	000000000000000a puts
0000000080003718  w    F .text	0000000000000096 metal_lc13_interrupt_vector_handler
0000000080002b10 g     F .text	000000000000001a __metal_default_exception_handler
000000008000633e g     F .text	000000000000002a _fstat
00000000800028b8 g     F .text	0000000000000038 __metal_driver_riscv_clint0_set_interrupt
0000000080003eb6 g     F .text	0000000000000060 __metal_driver_riscv_cpu_controller_set_vector_mode
0000000080002996 g     F .text	0000000000000034 __metal_driver_cpu_get
00000000800005f8 g     O .rodata	00000000000000c8 __metal_driver_vtable_riscv_cpu_intc
00000000800029fc g     F .text	0000000000000018 __metal_interrupt_global_disable
0000000080004c98 g     F .text	000000000000002c __metal_driver_riscv_plic0_affinity_get_threshold
0000000080003394  w    F .text	0000000000000096 metal_lc7_interrupt_vector_handler
0000000080003556  w    F .text	0000000000000096 metal_lc10_interrupt_vector_handler
0000000080001b34 g     F .text	000000000000002a _sbrk_r
00000000800049fe g     F .text	000000000000005a __metal_driver_riscv_plic0_disable
0000000080003b36 g     F .text	0000000000000054 __metal_exception_register
0000000080006714 g     F .text	000000000000007c metal_init
00000000800020fe g     F .text	000000000000002e _read_r
0000000080004050 g     F .text	000000000000001a __metal_driver_cpu_timer_controller_interrupt
0000000080000978 g       .rodata	0000000000000000 metal_segment_lim_target_end
0000000080002c08 g     F .text	0000000000000070 __metal_default_sw_handler
0000000080005d12 g     F .text	0000000000000032 metal_clock_register_post_rate_change_callback
0000000080005666 g     F .text	0000000000000020 __metal_driver_sifive_uart0_interrupt_controller
0000000080006368 g     F .text	000000000000002c _isatty
00000000800056a6 g     F .text	0000000000000044 __metal_driver_sifive_uart0_tx_interrupt_enable
0000000080000948 g     O .rodata	0000000000000010 __metal_driver_vtable_fixed_clock
0000000080007580 g     O .data	0000000000000008 _global_impure_ptr
0000000080002c78  w    F .text	0000000000000096 metal_timer_interrupt_vector_handler
000000008000655a g     F .text	000000000000006a __libc_init_array
00000000800035ec  w    F .text	0000000000000096 metal_lc11_interrupt_vector_handler
0000000080000898 g     O .rodata	0000000000000030 __metal_driver_vtable_sifive_i2c0
0000000080006930 g     O .data	0000000000000018 __metal_dt_subsystem_mbus_clock
0000000080003e3c g     F .text	000000000000002e __metal_driver_riscv_cpu_controller_interrupt_enable
00000000800063f4 g     F .text	0000000000000078 _sbrk
00000000800002b8 g     F .init	0000000000000002 _init
0000000080002a5e g     F .text	000000000000001a __metal_interrupt_timer_disable
0000000080004112 g     F .text	0000000000000066 __metal_driver_cpu_clear_sw_ipi
00000000800056ea g     F .text	0000000000000042 __metal_driver_sifive_uart0_tx_interrupt_disable
0000000080006522 g     F .text	0000000000000038 __libc_fini_array
0000000080006790 g     F .text	000000000000007c metal_fini
0000000080004098 g     F .text	0000000000000014 __metal_driver_cpu_get_sw_interrupt_id
00000000800042b6 g     F .text	0000000000000020 __metal_driver_cpu_get_buserror
0000000080006880 g       .data	0000000000000000 metal_segment_data_target_start
0000000080002ab0 g     F .text	0000000000000030 __metal_interrupt_local_enable
0000000080002880 g     F .text	0000000000000038 __metal_driver_riscv_clint0_clear_interrupt
00000000800074e8 g     O .data	0000000000000040 __metal_dt_i2c_10015000
0000000080006838 g     F .text	000000000000002c metal_tty_putc
0000000080004692 g     F .text	000000000000001a __metal_plic0_default_handler
000000008000646c  w    F .text	000000000000007a write
0000000000000000 g       *ABS*	0000000000000000 __tbss_size
0000000080005f54 g     F .text	0000000000000094 metal_gettimeofday
0000000000000800 g       *ABS*	0000000000000000 __heap_size
0000000080004a58 g     F .text	0000000000000036 __metal_driver_riscv_plic0_set_threshold
0000000080002d0e g     F .text	0000000000000018 __metal_default_beu_handler
00000000800003a8 g     O .rodata	0000000000000038 __sf_fake_stderr
0000000080002a94 g     F .text	000000000000001c __metal_interrupt_external_disable
0000000080005686 g     F .text	0000000000000020 __metal_driver_sifive_uart0_get_interrupt_id
0000000080005e90 g     F .text	0000000000000050 metal_i2c_read
0000000080003f16 g     F .text	000000000000001e __metal_driver_riscv_cpu_controller_command_request
0000000080003b8a g     F .text	00000000000000de __metal_driver_riscv_cpu_controller_interrupt_init
000000008000183c g     F .text	0000000000000044 __sfputs_r
00000000800041fc g     F .text	000000000000004a __metal_driver_cpu_exception_register
0000000080002a14 g     F .text	0000000000000018 __metal_interrupt_software_enable
0000000080003010  w    F .text	0000000000000096 metal_lc1_interrupt_vector_handler
0000000080001cfa g     F .text	000000000000001a memchr
0000000080005ee0 g     F .text	0000000000000032 metal_i2c_set_baud_rate
000000008000166a g     F .text	00000000000000ae _free_r
00000000800075a0 g     O .bss	0000000000000008 _global_atexit
000000008000450e g     F .text	0000000000000076 __metal_driver_riscv_plic0_set_priority
00000000800038da g     F .text	0000000000000050 __metal_controller_interrupt_vector_mode
000000008000664e g     F .text	00000000000000c6 __call_exitprocs
0000000080007ad0 g       .stack	0000000000000000 _sp
00000000800002e0 g     O .init_array	0000000000000008 _metal_tty_init_ptr
0000000080000160 g     F .init	0000000000000000 _start
000000008000628c g     F .text	0000000000000046 metal_timer_get_cyclecount
0000000080006394 g     F .text	0000000000000032 _lseek
00000000800041dc g     F .text	0000000000000020 __metal_driver_cpu_controller_interrupt
0000000080004278 g     F .text	000000000000001e __metal_driver_cpu_get_exception_pc
0000000080002a78 g     F .text	000000000000001c __metal_interrupt_external_enable
00000000800065c4 g     F .text	000000000000008a __register_exitproc
000000008000591a g     F .text	0000000000000044 __metal_driver_sifive_uart0_putc
0000000080004766 g     F .text	000000000000017a __metal_driver_riscv_plic0_init
00000000800049a4 g     F .text	000000000000005a __metal_driver_riscv_plic0_enable
0000000080000c46 g     F .text	0000000000000032 delay_t
00000000800032fe  w    F .text	0000000000000096 metal_lc6_interrupt_vector_handler
00000000800029ca g     F .text	000000000000001a __metal_myhart_id
0000000080000b1a g     F .text	0000000000000032 delay_time
0000000080002b72  w    F .text	0000000000000096 metal_software_interrupt_vector_handler
0000000080003e6a g     F .text	000000000000002e __metal_driver_riscv_cpu_controller_interrupt_disable
0000000080001c4c g     F .text	000000000000002a _close_r
0000000080000b8e g     F .text	00000000000000b8 get_sgp30_sensor_data
0000000080005d44 g     F .text	0000000000000026 metal_cpu_get_timer
00000000800059b8 g     F .text	0000000000000022 __metal_driver_sifive_uart0_get_baud_rate
00000000800023d6 g     F .text	0000000000000100 __metal_driver_riscv_clint0_register
0000000080006960 g     O .data	0000000000000010 __metal_dt_clint_2000000
0000000080000fda g     F .text	0000000000000112 __swsetup_r
0000000080000b4c g     F .text	0000000000000042 init_air_quality
00000000800013ba g     F .text	000000000000009c __sfp
0000000080001b5e g     F .text	0000000000000032 __sread
00000000800002ba  w    F .init	0000000000000000 secondary_main
0000000080002b44  w    F .text	000000000000002e metal_interrupt_vector_handler
0000000080001d14 g     F .text	0000000000000002 __malloc_lock
0000000080005770 g     F .text	0000000000000042 __metal_driver_sifive_uart0_rx_interrupt_disable
000000008000122a g     F .text	0000000000000066 _fflush_r
00000000800044ce g     F .text	0000000000000040 __metal_plic0_get_threshold
00000000800003e0 g     O .rodata	0000000000000038 __sf_fake_stdin
0000000080003a58 g     F .text	00000000000000de __metal_local_interrupt_enable
0000000080002726 g     F .text	000000000000015a __metal_driver_riscv_clint0_command_request
00000000800015c0 g     F .text	00000000000000aa memset
0000000080003268  w    F .text	0000000000000096 metal_lc5_interrupt_vector_handler
0000000080000a00 g     F .text	000000000000011a main
0000000080007590 g       .data	0000000000000000 metal_segment_data_target_end
0000000080000d9c g     F .text	0000000000000044 reset_sht35_sensor_data
0000000080005882 g     F .text	000000000000005e __metal_driver_sifive_uart0_set_rx_watermark
00000000800040ac g     F .text	0000000000000066 __metal_driver_cpu_set_sw_ipi
0000000080004178 g     F .text	0000000000000064 __metal_driver_cpu_get_msip
0000000080005f44 g     F .text	0000000000000010 metal_shutdown
0000000080000978 g       .rodata	0000000000000000 metal_segment_itim_target_end
0000000080004296 g     F .text	0000000000000020 __metal_driver_cpu_set_exception_pc
00000000800043f0 g     F .text	0000000000000042 __metal_plic0_claim_interrupt
0000000080005848 g     F .text	000000000000003a __metal_driver_sifive_uart0_get_tx_watermark
0000000080001c18 g     F .text	0000000000000006 __sclose
0000000080003682  w    F .text	0000000000000096 metal_lc12_interrupt_vector_handler
0000000080000094 g     F .init	0000000000000000 metal_mem_scrub
0000000080001718 g     F .text	00000000000000f8 _malloc_r
0000000080002500 g     F .text	000000000000001e __metal_driver_riscv_clint0_get_vector_mode
0000000080003f56 g     F .text	0000000000000032 __metal_driver_cpu_timebase_get
0000000080004b68 g     F .text	00000000000000ae __metal_driver_riscv_plic0_affinity_disable
0000000080000000 g       .init	0000000000000000 _enter
0000000080005de8 g     F .text	000000000000001a metal_cpu_get_current_hartid
0000000080006100 g       .text	0000000000000000 __metal_vector_table
0000000080000978 g       *ABS*	0000000000000000 metal_segment_itim_source_start
0000000080007568  w    O .data	0000000000000008 __metal_cpu_table
0000000080006980 g     O .data	0000000000000590 __metal_dt_cpu_0_interrupt_controller
00000000800002b8 g     F .init	0000000000000002 _fini
0000000080000de0 g     F .text	0000000000000042 iprintf
0000000080000978 g       .rodata	0000000000000000 metal_segment_lim_target_start
0000000080000c78 g     F .text	0000000000000124 get_sht35_sensor_data
0000000080004584 g     F .text	000000000000003e __metal_driver_riscv_plic0_get_priority
00000000800029e4 g     F .text	0000000000000018 __metal_interrupt_global_enable
00000000800064e6 g     F .text	000000000000000a atexit
0000000080001c1e g     F .text	000000000000002e _write_r
0000000080002a44 g     F .text	000000000000001a __metal_interrupt_timer_enable
000000008000595e g     F .text	000000000000005a __metal_driver_sifive_uart0_getc
0000000080002654 g     F .text	00000000000000d2 __metal_driver_riscv_clint0_disable
0000000080001d18 g     F .text	0000000000000124 _printf_common
0000000080007578 g     O .data	0000000000000008 _impure_ptr
0000000080003fe0 g     F .text	0000000000000070 __metal_driver_cpu_mtimecmp_set
00000000800010ec g     F .text	000000000000013e __sflush_r
0000000080004a8e g     F .text	000000000000002c __metal_driver_riscv_plic0_get_threshold
0000000080006248 g     F .text	0000000000000020 __metal_driver_fixed_clock_get_rate_hz
0000000080002582 g     F .text	00000000000000d2 __metal_driver_riscv_clint0_enable
0000000080006880 g       *ABS*	0000000000000000 metal_segment_data_source_start
0000000080000144 g       .init	0000000000000000 early_trap_vector
00000000800082d0 g       .heap	0000000000000000 metal_segment_heap_target_end
000000008000392a g     F .text	00000000000000ac __metal_controller_interrupt_vector
0000000080006f10 g     O .data	00000000000005d8 __metal_dt_interrupt_controller_c000000
00000000800014c4 g     F .text	000000000000005a __swhatbuf_r
0000000080002d26 g     F .text	000000000000004a __metal_default_timer_handler
000000008000646c g     F .text	000000000000007a _write
00000000800046ac g     F .text	00000000000000ba __metal_plic0_handler
00000000800030a6  w    F .text	0000000000000096 metal_lc2_interrupt_vector_handler
0000000080003844  w    F .text	0000000000000096 metal_lc15_interrupt_vector_handler
0000000080005d90 g     F .text	0000000000000026 metal_cpu_interrupt_controller
0000000080001b90 g     F .text	0000000000000050 __swrite
00000000800064f8 g     F .text	000000000000002a exit
0000000080001880 g     F .text	00000000000002b4 _vfiprintf_r
0000000080001456 g     F .text	000000000000006e _fwalk_reent
0000000080006268 g     F .text	0000000000000024 __metal_driver_fixed_clock_set_rate_hz
0000000080000978 g       *ABS*	0000000000000000 metal_segment_lim_source_start
0000000080000418 g     O .rodata	0000000000000038 __sf_fake_stdout
0000000080002b2a g     F .text	000000000000001a __metal_default_interrupt_handler
0000000080006046 g     F .text	0000000000000032 metal_uart_putc
00000000800063c6 g     F .text	000000000000002e _read
0000000080006822  w    F .text	0000000000000016 metal_fini_run
0000000080002d80 g     F .text	0000000000000188 __metal_exception_handler
0000000080002f7a  w    F .text	0000000000000096 metal_lc0_interrupt_vector_handler
0000000080006864 g     F .text	0000000000000018 _exit
0000000080005f12 g     F .text	0000000000000032 metal_i2c_get_device
0000000080003f88 g     F .text	0000000000000058 __metal_driver_cpu_mtime_get
000000008000151e g     F .text	00000000000000a2 __smakebuf_r
00000000800024d6 g     F .text	000000000000002a __metal_driver_riscv_clint0_vector_register
0000000080001e3c g     F .text	00000000000002c2 _printf_i
0000000080007598 g     O .bss	0000000000000008 __malloc_sbrk_start
00000000800037ae  w    F .text	0000000000000096 metal_lc14_interrupt_vector_handler
000000008000233a g     F .text	000000000000009c __metal_driver_riscv_clint0_init
0000000080007590 g     O .bss	0000000000000008 __malloc_free_list
0000000080001880 g     F .text	00000000000002b4 _vfprintf_r
000000008000406a g     F .text	0000000000000014 __metal_driver_cpu_get_timer_interrupt_id
00000000800045c2 g     F .text	00000000000000d0 __metal_plic0_enable
0000000080000092  w      .init	0000000000000000 __register_frame_info
000000008000407e g     F .text	000000000000001a __metal_driver_cpu_sw_controller_interrupt
0000000080002ae0 g     F .text	0000000000000030 __metal_interrupt_local_disable
0000000080002a2c g     F .text	0000000000000018 __metal_interrupt_software_disable
0000000080005fe8 g     F .text	000000000000002e metal_time
0000000080006016 g     F .text	0000000000000030 metal_uart_init
0000000080004480 g     F .text	000000000000004e __metal_plic0_set_threshold
0000000080004aba g     F .text	00000000000000ae __metal_driver_riscv_plic0_affinity_enable
0000000080006318 g     F .text	0000000000000026 _close
0000000000000000 g       *ABS*	0000000000000000 __metal_boot_hart
00000000800048e0 g     F .text	00000000000000c4 __metal_driver_riscv_plic0_register



Disassembly of section .init:

0000000080000000 <_enter>:
_enter():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/entry.S:31
    auipc a0, %pcrel_hi(__global_pointer__)
    addi a0, a0, %pcrel_lo(1b)
    ld   gp, 0(a0)
    add  gp, gp, a0
#else
    la gp, __global_pointer$
    80000000:	00008197          	auipc	gp,0x8
    80000004:	d6818193          	addi	gp,gp,-664 # 80007d68 <__global_pointer$>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/entry.S:36
#endif
.option pop

    /* trap over the chicken bit register clearing, aloe & fe310 dont have it */
    la t0, 1f
    80000008:	00000297          	auipc	t0,0x0
    8000000c:	01828293          	addi	t0,t0,24 # 80000020 <_enter+0x20>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/entry.S:37
    csrw mtvec, t0
    80000010:	30529073          	csrw	mtvec,t0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/entry.S:39
    /* chicken bit is enable if core are sifive series. */
    la t0, __metal_chicken_bit
    80000014:	00100293          	li	t0,1
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/entry.S:40
    beqz t0, 1f
    80000018:	00028463          	beqz	t0,80000020 <_enter+0x20>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/entry.S:42
    /* If set, always clear the feature disable register for all cores series */
    csrwi 0x7C1, 0
    8000001c:	7c105073          	csrwi	0x7c1,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/entry.S:47
.align 4
1:
    /* Set up a simple trap vector to catch anything that goes wrong early in
     * the boot process. */
    la t0, early_trap_vector
    80000020:	00000297          	auipc	t0,0x0
    80000024:	12428293          	addi	t0,t0,292 # 80000144 <early_trap_vector>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/entry.S:48
    csrw mtvec, t0
    80000028:	30529073          	csrw	mtvec,t0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/entry.S:56
     * C, so here we set up a C environment. First we set up a stack pointer,
     * which is left as a weak reference in order to allow initialization
     * routines that do not need a stack to be set up to transparently be
     * called. */
    .weak __metal_stack_pointer
    la sp, __metal_stack_pointer
    8000002c:	80000117          	auipc	sp,0x80000
    80000030:	fd410113          	addi	sp,sp,-44 # 0 <__metal_boot_hart>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/entry.S:63
   /* The METAL is designed for a bare-metal environment and therefore is expected
    * to define its own stack pointer. We also align the stack pointer here
    * because the only RISC-V ABI that's currently defined, mandates 16-byte
    * stack alignment. */

    bne sp, zero, 1f
    80000034:	00011463          	bnez	sp,8000003c <_enter+0x3c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/entry.S:67
#ifdef __riscv_cmodel_compact
    lla.gprel sp, _sp
#else
    la sp, _sp
    80000038:	d6818113          	addi	sp,gp,-664 # 80007ad0 <_sp>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/entry.S:71
#endif
1:
    /* Increment by hartid number of stack sizes */
    csrr a0, mhartid
    8000003c:	f1402573          	csrr	a0,mhartid
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/entry.S:72
    li t0, 0
    80000040:	4281                	li	t0,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/entry.S:73
    la t1, __stack_size
    80000042:	40000313          	li	t1,1024
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/entry.S:75
1:
    andi sp, sp, -16
    80000046:	ff017113          	andi	sp,sp,-16
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/entry.S:76
    beq t0, a0, 1f
    8000004a:	00a28563          	beq	t0,a0,80000054 <_enter+0x54>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/entry.S:77
    add sp, sp, t1
    8000004e:	911a                	add	sp,sp,t1
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/entry.S:78
    addi t0, t0, 1
    80000050:	0285                	addi	t0,t0,1
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/entry.S:79
    j 1b
    80000052:	bfd5                	j	80000046 <_enter+0x46>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/entry.S:88
     * just skip over the call entirely.   Note that __metal_initialize isn't
     * actually a full C function, as it doesn't end up with the .bss or .data
     * segments having been initialized.  This is done to avoid putting a
     * burden on systems that can be initialized without having a C environment
     * set up. */
    la ra, __metal_before_start
    80000054:	00000097          	auipc	ra,0x0
    80000058:	08408093          	addi	ra,ra,132 # 800000d8 <__metal_before_start>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/entry.S:89
    beqz ra, 1f
    8000005c:	00008363          	beqz	ra,80000062 <_enter+0x62>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/entry.S:90
    jalr ra
    80000060:	9082                	jalr	ra
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/entry.S:96
1:

    /* At this point we can enter the C runtime's startup file.  The arguments
     * to this function are designed to match those provided to the SEE, just
     * so we don't have to write another ABI. */
    csrr a0, mhartid
    80000062:	f1402573          	csrr	a0,mhartid
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/entry.S:97
    li a1, 0
    80000066:	4581                	li	a1,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/entry.S:98
    li a2, 0
    80000068:	4601                	li	a2,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/entry.S:99
    call _start
    8000006a:	0f6000ef          	jal	ra,80000160 <_start>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/entry.S:104

    /* If we've made it back here then there's probably something wrong.  We
     * allow the METAL to register a handler here. */
    .weak __metal_after_main
    la ra, __metal_after_main
    8000006e:	80000097          	auipc	ra,0x80000
    80000072:	f9208093          	addi	ra,ra,-110 # 0 <__metal_boot_hart>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/entry.S:105
    beqz ra, 1f
    80000076:	00008363          	beqz	ra,8000007c <_enter+0x7c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/entry.S:106
    jalr ra
    8000007a:	9082                	jalr	ra
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/entry.S:111
1:

    /* If that handler returns then there's not a whole lot we can do.  Just
     * try to make some noise. */
     la t0, 1f
    8000007c:	00000297          	auipc	t0,0x0
    80000080:	00c28293          	addi	t0,t0,12 # 80000088 <_enter+0x88>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/entry.S:112
     csrw mtvec, t0
    80000084:	30529073          	csrw	mtvec,t0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/entry.S:114
1:
     lw t1, 0(x0)
    80000088:	00002303          	lw	t1,0(zero) # 0 <__metal_boot_hart>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/entry.S:115
     j 1b
    8000008c:	bff5                	j	80000088 <_enter+0x88>
    8000008e:	0000                	unimp
	...

0000000080000092 <__register_frame_info>:
__register_frame_info():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/entry.S:128
 * going to leave this in for now.  At least it's fairly cheap :) */
.weak __register_frame_info
.section .text.metal.init.__register_frame_info
__register_frame_info:
    .cfi_startproc
    ret
    80000092:	8082                	ret

0000000080000094 <metal_mem_scrub>:
metal_mem_scrub():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/scrub.S:24
.type metal_mem_scrub, @function
metal_mem_scrub:

    /* Disable machine interrupts,
    restore previous mstatus value at exit */
    li      a3, 8
    80000094:	46a1                	li	a3,8
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/scrub.S:25
    csrrc   t1, mstatus, a3
    80000096:	3006b373          	csrrc	t1,mstatus,a3
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/scrub.S:48
    addi    a1, a1, -4
    bgtz    a1, 1b
    csrw    mstatus, t1
    ret
#else
    addi    t0, x0, 8
    8000009a:	00800293          	li	t0,8
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/scrub.S:50
1:
    blt     a1, t0, 2f
    8000009e:	0055c563          	blt	a1,t0,800000a8 <metal_mem_scrub+0x14>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/scrub.S:51
    andi    a2, a0, 7
    800000a2:	00757613          	andi	a2,a0,7
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/scrub.S:52
    beqz    a2, 3f
    800000a6:	ca11                	beqz	a2,800000ba <metal_mem_scrub+0x26>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/scrub.S:54
2:
    sb      x0, 0(a0)
    800000a8:	00050023          	sb	zero,0(a0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/scrub.S:55
    addi    a0, a0, 1
    800000ac:	0505                	addi	a0,a0,1
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/scrub.S:56
    addi    a1, a1, -1
    800000ae:	15fd                	addi	a1,a1,-1
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/scrub.S:57
    bgtz    a1, 1b
    800000b0:	feb047e3          	bgtz	a1,8000009e <metal_mem_scrub+0xa>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/scrub.S:58
    csrw    mstatus, t1
    800000b4:	30031073          	csrw	mstatus,t1
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/scrub.S:59
    ret
    800000b8:	8082                	ret
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/scrub.S:61
3:
    sd      x0, 0(a0)
    800000ba:	00053023          	sd	zero,0(a0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/scrub.S:62
    addi    a0, a0, 8
    800000be:	0521                	addi	a0,a0,8
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/scrub.S:63
    addi    a1, a1, -8
    800000c0:	15e1                	addi	a1,a1,-8
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/scrub.S:64
    bgtz    a1, 1b
    800000c2:	fcb04ee3          	bgtz	a1,8000009e <metal_mem_scrub+0xa>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/scrub.S:65
    csrw    mstatus, t1
    800000c6:	30031073          	csrw	mstatus,t1
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/scrub.S:66
    ret
    800000ca:	8082                	ret

00000000800000cc <__metal_memory_scrub>:
__metal_memory_scrub():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/scrub.S:78
#if __riscv_xlen == 32
    sw      x0, 0(t1)
    addi    t1, t1, 4
    blt     t1, t2, 1b
#else
    sd      x0, 0(t1)
    800000cc:	00033023          	sd	zero,0(t1)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/scrub.S:79
    addi    t1, t1, 8
    800000d0:	0321                	addi	t1,t1,8
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/scrub.S:80
    blt     t1, t2, 1b
    800000d2:	fe734de3          	blt	t1,t2,800000cc <__metal_memory_scrub>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/scrub.S:82
#endif
    ret
    800000d6:	8082                	ret

00000000800000d8 <__metal_before_start>:
__metal_before_start():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/scrub.S:93
.weak __metal_eccscrub_bit
.weak __metal_before_start
.type __metal_before_start, @function
__metal_before_start:
    /* Save caller ra */
    mv      s0, ra
    800000d8:	8406                	mv	s0,ra
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/scrub.S:95

    la      t0, __metal_eccscrub_bit
    800000da:	80000297          	auipc	t0,0x80000
    800000de:	f2628293          	addi	t0,t0,-218 # 0 <__metal_boot_hart>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/scrub.S:96
    beqz    t0, skip_scrub
    800000e2:	04028f63          	beqz	t0,80000140 <skip_scrub>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/scrub.S:98

    la      t0, __metal_boot_hart
    800000e6:	80000297          	auipc	t0,0x80000
    800000ea:	f1a28293          	addi	t0,t0,-230 # 0 <__metal_boot_hart>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/scrub.S:99
    csrr    a5, mhartid
    800000ee:	f14027f3          	csrr	a5,mhartid
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/scrub.S:102

    /* Disable machine interrupts to be safe */
    li      a3, 8
    800000f2:	46a1                	li	a3,8
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/scrub.S:103
    csrc    mstatus, a3
    800000f4:	3006b073          	csrc	mstatus,a3
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/scrub.S:106

    /* Zero out per hart stack */
    mv      t1, sp
    800000f8:	830a                	mv	t1,sp
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/scrub.S:107
    la      t2, __stack_size
    800000fa:	80000397          	auipc	t2,0x80000
    800000fe:	30638393          	addi	t2,t2,774 # 400 <__stack_size>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/scrub.S:108
    add     t2, t2, sp
    80000102:	938a                	add	t2,t2,sp
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/scrub.S:109
    beq     t1, t2, 1f
    80000104:	00730463          	beq	t1,t2,8000010c <__metal_before_start+0x34>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/scrub.S:110
    jal     __metal_memory_scrub
    80000108:	fc5ff0ef          	jal	ra,800000cc <__metal_memory_scrub>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/scrub.S:112
1:
    bne     a5, t0, skip_scrub
    8000010c:	02579a63          	bne	a5,t0,80000140 <skip_scrub>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/scrub.S:119
    /* Zero out data segment */
#ifdef __riscv_cmodel_compact
    lla.gprel t1, metal_segment_data_target_start
    lla.gprel t2, metal_segment_data_target_end
#else
    la      t1, metal_segment_data_target_start
    80000110:	00006317          	auipc	t1,0x6
    80000114:	77030313          	addi	t1,t1,1904 # 80006880 <metal_segment_data_source_start>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/scrub.S:120
    la      t2, metal_segment_data_target_end
    80000118:	00007397          	auipc	t2,0x7
    8000011c:	47838393          	addi	t2,t2,1144 # 80007590 <__tls_base>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/scrub.S:122
#endif
    beq     t1, t2, 1f
    80000120:	00730463          	beq	t1,t2,80000128 <__metal_before_start+0x50>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/scrub.S:123
    jal     __metal_memory_scrub
    80000124:	fa9ff0ef          	jal	ra,800000cc <__metal_memory_scrub>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/scrub.S:130
    /* Zero out itim memory */
#ifdef __riscv_cmodel_compact
    la.got.gprel t1, metal_segment_itim_target_start
    la.got.gprel t2, metal_segment_itim_target_end
#else
    la      t1, metal_segment_itim_target_start
    80000128:	00001317          	auipc	t1,0x1
    8000012c:	85030313          	addi	t1,t1,-1968 # 80000978 <metal_segment_itim_source_start>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/scrub.S:131
    la      t2, metal_segment_itim_target_end
    80000130:	00001397          	auipc	t2,0x1
    80000134:	84838393          	addi	t2,t2,-1976 # 80000978 <metal_segment_itim_source_start>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/scrub.S:133
#endif
    beq     t1, t2, skip_scrub
    80000138:	00730463          	beq	t1,t2,80000140 <skip_scrub>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/scrub.S:134
    jal     __metal_memory_scrub
    8000013c:	f91ff0ef          	jal	ra,800000cc <__metal_memory_scrub>

0000000080000140 <skip_scrub>:
skip_scrub():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/scrub.S:138

skip_scrub:
    /* Restore caller ra */
    mv      ra, s0
    80000140:	80a2                	mv	ra,s0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/scrub.S:139
    ret
    80000142:	8082                	ret

0000000080000144 <early_trap_vector>:
early_trap_vector():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/trap.S:64
.section .text.metal.init.trapvec
.global early_trap_vector
.align 2
early_trap_vector:
    .cfi_startproc
    csrr t0, mcause
    80000144:	342022f3          	csrr	t0,mcause
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/trap.S:65
    csrr t1, mepc
    80000148:	34102373          	csrr	t1,mepc
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/trap.S:66
    csrr t2, mtval
    8000014c:	343023f3          	csrr	t2,mtval
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/trap.S:67
    j early_trap_vector
    80000150:	bfd5                	j	80000144 <early_trap_vector>

0000000080000152 <__metal_synchronize_harts>:
__metal_synchronize_harts():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:19
/*
 * _synchronize_harts() is called by crt0.S to cause harts > 0 to wait for
 * hart 0 to finish copying the datat section, zeroing the BSS, and running
 * the libc contstructors.
 */
__attribute__((section(".init"))) void __metal_synchronize_harts() {
    80000152:	1141                	addi	sp,sp,-16
    80000154:	e422                	sd	s0,8(sp)
    80000156:	0800                	addi	s0,sp,16
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:66
        while (METAL_MSIP(msip_base, hart) == 1)
            ;
    }

#endif /* __METAL_DT_MAX_HARTS > 1 */
}
    80000158:	0001                	nop
    8000015a:	6422                	ld	s0,8(sp)
    8000015c:	0141                	addi	sp,sp,16
    8000015e:	8082                	ret

0000000080000160 <_start>:
_start():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:36
.cfi_startproc
.cfi_undefined ra

  /* This is a bit funky: it's not usually sane for _start to return, but in
   * this case we actually want to in order to signal an error to the METAL. */
  mv s0, ra
    80000160:	8406                	mv	s0,ra
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:51
  auipc a0, %pcrel_hi(__global_pointer__)
  addi a0, a0, %pcrel_lo(1b)
  ld   gp, 0(a0)
  add  gp, gp, a0
#else
  la gp, __global_pointer$
    80000162:	00008197          	auipc	gp,0x8
    80000166:	c0618193          	addi	gp,gp,-1018 # 80007d68 <__global_pointer$>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:58
.option pop

  /* Stack pointer is expected to be initialized before _start */

  /* If we're not hart 0, skip the initialization work */
  la t0, __metal_boot_hart
    8000016a:	00000293          	li	t0,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:59
  bne a0, t0, _skip_init
    8000016e:	0e551163          	bne	a0,t0,80000250 <_skip_init>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:73
#ifdef __riscv_cmodel_compact
  la.got.gprel t0, metal_segment_data_source_start
  lla.gprel t1, metal_segment_data_target_start
  lla.gprel t2, metal_segment_data_target_end
#else
  la t0, metal_segment_data_source_start
    80000172:	00006297          	auipc	t0,0x6
    80000176:	70e28293          	addi	t0,t0,1806 # 80006880 <metal_segment_data_source_start>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:74
  la t1, metal_segment_data_target_start
    8000017a:	00006317          	auipc	t1,0x6
    8000017e:	70630313          	addi	t1,t1,1798 # 80006880 <metal_segment_data_source_start>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:75
  la t2, metal_segment_data_target_end
    80000182:	00007397          	auipc	t2,0x7
    80000186:	40e38393          	addi	t2,t2,1038 # 80007590 <__tls_base>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:78
#endif

  beq t0, t1, 2f
    8000018a:	00628c63          	beq	t0,t1,800001a2 <_start+0x42>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:79
  bge t1, t2, 2f
    8000018e:	00735a63          	bge	t1,t2,800001a2 <_start+0x42>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:89
  addi t0, t0, 4
  sw   a0, 0(t1)
  addi t1, t1, 4
  blt  t1, t2, 1b
#else
  ld   a0, 0(t0)
    80000192:	0002b503          	ld	a0,0(t0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:90
  addi t0, t0, 8
    80000196:	02a1                	addi	t0,t0,8
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:91
  sd   a0, 0(t1)
    80000198:	00a33023          	sd	a0,0(t1)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:92
  addi t1, t1, 8
    8000019c:	0321                	addi	t1,t1,8
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:93
  blt  t1, t2, 1b
    8000019e:	fe734ae3          	blt	t1,t2,80000192 <_start+0x32>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:103
#ifdef __riscv_cmodel_compact
  la.got.gprel t0, metal_segment_itim_source_start
  la.got.gprel t1, metal_segment_itim_target_start
  la.got.gprel t2, metal_segment_itim_target_end
#else
  la t0, metal_segment_itim_source_start
    800001a2:	00000297          	auipc	t0,0x0
    800001a6:	7d628293          	addi	t0,t0,2006 # 80000978 <metal_segment_itim_source_start>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:104
  la t1, metal_segment_itim_target_start
    800001aa:	00000317          	auipc	t1,0x0
    800001ae:	7ce30313          	addi	t1,t1,1998 # 80000978 <metal_segment_itim_source_start>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:105
  la t2, metal_segment_itim_target_end
    800001b2:	00000397          	auipc	t2,0x0
    800001b6:	7c638393          	addi	t2,t2,1990 # 80000978 <metal_segment_itim_source_start>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:108
#endif

  beq t0, t1, 2f
    800001ba:	00628c63          	beq	t0,t1,800001d2 <_start+0x72>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:109
  bge t1, t2, 2f
    800001be:	00735a63          	bge	t1,t2,800001d2 <_start+0x72>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:119
  addi t0, t0, 4
  sw   a0, 0(t1)
  addi t1, t1, 4
  blt  t1, t2, 1b
#else
  ld   a0, 0(t0)
    800001c2:	0002b503          	ld	a0,0(t0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:120
  addi t0, t0, 8
    800001c6:	02a1                	addi	t0,t0,8
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:121
  sd   a0, 0(t1)
    800001c8:	00a33023          	sd	a0,0(t1)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:122
  addi t1, t1, 8
    800001cc:	0321                	addi	t1,t1,8
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:123
  blt  t1, t2, 1b
    800001ce:	fe734ae3          	blt	t1,t2,800001c2 <_start+0x62>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:129
#endif
2:

  /* Fence all subsequent instruction fetches until after the ITIM writes
     complete */
  fence.i
    800001d2:	0000100f          	fence.i
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:139
#ifdef __riscv_cmodel_compact
  la.got.gprel t0, metal_segment_lim_source_start
  lla.gprel t1, metal_segment_lim_target_start
  lla.gprel t2, metal_segment_lim_target_end
#else
  la t0, metal_segment_lim_source_start
    800001d6:	00000297          	auipc	t0,0x0
    800001da:	7a228293          	addi	t0,t0,1954 # 80000978 <metal_segment_itim_source_start>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:140
  la t1, metal_segment_lim_target_start
    800001de:	00000317          	auipc	t1,0x0
    800001e2:	79a30313          	addi	t1,t1,1946 # 80000978 <metal_segment_itim_source_start>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:141
  la t2, metal_segment_lim_target_end
    800001e6:	00000397          	auipc	t2,0x0
    800001ea:	79238393          	addi	t2,t2,1938 # 80000978 <metal_segment_itim_source_start>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:144
#endif

  beq t0, t1, 2f
    800001ee:	00628c63          	beq	t0,t1,80000206 <_start+0xa6>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:145
  bge t1, t2, 2f
    800001f2:	00735a63          	bge	t1,t2,80000206 <_start+0xa6>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:155
  addi t0, t0, 4
  sw   a0, 0(t1)
  addi t1, t1, 4
  blt  t1, t2, 1b
#else
  ld   a0, 0(t0)
    800001f6:	0002b503          	ld	a0,0(t0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:156
  addi t0, t0, 8
    800001fa:	02a1                	addi	t0,t0,8
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:157
  sd   a0, 0(t1)
    800001fc:	00a33023          	sd	a0,0(t1)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:158
  addi t1, t1, 8
    80000200:	0321                	addi	t1,t1,8
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:159
  blt  t1, t2, 1b
    80000202:	fe734ae3          	blt	t1,t2,800001f6 <_start+0x96>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:165
#endif
2:

  /* Fence all subsequent instruction fetches until after the LIM writes
     complete */
  fence.i
    80000206:	0000100f          	fence.i
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:172
  /* Zero the BSS segment. */
#ifdef __riscv_cmodel_compact
  lla.gprel t1, metal_segment_bss_target_start
  lla.gprel t2, metal_segment_bss_target_end
#else
  la t1, metal_segment_bss_target_start
    8000020a:	00007317          	auipc	t1,0x7
    8000020e:	38630313          	addi	t1,t1,902 # 80007590 <__tls_base>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:173
  la t2, metal_segment_bss_target_end
    80000212:	96418393          	addi	t2,gp,-1692 # 800076cc <metal_segment_bss_target_end>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:176
#endif

  bge t1, t2, 2f
    80000216:	00735763          	bge	t1,t2,80000224 <_start+0xc4>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:184
#if __riscv_xlen == 32
  sw   x0, 0(t1)
  addi t1, t1, 4
  blt  t1, t2, 1b
#else
  sd   x0, 0(t1)
    8000021a:	00033023          	sd	zero,0(t1)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:185
  addi t1, t1, 8
    8000021e:	0321                	addi	t1,t1,8
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:186
  blt  t1, t2, 1b
    80000220:	fe734de3          	blt	t1,t2,8000021a <_start+0xba>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:195
  /* Set TLS pointer */
  .weak __tls_base	
#ifdef __riscv_cmodel_compact
  lla.gprel tp, __tls_base
#else
  la tp, __tls_base
    80000224:	00007217          	auipc	tp,0x7
    80000228:	36c20213          	addi	tp,tp,876 # 80007590 <__tls_base>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:201
#endif

  /* At this point we're in an environment that can execute C code.  The first
   * thing to do is to make the callback to the parent environment if it's been
   * requested to do so. */
  beqz a2, 1f
    8000022c:	c211                	beqz	a2,80000230 <_start+0xd0>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:202
  jalr a2
    8000022e:	9602                	jalr	a2
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:206
1:

  /* The RISC-V port only uses new-style constructors and destructors. */
  la a0, __libc_fini_array
    80000230:	00006517          	auipc	a0,0x6
    80000234:	2f250513          	addi	a0,a0,754 # 80006522 <__libc_fini_array>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:207
  call atexit
    80000238:	2ae060ef          	jal	ra,800064e6 <atexit>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:208
  call __libc_init_array
    8000023c:	31e060ef          	jal	ra,8000655a <__libc_init_array>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:212

  /* Register metal_fini_run as a destructor and call metal_init_run to
   * run and setup Metal constructors */
  la a0, metal_fini_run
    80000240:	00006517          	auipc	a0,0x6
    80000244:	5e250513          	addi	a0,a0,1506 # 80006822 <metal_fini_run>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:213
  call atexit
    80000248:	29e060ef          	jal	ra,800064e6 <atexit>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:214
  call metal_init_run
    8000024c:	5c0060ef          	jal	ra,8000680c <metal_init_run>

0000000080000250 <_skip_init>:
_skip_init():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:220

_skip_init:

  /* Synchronize harts so that secondary harts wait until hart 0 finishes
     initializing */
  call __metal_synchronize_harts
    80000250:	f03ff0ef          	jal	ra,80000152 <__metal_synchronize_harts>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:223

  /* Disable and clear all interrupt sources */
  li   a3, -1
    80000254:	56fd                	li	a3,-1
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:224
  csrc mie, a3
    80000256:	3046b073          	csrc	mie,a3
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:225
  csrc mip, a3
    8000025a:	3446b073          	csrc	mip,a3
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:229

  /* The delegation CSRs exist if user mode interrupts (N extension) or
   * supervisor mode (S extension) are supported */
  csrr a5, misa
    8000025e:	301027f3          	csrr	a5,misa
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:230
  lui  a4, 0x42
    80000262:	00042737          	lui	a4,0x42
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:231
  and  a4, a4, a5
    80000266:	8f7d                	and	a4,a4,a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:232
  beqz a4, 1f
    80000268:	c709                	beqz	a4,80000272 <_skip_init+0x22>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:233
  csrc mideleg, a3
    8000026a:	3036b073          	csrc	mideleg,a3
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:234
  csrc medeleg, a3
    8000026e:	3026b073          	csrc	medeleg,a3
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:238
1:

  /* The satp CSR exists if supervisor mode (S extension) is supported */
  lui  a4, 0x40
    80000272:	00040737          	lui	a4,0x40
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:239
  and  a4, a4, a5
    80000276:	8f7d                	and	a4,a4,a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:240
  beqz a4, 1f
    80000278:	c319                	beqz	a4,8000027e <_skip_init+0x2e>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:241
  csrc satp, a3
    8000027a:	1806b073          	csrc	satp,a3
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:245
1:

  /* Check RISC-V isa and enable FS bits if Floating Point architecture. */
  li   a4, 0x10028
    8000027e:	00010737          	lui	a4,0x10
    80000282:	0287071b          	addiw	a4,a4,40
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:246
  and  a5, a5, a4
    80000286:	8ff9                	and	a5,a5,a4
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:247
  beqz a5, 1f
    80000288:	cb89                	beqz	a5,8000029a <_skip_init+0x4a>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:248
  csrr a5, mstatus
    8000028a:	300027f3          	csrr	a5,mstatus
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:249
  lui  a4, 0x2
    8000028e:	6709                	lui	a4,0x2
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:250
  or   a5, a5, a4
    80000290:	8fd9                	or	a5,a5,a4
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:251
  csrw mstatus, a5
    80000292:	30079073          	csrw	mstatus,a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:252
  csrwi fcsr, 0
    80000296:	00305073          	csrwi	fcsr,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:273
#endif

  /* This is a C runtime, so main() is defined to have some arguments.  Since
   * there's nothing sane the METAL can pass we don't bother with that but
   * instead just setup as close to a NOP as we can. */
  li a0, 1     /* argc=1 */
    8000029a:	4505                	li	a0,1
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:274
  la a1, argv  /* argv = {"libgloss", NULL} */
    8000029c:	00000597          	auipc	a1,0x0
    800002a0:	6bc58593          	addi	a1,a1,1724 # 80000958 <argv>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:275
  la a2, envp  /* envp = {NULL} */
    800002a4:	00000617          	auipc	a2,0x0
    800002a8:	6bc60613          	addi	a2,a2,1724 # 80000960 <envp>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:276
  call secondary_main
    800002ac:	00e000ef          	jal	ra,800002ba <secondary_main>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:282

  /* Call exit to handle libc's cleanup routines.  Under normal contains this
   * shouldn't even get called, but I'm still not using a tail call here
   * because returning to the METAL is the right thing to do in pathological
   * situations. */
  call exit
    800002b0:	248060ef          	jal	ra,800064f8 <exit>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:287

  /* And here's where we return.  Again, it's a bit odd but the METAL defines
   * this as a bad idea (ie, as opposed to leaving it undefined) and at this
   * point it's really the only thing left to do. */
  mv ra, s0
    800002b4:	80a2                	mv	ra,s0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:288
  ret
    800002b6:	8082                	ret

00000000800002b8 <_fini>:
_init():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:300
.type   _init, @function
.global _fini
.type   _fini, @function
_init:
_fini:
  ret
    800002b8:	8082                	ret

00000000800002ba <secondary_main>:
secondary_main():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:310
 * Users can redefine secondary_main themselves to run code on secondary harts */
.weak   secondary_main
.type   secondary_main, @function

secondary_main:
  addi sp, sp, -16
    800002ba:	1141                	addi	sp,sp,-16
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:314
#if __riscv_xlen == 32
  sw ra, 4(sp)
#else
  sd ra, 8(sp)
    800002bc:	e406                	sd	ra,8(sp)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:316
#endif
  csrr t0, mhartid
    800002be:	f14022f3          	csrr	t0,mhartid
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:317
  la t1, __metal_boot_hart
    800002c2:	00000313          	li	t1,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:318
  beq t0, t1, 2f
    800002c6:	00628563          	beq	t0,t1,800002d0 <secondary_main+0x16>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:320
1:
  wfi
    800002ca:	10500073          	wfi
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:321
  j 1b
    800002ce:	bff5                	j	800002ca <secondary_main+0x10>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:323
2:
  call main
    800002d0:	730000ef          	jal	ra,80000a00 <main>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:327
#if __riscv_xlen == 32
  lw ra, 4(sp)
#else
  ld ra, 8(sp)
    800002d4:	60a2                	ld	ra,8(sp)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:329
#endif
  addi sp, sp, 16
    800002d6:	0141                	addi	sp,sp,16
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/crt0.S:330
  ret
    800002d8:	8082                	ret

Disassembly of section .ctors:

00000000800002e8 <metal_tty_init>:
metal_tty_init():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/tty.c:28

#ifndef __METAL_DT_STDOUT_UART_BAUD
#define __METAL_DT_STDOUT_UART_BAUD 115200
#endif

METAL_CONSTRUCTOR(metal_tty_init) {
    800002e8:	1141                	addi	sp,sp,-16
    800002ea:	e406                	sd	ra,8(sp)
    800002ec:	e022                	sd	s0,0(sp)
    800002ee:	0800                	addi	s0,sp,16
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/tty.c:29
    metal_uart_init(__METAL_DT_STDOUT_UART_HANDLE, __METAL_DT_STDOUT_UART_BAUD);
    800002f0:	67f1                	lui	a5,0x1c
    800002f2:	20078593          	addi	a1,a5,512 # 1c200 <__heap_size+0x1ba00>
    800002f6:	00007517          	auipc	a0,0x7
    800002fa:	23250513          	addi	a0,a0,562 # 80007528 <__metal_dt_serial_10013000>
    800002fe:	519050ef          	jal	ra,80006016 <metal_uart_init>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/tty.c:30
}
    80000302:	0001                	nop
    80000304:	60a2                	ld	ra,8(sp)
    80000306:	6402                	ld	s0,0(sp)
    80000308:	0141                	addi	sp,sp,16
    8000030a:	8082                	ret

Disassembly of section .text:

0000000080000a00 <main>:
main():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/main.c:15
#include <metal/machine.h>
#include <time.h>
#include "sgp30.h"
#include "sht35.h"

int main() {
    80000a00:	7179                	addi	sp,sp,-48
    80000a02:	f406                	sd	ra,40(sp)
    80000a04:	f022                	sd	s0,32(sp)
    80000a06:	1800                	addi	s0,sp,48
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/main.c:27
	uint16_t	humi; 
	
	uint8_t 	CO2;
	uint8_t		TVOC;

	i2c = metal_i2c_get_device(0);
    80000a08:	4501                	li	a0,0
    80000a0a:	508050ef          	jal	ra,80005f12 <metal_i2c_get_device>
    80000a0e:	fea43423          	sd	a0,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/main.c:28
	if (i2c == NULL) {
    80000a12:	fe843783          	ld	a5,-24(s0)
    80000a16:	eb89                	bnez	a5,80000a28 <main+0x28>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/main.c:29
		printf("I2C's not availble \n");
    80000a18:	00000517          	auipc	a0,0x0
    80000a1c:	8f850513          	addi	a0,a0,-1800 # 80000310 <__fini_array_end+0x28>
    80000a20:	4ea000ef          	jal	ra,80000f0a <puts>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/main.c:30
		return 1; 
    80000a24:	4785                	li	a5,1
    80000a26:	a0ed                	j	80000b10 <main+0x110>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/main.c:32
	}
	printf("I2C availble \n");
    80000a28:	00000517          	auipc	a0,0x0
    80000a2c:	90050513          	addi	a0,a0,-1792 # 80000328 <__fini_array_end+0x40>
    80000a30:	4da000ef          	jal	ra,80000f0a <puts>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/main.c:34
	
	metal_i2c_init(i2c, I2C_BAURATE, METAL_I2C_MASTER);
    80000a34:	4605                	li	a2,1
    80000a36:	679d                	lui	a5,0x7
    80000a38:	53078593          	addi	a1,a5,1328 # 7530 <__heap_size+0x6d30>
    80000a3c:	fe843503          	ld	a0,-24(s0)
    80000a40:	3c2050ef          	jal	ra,80005e02 <metal_i2c_init>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/main.c:36
	
	init_air_quality(i2c);
    80000a44:	fe843503          	ld	a0,-24(s0)
    80000a48:	104000ef          	jal	ra,80000b4c <init_air_quality>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/main.c:37
	delay_t(1000);
    80000a4c:	3e800513          	li	a0,1000
    80000a50:	1f6000ef          	jal	ra,80000c46 <delay_t>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/main.c:40 (discriminator 1)

	while(1){
		printf("Day: %s \n", __DATE__);
    80000a54:	00000597          	auipc	a1,0x0
    80000a58:	8e458593          	addi	a1,a1,-1820 # 80000338 <__fini_array_end+0x50>
    80000a5c:	00000517          	auipc	a0,0x0
    80000a60:	8ec50513          	addi	a0,a0,-1812 # 80000348 <__fini_array_end+0x60>
    80000a64:	37c000ef          	jal	ra,80000de0 <iprintf>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/main.c:41 (discriminator 1)
		temp_humi	= get_sht35_sensor_data(i2c);
    80000a68:	fe843503          	ld	a0,-24(s0)
    80000a6c:	20c000ef          	jal	ra,80000c78 <get_sht35_sensor_data>
    80000a70:	87aa                	mv	a5,a0
    80000a72:	fef42223          	sw	a5,-28(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/main.c:42 (discriminator 1)
		temp 		= (temp_humi >> 8) - 45;
    80000a76:	fe442783          	lw	a5,-28(s0)
    80000a7a:	0087d79b          	srliw	a5,a5,0x8
    80000a7e:	2781                	sext.w	a5,a5
    80000a80:	17c2                	slli	a5,a5,0x30
    80000a82:	93c1                	srli	a5,a5,0x30
    80000a84:	fd37879b          	addiw	a5,a5,-45
    80000a88:	17c2                	slli	a5,a5,0x30
    80000a8a:	93c1                	srli	a5,a5,0x30
    80000a8c:	fef41123          	sh	a5,-30(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/main.c:43 (discriminator 1)
	       	humi		= temp_humi & 0x00FF;
    80000a90:	fe442783          	lw	a5,-28(s0)
    80000a94:	17c2                	slli	a5,a5,0x30
    80000a96:	93c1                	srli	a5,a5,0x30
    80000a98:	0ff7f793          	andi	a5,a5,255
    80000a9c:	fef41023          	sh	a5,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/main.c:44 (discriminator 1)
		printf("Temperature: %d || Humidity: %d \n", temp, humi);
    80000aa0:	fe241783          	lh	a5,-30(s0)
    80000aa4:	2781                	sext.w	a5,a5
    80000aa6:	fe045703          	lhu	a4,-32(s0)
    80000aaa:	2701                	sext.w	a4,a4
    80000aac:	863a                	mv	a2,a4
    80000aae:	85be                	mv	a1,a5
    80000ab0:	00000517          	auipc	a0,0x0
    80000ab4:	8a850513          	addi	a0,a0,-1880 # 80000358 <__fini_array_end+0x70>
    80000ab8:	328000ef          	jal	ra,80000de0 <iprintf>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/main.c:45 (discriminator 1)
		reset_sht35_sensor_data(i2c);
    80000abc:	fe843503          	ld	a0,-24(s0)
    80000ac0:	2dc000ef          	jal	ra,80000d9c <reset_sht35_sensor_data>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/main.c:47 (discriminator 1)
			
		CO2_TVOC 	= get_sgp30_sensor_data(i2c);
    80000ac4:	fe843503          	ld	a0,-24(s0)
    80000ac8:	0c6000ef          	jal	ra,80000b8e <get_sgp30_sensor_data>
    80000acc:	87aa                	mv	a5,a0
    80000ace:	fcf41f23          	sh	a5,-34(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/main.c:48 (discriminator 1)
		CO2 		= (uint8_t)(CO2_TVOC >> 8);
    80000ad2:	fde45783          	lhu	a5,-34(s0)
    80000ad6:	0087d79b          	srliw	a5,a5,0x8
    80000ada:	17c2                	slli	a5,a5,0x30
    80000adc:	93c1                	srli	a5,a5,0x30
    80000ade:	fcf40ea3          	sb	a5,-35(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/main.c:49 (discriminator 1)
		TVOC		= (uint8_t)(CO2_TVOC & 0xFF);
    80000ae2:	fde45783          	lhu	a5,-34(s0)
    80000ae6:	fcf40e23          	sb	a5,-36(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/main.c:50 (discriminator 1)
		printf("CO2: %d         || TVOC: %d     \n", CO2, TVOC);
    80000aea:	fdd44783          	lbu	a5,-35(s0)
    80000aee:	2781                	sext.w	a5,a5
    80000af0:	fdc44703          	lbu	a4,-36(s0)
    80000af4:	2701                	sext.w	a4,a4
    80000af6:	863a                	mv	a2,a4
    80000af8:	85be                	mv	a1,a5
    80000afa:	00000517          	auipc	a0,0x0
    80000afe:	88650513          	addi	a0,a0,-1914 # 80000380 <__fini_array_end+0x98>
    80000b02:	2de000ef          	jal	ra,80000de0 <iprintf>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/main.c:51 (discriminator 1)
		delay_t(1000);
    80000b06:	3e800513          	li	a0,1000
    80000b0a:	13c000ef          	jal	ra,80000c46 <delay_t>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/main.c:40 (discriminator 1)
		printf("Day: %s \n", __DATE__);
    80000b0e:	b799                	j	80000a54 <main+0x54>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/main.c:55
	}	

	return 0;
}
    80000b10:	853e                	mv	a0,a5
    80000b12:	70a2                	ld	ra,40(sp)
    80000b14:	7402                	ld	s0,32(sp)
    80000b16:	6145                	addi	sp,sp,48
    80000b18:	8082                	ret

0000000080000b1a <delay_time>:
delay_time():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/sgp30.c:11
#include <metal/i2c.h>
#include <metal/gpio.h>
#include <metal/uart.h>
#include "sgp30.h"

void delay_time(){
    80000b1a:	1101                	addi	sp,sp,-32
    80000b1c:	ec22                	sd	s0,24(sp)
    80000b1e:	1000                	addi	s0,sp,32
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/sgp30.c:12
	for(int i=0; i<10000000; i++);
    80000b20:	fe042623          	sw	zero,-20(s0)
    80000b24:	a031                	j	80000b30 <delay_time+0x16>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/sgp30.c:12 (discriminator 3)
    80000b26:	fec42783          	lw	a5,-20(s0)
    80000b2a:	2785                	addiw	a5,a5,1
    80000b2c:	fef42623          	sw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/sgp30.c:12 (discriminator 1)
    80000b30:	fec42783          	lw	a5,-20(s0)
    80000b34:	0007871b          	sext.w	a4,a5
    80000b38:	009897b7          	lui	a5,0x989
    80000b3c:	67f78793          	addi	a5,a5,1663 # 98967f <__heap_size+0x988e7f>
    80000b40:	fee7d3e3          	bge	a5,a4,80000b26 <delay_time+0xc>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/sgp30.c:13
}
    80000b44:	0001                	nop
    80000b46:	6462                	ld	s0,24(sp)
    80000b48:	6105                	addi	sp,sp,32
    80000b4a:	8082                	ret

0000000080000b4c <init_air_quality>:
init_air_quality():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/sgp30.c:15

void init_air_quality(struct metal_i2c *i2c){
    80000b4c:	7179                	addi	sp,sp,-48
    80000b4e:	f406                	sd	ra,40(sp)
    80000b50:	f022                	sd	s0,32(sp)
    80000b52:	1800                	addi	s0,sp,48
    80000b54:	fca43c23          	sd	a0,-40(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/sgp30.c:18
	uint8_t cmd[LEN2];

	cmd[0] = (uint8_t)(INIT_AIR_QUALITY >> 8);
    80000b58:	02000793          	li	a5,32
    80000b5c:	fef40423          	sb	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/sgp30.c:19
	cmd[1] = (uint8_t)(INIT_AIR_QUALITY & 0xFF);
    80000b60:	478d                	li	a5,3
    80000b62:	fef404a3          	sb	a5,-23(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/sgp30.c:21

	metal_i2c_write(i2c, SGP30_I2C_ADDR, LEN2, cmd, METAL_I2C_STOP_DISABLE);
    80000b66:	fe840793          	addi	a5,s0,-24
    80000b6a:	4701                	li	a4,0
    80000b6c:	86be                	mv	a3,a5
    80000b6e:	4609                	li	a2,2
    80000b70:	05800593          	li	a1,88
    80000b74:	fd843503          	ld	a0,-40(s0)
    80000b78:	2c8050ef          	jal	ra,80005e40 <metal_i2c_write>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/sgp30.c:22
	delay_time(1000);
    80000b7c:	3e800513          	li	a0,1000
    80000b80:	f9bff0ef          	jal	ra,80000b1a <delay_time>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/sgp30.c:23
}
    80000b84:	0001                	nop
    80000b86:	70a2                	ld	ra,40(sp)
    80000b88:	7402                	ld	s0,32(sp)
    80000b8a:	6145                	addi	sp,sp,48
    80000b8c:	8082                	ret

0000000080000b8e <get_sgp30_sensor_data>:
get_sgp30_sensor_data():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/sgp30.c:25

uint16_t get_sgp30_sensor_data(struct metal_i2c *i2c){
    80000b8e:	7179                	addi	sp,sp,-48
    80000b90:	f406                	sd	ra,40(sp)
    80000b92:	f022                	sd	s0,32(sp)
    80000b94:	1800                	addi	s0,sp,48
    80000b96:	fca43c23          	sd	a0,-40(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/sgp30.c:33

	uint8_t tmp; 
	uint16_t CO2_TVOC; 
	
	/*set the command for measuring data */
	cmd[0] = (uint8_t)(MEASURE_AIR_QUALITY >> 8);
    80000b9a:	02000793          	li	a5,32
    80000b9e:	fef40423          	sb	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/sgp30.c:34
	cmd[1] = (uint8_t)(MEASURE_AIR_QUALITY & 0xFF);
    80000ba2:	47a1                	li	a5,8
    80000ba4:	fef404a3          	sb	a5,-23(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/sgp30.c:37

	/* write/read data from I2C address */
	metal_i2c_write(i2c, SGP30_I2C_ADDR, LEN2, cmd, METAL_I2C_STOP_DISABLE);
    80000ba8:	fe840793          	addi	a5,s0,-24
    80000bac:	4701                	li	a4,0
    80000bae:	86be                	mv	a3,a5
    80000bb0:	4609                	li	a2,2
    80000bb2:	05800593          	li	a1,88
    80000bb6:	fd843503          	ld	a0,-40(s0)
    80000bba:	286050ef          	jal	ra,80005e40 <metal_i2c_write>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/sgp30.c:38
	delay_time(1000);
    80000bbe:	3e800513          	li	a0,1000
    80000bc2:	f59ff0ef          	jal	ra,80000b1a <delay_time>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/sgp30.c:39
	metal_i2c_read(i2c, SGP30_I2C_ADDR, 3, buf, METAL_I2C_STOP_ENABLE);
    80000bc6:	fe040793          	addi	a5,s0,-32
    80000bca:	4705                	li	a4,1
    80000bcc:	86be                	mv	a3,a5
    80000bce:	460d                	li	a2,3
    80000bd0:	05800593          	li	a1,88
    80000bd4:	fd843503          	ld	a0,-40(s0)
    80000bd8:	2b8050ef          	jal	ra,80005e90 <metal_i2c_read>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/sgp30.c:42
	
	/*export CO2 data */
	CO2_TVOC 	= (CO2_TVOC & 0xFF) | (uint16_t)buf[0] << 8;
    80000bdc:	fee41783          	lh	a5,-18(s0)
    80000be0:	0ff7f793          	andi	a5,a5,255
    80000be4:	0107971b          	slliw	a4,a5,0x10
    80000be8:	4107571b          	sraiw	a4,a4,0x10
    80000bec:	fe044783          	lbu	a5,-32(s0)
    80000bf0:	2781                	sext.w	a5,a5
    80000bf2:	0087979b          	slliw	a5,a5,0x8
    80000bf6:	2781                	sext.w	a5,a5
    80000bf8:	0107979b          	slliw	a5,a5,0x10
    80000bfc:	4107d79b          	sraiw	a5,a5,0x10
    80000c00:	8fd9                	or	a5,a5,a4
    80000c02:	0107979b          	slliw	a5,a5,0x10
    80000c06:	4107d79b          	sraiw	a5,a5,0x10
    80000c0a:	fef41723          	sh	a5,-18(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/sgp30.c:44

	CO2_TVOC 	= (CO2_TVOC & 0xFF00) | buf[1] ;
    80000c0e:	fee41783          	lh	a5,-18(s0)
    80000c12:	f007f793          	andi	a5,a5,-256
    80000c16:	0107971b          	slliw	a4,a5,0x10
    80000c1a:	4107571b          	sraiw	a4,a4,0x10
    80000c1e:	fe144783          	lbu	a5,-31(s0)
    80000c22:	0107979b          	slliw	a5,a5,0x10
    80000c26:	4107d79b          	sraiw	a5,a5,0x10
    80000c2a:	8fd9                	or	a5,a5,a4
    80000c2c:	0107979b          	slliw	a5,a5,0x10
    80000c30:	4107d79b          	sraiw	a5,a5,0x10
    80000c34:	fef41723          	sh	a5,-18(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/sgp30.c:46
	
	return CO2_TVOC;
    80000c38:	fee45783          	lhu	a5,-18(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/sgp30.c:47
}
    80000c3c:	853e                	mv	a0,a5
    80000c3e:	70a2                	ld	ra,40(sp)
    80000c40:	7402                	ld	s0,32(sp)
    80000c42:	6145                	addi	sp,sp,48
    80000c44:	8082                	ret

0000000080000c46 <delay_t>:
delay_t():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/sht35.c:12
#include <metal/uart.h>
#include <metal/machine.h>
#include <time.h>
#include "sht35.h"

void delay_t(){
    80000c46:	1101                	addi	sp,sp,-32
    80000c48:	ec22                	sd	s0,24(sp)
    80000c4a:	1000                	addi	s0,sp,32
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/sht35.c:13
	for(int i=0; i < 10000000; i++);
    80000c4c:	fe042623          	sw	zero,-20(s0)
    80000c50:	a031                	j	80000c5c <delay_t+0x16>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/sht35.c:13 (discriminator 3)
    80000c52:	fec42783          	lw	a5,-20(s0)
    80000c56:	2785                	addiw	a5,a5,1
    80000c58:	fef42623          	sw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/sht35.c:13 (discriminator 1)
    80000c5c:	fec42783          	lw	a5,-20(s0)
    80000c60:	0007871b          	sext.w	a4,a5
    80000c64:	009897b7          	lui	a5,0x989
    80000c68:	67f78793          	addi	a5,a5,1663 # 98967f <__heap_size+0x988e7f>
    80000c6c:	fee7d3e3          	bge	a5,a4,80000c52 <delay_t+0xc>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/sht35.c:14
}
    80000c70:	0001                	nop
    80000c72:	6462                	ld	s0,24(sp)
    80000c74:	6105                	addi	sp,sp,32
    80000c76:	8082                	ret

0000000080000c78 <get_sht35_sensor_data>:
get_sht35_sensor_data():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/sht35.c:16

uint16_t get_sht35_sensor_data(struct metal_i2c *i2c){
    80000c78:	7139                	addi	sp,sp,-64
    80000c7a:	fc06                	sd	ra,56(sp)
    80000c7c:	f822                	sd	s0,48(sp)
    80000c7e:	0080                	addi	s0,sp,64
    80000c80:	fca43423          	sd	a0,-56(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/sht35.c:26
	int16_t		tmp1;
	
	uint16_t 	hum; 
	int16_t		hum1; 

	uint32_t	temp_humi = 0;	
    80000c84:	fe042623          	sw	zero,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/sht35.c:30
	
	/*set the command for measuring data */
	/*Measure with Repeatability: High, Clock stretching: enable */
	cmd[0] 	= (uint8_t)(SHT35_CMD_CLOCK_STRETCH_M >> 8);
    80000c88:	02c00793          	li	a5,44
    80000c8c:	fef40023          	sb	a5,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/sht35.c:31
	cmd[1] 	= (uint8_t)(SHT35_CMD_CLOCK_STRETCH_M & 0xFF); 
    80000c90:	47b5                	li	a5,13
    80000c92:	fef400a3          	sb	a5,-31(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/sht35.c:35
	

	/* write/read data from I2C address */
	metal_i2c_write(i2c, SHT35_I2C_ADDR, LEN2, cmd, METAL_I2C_STOP_DISABLE);
    80000c96:	fe040793          	addi	a5,s0,-32
    80000c9a:	4701                	li	a4,0
    80000c9c:	86be                	mv	a3,a5
    80000c9e:	4609                	li	a2,2
    80000ca0:	04500593          	li	a1,69
    80000ca4:	fc843503          	ld	a0,-56(s0)
    80000ca8:	198050ef          	jal	ra,80005e40 <metal_i2c_write>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/sht35.c:36
	delay_t(1000);
    80000cac:	3e800513          	li	a0,1000
    80000cb0:	f97ff0ef          	jal	ra,80000c46 <delay_t>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/sht35.c:39
//	metal_i2c_write(i2c, SHT35_I2C_ADDR, LEN2, cmd, METAL_I2C_STOP_DISABLE);
//	delay_t();
	metal_i2c_read(i2c, SHT35_I2C_ADDR, 6, buf, METAL_I2C_STOP_ENABLE);
    80000cb4:	fd840793          	addi	a5,s0,-40
    80000cb8:	4705                	li	a4,1
    80000cba:	86be                	mv	a3,a5
    80000cbc:	4619                	li	a2,6
    80000cbe:	04500593          	li	a1,69
    80000cc2:	fc843503          	ld	a0,-56(s0)
    80000cc6:	1ca050ef          	jal	ra,80005e90 <metal_i2c_read>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/sht35.c:48
			printf ("value of buf[%d]: %02x \n", i, buf[i]);
		}		
	#endif

	/*export temperature data */
	tmp		= ((uint16_t)buf[0] <<8) | buf[1];
    80000cca:	fd844783          	lbu	a5,-40(s0)
    80000cce:	2781                	sext.w	a5,a5
    80000cd0:	0087979b          	slliw	a5,a5,0x8
    80000cd4:	2781                	sext.w	a5,a5
    80000cd6:	0107971b          	slliw	a4,a5,0x10
    80000cda:	4107571b          	sraiw	a4,a4,0x10
    80000cde:	fd944783          	lbu	a5,-39(s0)
    80000ce2:	0107979b          	slliw	a5,a5,0x10
    80000ce6:	4107d79b          	sraiw	a5,a5,0x10
    80000cea:	8fd9                	or	a5,a5,a4
    80000cec:	0107979b          	slliw	a5,a5,0x10
    80000cf0:	4107d79b          	sraiw	a5,a5,0x10
    80000cf4:	fef41523          	sh	a5,-22(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/sht35.c:49
	tmp1 		= (175*tmp)/65535;
    80000cf8:	fea45783          	lhu	a5,-22(s0)
    80000cfc:	0007871b          	sext.w	a4,a5
    80000d00:	0af00793          	li	a5,175
    80000d04:	02f707bb          	mulw	a5,a4,a5
    80000d08:	2781                	sext.w	a5,a5
    80000d0a:	873e                	mv	a4,a5
    80000d0c:	67c1                	lui	a5,0x10
    80000d0e:	37fd                	addiw	a5,a5,-1
    80000d10:	02f747bb          	divw	a5,a4,a5
    80000d14:	2781                	sext.w	a5,a5
    80000d16:	fef41423          	sh	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/sht35.c:50
	temp_humi 	= ((uint16_t)tmp1 << 8);
    80000d1a:	fe845783          	lhu	a5,-24(s0)
    80000d1e:	2781                	sext.w	a5,a5
    80000d20:	0087979b          	slliw	a5,a5,0x8
    80000d24:	2781                	sext.w	a5,a5
    80000d26:	fef42623          	sw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/sht35.c:53
	
	/*export humidity data */
	hum		= ((uint16_t)buf[3] << 8) | buf[4];
    80000d2a:	fdb44783          	lbu	a5,-37(s0)
    80000d2e:	2781                	sext.w	a5,a5
    80000d30:	0087979b          	slliw	a5,a5,0x8
    80000d34:	2781                	sext.w	a5,a5
    80000d36:	0107971b          	slliw	a4,a5,0x10
    80000d3a:	4107571b          	sraiw	a4,a4,0x10
    80000d3e:	fdc44783          	lbu	a5,-36(s0)
    80000d42:	0107979b          	slliw	a5,a5,0x10
    80000d46:	4107d79b          	sraiw	a5,a5,0x10
    80000d4a:	8fd9                	or	a5,a5,a4
    80000d4c:	0107979b          	slliw	a5,a5,0x10
    80000d50:	4107d79b          	sraiw	a5,a5,0x10
    80000d54:	fef41323          	sh	a5,-26(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/sht35.c:54
	hum1		= (100*hum)/65535;
    80000d58:	fe645783          	lhu	a5,-26(s0)
    80000d5c:	0007871b          	sext.w	a4,a5
    80000d60:	06400793          	li	a5,100
    80000d64:	02f707bb          	mulw	a5,a4,a5
    80000d68:	2781                	sext.w	a5,a5
    80000d6a:	873e                	mv	a4,a5
    80000d6c:	67c1                	lui	a5,0x10
    80000d6e:	37fd                	addiw	a5,a5,-1
    80000d70:	02f747bb          	divw	a5,a4,a5
    80000d74:	2781                	sext.w	a5,a5
    80000d76:	fef41223          	sh	a5,-28(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/sht35.c:56

	temp_humi 	= temp_humi + hum1;
    80000d7a:	fe441783          	lh	a5,-28(s0)
    80000d7e:	2781                	sext.w	a5,a5
    80000d80:	fec42703          	lw	a4,-20(s0)
    80000d84:	9fb9                	addw	a5,a5,a4
    80000d86:	fef42623          	sw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/sht35.c:62

	#ifdef SHT35_DEBUG 
		printf("temperature: %08x %d \n", tmp, tmp1);
	#endif

	return temp_humi; 
    80000d8a:	fec42783          	lw	a5,-20(s0)
    80000d8e:	17c2                	slli	a5,a5,0x30
    80000d90:	93c1                	srli	a5,a5,0x30
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/sht35.c:63
}
    80000d92:	853e                	mv	a0,a5
    80000d94:	70e2                	ld	ra,56(sp)
    80000d96:	7442                	ld	s0,48(sp)
    80000d98:	6121                	addi	sp,sp,64
    80000d9a:	8082                	ret

0000000080000d9c <reset_sht35_sensor_data>:
reset_sht35_sensor_data():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/sht35.c:65

void reset_sht35_sensor_data(struct metal_i2c *i2c){
    80000d9c:	7179                	addi	sp,sp,-48
    80000d9e:	f406                	sd	ra,40(sp)
    80000da0:	f022                	sd	s0,32(sp)
    80000da2:	1800                	addi	s0,sp,48
    80000da4:	fca43c23          	sd	a0,-40(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/sht35.c:67
	uint8_t cmd[LEN2];
	cmd[0] 	= (uint8_t)(SHT35_CMD_RESET >> 8);
    80000da8:	03000793          	li	a5,48
    80000dac:	fef40423          	sb	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/sht35.c:68
	cmd[1] 	= (uint8_t)(SHT35_CMD_RESET & 0xFF); 
    80000db0:	fa200793          	li	a5,-94
    80000db4:	fef404a3          	sb	a5,-23(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/sht35.c:69
	metal_i2c_write(i2c, SHT35_I2C_ADDR, LEN2, cmd, METAL_I2C_STOP_DISABLE); 
    80000db8:	fe840793          	addi	a5,s0,-24
    80000dbc:	4701                	li	a4,0
    80000dbe:	86be                	mv	a3,a5
    80000dc0:	4609                	li	a2,2
    80000dc2:	04500593          	li	a1,69
    80000dc6:	fd843503          	ld	a0,-40(s0)
    80000dca:	076050ef          	jal	ra,80005e40 <metal_i2c_write>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/sht35.c:70
	delay_t(1000);
    80000dce:	3e800513          	li	a0,1000
    80000dd2:	e75ff0ef          	jal	ra,80000c46 <delay_t>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/software/sensor/sht35.c:71
}
    80000dd6:	0001                	nop
    80000dd8:	70a2                	ld	ra,40(sp)
    80000dda:	7402                	ld	s0,32(sp)
    80000ddc:	6145                	addi	sp,sp,48
    80000dde:	8082                	ret

0000000080000de0 <iprintf>:
printf():
    80000de0:	7159                	addi	sp,sp,-112
    80000de2:	ecbe                	sd	a5,88(sp)
    80000de4:	fc2e                	sd	a1,56(sp)
    80000de6:	e0b2                	sd	a2,64(sp)
    80000de8:	e4b6                	sd	a3,72(sp)
    80000dea:	e8ba                	sd	a4,80(sp)
    80000dec:	f0c2                	sd	a6,96(sp)
    80000dee:	f4c6                	sd	a7,104(sp)
    80000df0:	81018793          	addi	a5,gp,-2032 # 80007578 <_impure_ptr>
    80000df4:	f022                	sd	s0,32(sp)
    80000df6:	6380                	ld	s0,0(a5)
    80000df8:	ec26                	sd	s1,24(sp)
    80000dfa:	f406                	sd	ra,40(sp)
    80000dfc:	84aa                	mv	s1,a0
    80000dfe:	c411                	beqz	s0,80000e0a <iprintf+0x2a>
    80000e00:	581c                	lw	a5,48(s0)
    80000e02:	e781                	bnez	a5,80000e0a <iprintf+0x2a>
    80000e04:	8522                	mv	a0,s0
    80000e06:	542000ef          	jal	ra,80001348 <__sinit>
    80000e0a:	680c                	ld	a1,16(s0)
    80000e0c:	1834                	addi	a3,sp,56
    80000e0e:	8626                	mv	a2,s1
    80000e10:	8522                	mv	a0,s0
    80000e12:	e436                	sd	a3,8(sp)
    80000e14:	26d000ef          	jal	ra,80001880 <_vfiprintf_r>
    80000e18:	70a2                	ld	ra,40(sp)
    80000e1a:	7402                	ld	s0,32(sp)
    80000e1c:	64e2                	ld	s1,24(sp)
    80000e1e:	6165                	addi	sp,sp,112
    80000e20:	8082                	ret

0000000080000e22 <_puts_r>:
_puts_r():
    80000e22:	7179                	addi	sp,sp,-48
    80000e24:	ec26                	sd	s1,24(sp)
    80000e26:	e84a                	sd	s2,16(sp)
    80000e28:	f406                	sd	ra,40(sp)
    80000e2a:	f022                	sd	s0,32(sp)
    80000e2c:	e44e                	sd	s3,8(sp)
    80000e2e:	e052                	sd	s4,0(sp)
    80000e30:	84aa                	mv	s1,a0
    80000e32:	892e                	mv	s2,a1
    80000e34:	c509                	beqz	a0,80000e3e <_puts_r+0x1c>
    80000e36:	591c                	lw	a5,48(a0)
    80000e38:	e399                	bnez	a5,80000e3e <_puts_r+0x1c>
    80000e3a:	50e000ef          	jal	ra,80001348 <__sinit>
    80000e3e:	589c                	lw	a5,48(s1)
    80000e40:	6880                	ld	s0,16(s1)
    80000e42:	e781                	bnez	a5,80000e4a <_puts_r+0x28>
    80000e44:	8526                	mv	a0,s1
    80000e46:	502000ef          	jal	ra,80001348 <__sinit>
    80000e4a:	fffff797          	auipc	a5,0xfffff
    80000e4e:	59678793          	addi	a5,a5,1430 # 800003e0 <__sf_fake_stdin>
    80000e52:	02f41f63          	bne	s0,a5,80000e90 <_puts_r+0x6e>
    80000e56:	6480                	ld	s0,8(s1)
    80000e58:	01045783          	lhu	a5,16(s0)
    80000e5c:	8ba1                	andi	a5,a5,8
    80000e5e:	cba9                	beqz	a5,80000eb0 <_puts_r+0x8e>
    80000e60:	6c1c                	ld	a5,24(s0)
    80000e62:	c7b9                	beqz	a5,80000eb0 <_puts_r+0x8e>
    80000e64:	59fd                	li	s3,-1
    80000e66:	4a29                	li	s4,10
    80000e68:	4458                	lw	a4,12(s0)
    80000e6a:	00094583          	lbu	a1,0(s2)
    80000e6e:	fff7079b          	addiw	a5,a4,-1
    80000e72:	873e                	mv	a4,a5
    80000e74:	eda1                	bnez	a1,80000ecc <_puts_r+0xaa>
    80000e76:	c45c                	sw	a5,12(s0)
    80000e78:	0807d163          	bgez	a5,80000efa <_puts_r+0xd8>
    80000e7c:	8622                	mv	a2,s0
    80000e7e:	45a9                	li	a1,10
    80000e80:	8526                	mv	a0,s1
    80000e82:	092000ef          	jal	ra,80000f14 <__swbuf_r>
    80000e86:	57fd                	li	a5,-1
    80000e88:	02f50963          	beq	a0,a5,80000eba <_puts_r+0x98>
    80000e8c:	4529                	li	a0,10
    80000e8e:	a03d                	j	80000ebc <_puts_r+0x9a>
    80000e90:	fffff797          	auipc	a5,0xfffff
    80000e94:	58878793          	addi	a5,a5,1416 # 80000418 <__sf_fake_stdout>
    80000e98:	00f41463          	bne	s0,a5,80000ea0 <_puts_r+0x7e>
    80000e9c:	6880                	ld	s0,16(s1)
    80000e9e:	bf6d                	j	80000e58 <_puts_r+0x36>
    80000ea0:	fffff797          	auipc	a5,0xfffff
    80000ea4:	50878793          	addi	a5,a5,1288 # 800003a8 <__sf_fake_stderr>
    80000ea8:	faf418e3          	bne	s0,a5,80000e58 <_puts_r+0x36>
    80000eac:	6c80                	ld	s0,24(s1)
    80000eae:	b76d                	j	80000e58 <_puts_r+0x36>
    80000eb0:	85a2                	mv	a1,s0
    80000eb2:	8526                	mv	a0,s1
    80000eb4:	126000ef          	jal	ra,80000fda <__swsetup_r>
    80000eb8:	d555                	beqz	a0,80000e64 <_puts_r+0x42>
    80000eba:	557d                	li	a0,-1
    80000ebc:	70a2                	ld	ra,40(sp)
    80000ebe:	7402                	ld	s0,32(sp)
    80000ec0:	64e2                	ld	s1,24(sp)
    80000ec2:	6942                	ld	s2,16(sp)
    80000ec4:	69a2                	ld	s3,8(sp)
    80000ec6:	6a02                	ld	s4,0(sp)
    80000ec8:	6145                	addi	sp,sp,48
    80000eca:	8082                	ret
    80000ecc:	c458                	sw	a4,12(s0)
    80000ece:	0905                	addi	s2,s2,1
    80000ed0:	0007d763          	bgez	a5,80000ede <_puts_r+0xbc>
    80000ed4:	5418                	lw	a4,40(s0)
    80000ed6:	00e7cb63          	blt	a5,a4,80000eec <_puts_r+0xca>
    80000eda:	01458963          	beq	a1,s4,80000eec <_puts_r+0xca>
    80000ede:	601c                	ld	a5,0(s0)
    80000ee0:	00178713          	addi	a4,a5,1
    80000ee4:	e018                	sd	a4,0(s0)
    80000ee6:	00b78023          	sb	a1,0(a5)
    80000eea:	bfbd                	j	80000e68 <_puts_r+0x46>
    80000eec:	8622                	mv	a2,s0
    80000eee:	8526                	mv	a0,s1
    80000ef0:	024000ef          	jal	ra,80000f14 <__swbuf_r>
    80000ef4:	f7351ae3          	bne	a0,s3,80000e68 <_puts_r+0x46>
    80000ef8:	b7c9                	j	80000eba <_puts_r+0x98>
    80000efa:	601c                	ld	a5,0(s0)
    80000efc:	00178713          	addi	a4,a5,1
    80000f00:	e018                	sd	a4,0(s0)
    80000f02:	4729                	li	a4,10
    80000f04:	00e78023          	sb	a4,0(a5)
    80000f08:	b751                	j	80000e8c <_puts_r+0x6a>

0000000080000f0a <puts>:
puts():
    80000f0a:	81018793          	addi	a5,gp,-2032 # 80007578 <_impure_ptr>
    80000f0e:	85aa                	mv	a1,a0
    80000f10:	6388                	ld	a0,0(a5)
    80000f12:	bf01                	j	80000e22 <_puts_r>

0000000080000f14 <__swbuf_r>:
__swbuf_r():
    80000f14:	7179                	addi	sp,sp,-48
    80000f16:	f022                	sd	s0,32(sp)
    80000f18:	ec26                	sd	s1,24(sp)
    80000f1a:	e84a                	sd	s2,16(sp)
    80000f1c:	f406                	sd	ra,40(sp)
    80000f1e:	e44e                	sd	s3,8(sp)
    80000f20:	84aa                	mv	s1,a0
    80000f22:	892e                	mv	s2,a1
    80000f24:	8432                	mv	s0,a2
    80000f26:	c509                	beqz	a0,80000f30 <__swbuf_r+0x1c>
    80000f28:	591c                	lw	a5,48(a0)
    80000f2a:	e399                	bnez	a5,80000f30 <__swbuf_r+0x1c>
    80000f2c:	41c000ef          	jal	ra,80001348 <__sinit>
    80000f30:	fffff797          	auipc	a5,0xfffff
    80000f34:	4b078793          	addi	a5,a5,1200 # 800003e0 <__sf_fake_stdin>
    80000f38:	06f41a63          	bne	s0,a5,80000fac <__swbuf_r+0x98>
    80000f3c:	6480                	ld	s0,8(s1)
    80000f3e:	541c                	lw	a5,40(s0)
    80000f40:	c45c                	sw	a5,12(s0)
    80000f42:	01045783          	lhu	a5,16(s0)
    80000f46:	8ba1                	andi	a5,a5,8
    80000f48:	c3d1                	beqz	a5,80000fcc <__swbuf_r+0xb8>
    80000f4a:	6c1c                	ld	a5,24(s0)
    80000f4c:	c3c1                	beqz	a5,80000fcc <__swbuf_r+0xb8>
    80000f4e:	6c1c                	ld	a5,24(s0)
    80000f50:	6008                	ld	a0,0(s0)
    80000f52:	0ff97993          	andi	s3,s2,255
    80000f56:	894e                	mv	s2,s3
    80000f58:	9d1d                	subw	a0,a0,a5
    80000f5a:	501c                	lw	a5,32(s0)
    80000f5c:	00f54763          	blt	a0,a5,80000f6a <__swbuf_r+0x56>
    80000f60:	85a2                	mv	a1,s0
    80000f62:	8526                	mv	a0,s1
    80000f64:	2c6000ef          	jal	ra,8000122a <_fflush_r>
    80000f68:	e53d                	bnez	a0,80000fd6 <__swbuf_r+0xc2>
    80000f6a:	445c                	lw	a5,12(s0)
    80000f6c:	2505                	addiw	a0,a0,1
    80000f6e:	37fd                	addiw	a5,a5,-1
    80000f70:	c45c                	sw	a5,12(s0)
    80000f72:	601c                	ld	a5,0(s0)
    80000f74:	00178713          	addi	a4,a5,1
    80000f78:	e018                	sd	a4,0(s0)
    80000f7a:	01378023          	sb	s3,0(a5)
    80000f7e:	501c                	lw	a5,32(s0)
    80000f80:	00a78963          	beq	a5,a0,80000f92 <__swbuf_r+0x7e>
    80000f84:	01045783          	lhu	a5,16(s0)
    80000f88:	8b85                	andi	a5,a5,1
    80000f8a:	cb89                	beqz	a5,80000f9c <__swbuf_r+0x88>
    80000f8c:	47a9                	li	a5,10
    80000f8e:	00f91763          	bne	s2,a5,80000f9c <__swbuf_r+0x88>
    80000f92:	85a2                	mv	a1,s0
    80000f94:	8526                	mv	a0,s1
    80000f96:	294000ef          	jal	ra,8000122a <_fflush_r>
    80000f9a:	ed15                	bnez	a0,80000fd6 <__swbuf_r+0xc2>
    80000f9c:	70a2                	ld	ra,40(sp)
    80000f9e:	7402                	ld	s0,32(sp)
    80000fa0:	854a                	mv	a0,s2
    80000fa2:	64e2                	ld	s1,24(sp)
    80000fa4:	6942                	ld	s2,16(sp)
    80000fa6:	69a2                	ld	s3,8(sp)
    80000fa8:	6145                	addi	sp,sp,48
    80000faa:	8082                	ret
    80000fac:	fffff797          	auipc	a5,0xfffff
    80000fb0:	46c78793          	addi	a5,a5,1132 # 80000418 <__sf_fake_stdout>
    80000fb4:	00f41463          	bne	s0,a5,80000fbc <__swbuf_r+0xa8>
    80000fb8:	6880                	ld	s0,16(s1)
    80000fba:	b751                	j	80000f3e <__swbuf_r+0x2a>
    80000fbc:	fffff797          	auipc	a5,0xfffff
    80000fc0:	3ec78793          	addi	a5,a5,1004 # 800003a8 <__sf_fake_stderr>
    80000fc4:	f6f41de3          	bne	s0,a5,80000f3e <__swbuf_r+0x2a>
    80000fc8:	6c80                	ld	s0,24(s1)
    80000fca:	bf95                	j	80000f3e <__swbuf_r+0x2a>
    80000fcc:	85a2                	mv	a1,s0
    80000fce:	8526                	mv	a0,s1
    80000fd0:	00a000ef          	jal	ra,80000fda <__swsetup_r>
    80000fd4:	dd2d                	beqz	a0,80000f4e <__swbuf_r+0x3a>
    80000fd6:	597d                	li	s2,-1
    80000fd8:	b7d1                	j	80000f9c <__swbuf_r+0x88>

0000000080000fda <__swsetup_r>:
__swsetup_r():
    80000fda:	1101                	addi	sp,sp,-32
    80000fdc:	81018793          	addi	a5,gp,-2032 # 80007578 <_impure_ptr>
    80000fe0:	e426                	sd	s1,8(sp)
    80000fe2:	6384                	ld	s1,0(a5)
    80000fe4:	e822                	sd	s0,16(sp)
    80000fe6:	e04a                	sd	s2,0(sp)
    80000fe8:	ec06                	sd	ra,24(sp)
    80000fea:	892a                	mv	s2,a0
    80000fec:	842e                	mv	s0,a1
    80000fee:	c491                	beqz	s1,80000ffa <__swsetup_r+0x20>
    80000ff0:	589c                	lw	a5,48(s1)
    80000ff2:	e781                	bnez	a5,80000ffa <__swsetup_r+0x20>
    80000ff4:	8526                	mv	a0,s1
    80000ff6:	352000ef          	jal	ra,80001348 <__sinit>
    80000ffa:	fffff797          	auipc	a5,0xfffff
    80000ffe:	3e678793          	addi	a5,a5,998 # 800003e0 <__sf_fake_stdin>
    80001002:	02f41c63          	bne	s0,a5,8000103a <__swsetup_r+0x60>
    80001006:	6480                	ld	s0,8(s1)
    80001008:	01041703          	lh	a4,16(s0)
    8000100c:	03071793          	slli	a5,a4,0x30
    80001010:	93c1                	srli	a5,a5,0x30
    80001012:	0087f693          	andi	a3,a5,8
    80001016:	eebd                	bnez	a3,80001094 <__swsetup_r+0xba>
    80001018:	0107f693          	andi	a3,a5,16
    8000101c:	ee9d                	bnez	a3,8000105a <__swsetup_r+0x80>
    8000101e:	47a5                	li	a5,9
    80001020:	00f92023          	sw	a5,0(s2)
    80001024:	04076713          	ori	a4,a4,64
    80001028:	00e41823          	sh	a4,16(s0)
    8000102c:	557d                	li	a0,-1
    8000102e:	60e2                	ld	ra,24(sp)
    80001030:	6442                	ld	s0,16(sp)
    80001032:	64a2                	ld	s1,8(sp)
    80001034:	6902                	ld	s2,0(sp)
    80001036:	6105                	addi	sp,sp,32
    80001038:	8082                	ret
    8000103a:	fffff797          	auipc	a5,0xfffff
    8000103e:	3de78793          	addi	a5,a5,990 # 80000418 <__sf_fake_stdout>
    80001042:	00f41463          	bne	s0,a5,8000104a <__swsetup_r+0x70>
    80001046:	6880                	ld	s0,16(s1)
    80001048:	b7c1                	j	80001008 <__swsetup_r+0x2e>
    8000104a:	fffff797          	auipc	a5,0xfffff
    8000104e:	35e78793          	addi	a5,a5,862 # 800003a8 <__sf_fake_stderr>
    80001052:	faf41be3          	bne	s0,a5,80001008 <__swsetup_r+0x2e>
    80001056:	6c80                	ld	s0,24(s1)
    80001058:	bf45                	j	80001008 <__swsetup_r+0x2e>
    8000105a:	8b91                	andi	a5,a5,4
    8000105c:	c795                	beqz	a5,80001088 <__swsetup_r+0xae>
    8000105e:	702c                	ld	a1,96(s0)
    80001060:	c991                	beqz	a1,80001074 <__swsetup_r+0x9a>
    80001062:	07c40793          	addi	a5,s0,124
    80001066:	00f58563          	beq	a1,a5,80001070 <__swsetup_r+0x96>
    8000106a:	854a                	mv	a0,s2
    8000106c:	5fe000ef          	jal	ra,8000166a <_free_r>
    80001070:	06043023          	sd	zero,96(s0)
    80001074:	01045783          	lhu	a5,16(s0)
    80001078:	00042423          	sw	zero,8(s0)
    8000107c:	fdb7f793          	andi	a5,a5,-37
    80001080:	00f41823          	sh	a5,16(s0)
    80001084:	6c1c                	ld	a5,24(s0)
    80001086:	e01c                	sd	a5,0(s0)
    80001088:	01045783          	lhu	a5,16(s0)
    8000108c:	0087e793          	ori	a5,a5,8
    80001090:	00f41823          	sh	a5,16(s0)
    80001094:	6c1c                	ld	a5,24(s0)
    80001096:	ef89                	bnez	a5,800010b0 <__swsetup_r+0xd6>
    80001098:	01045783          	lhu	a5,16(s0)
    8000109c:	20000713          	li	a4,512
    800010a0:	2807f793          	andi	a5,a5,640
    800010a4:	00e78663          	beq	a5,a4,800010b0 <__swsetup_r+0xd6>
    800010a8:	85a2                	mv	a1,s0
    800010aa:	854a                	mv	a0,s2
    800010ac:	472000ef          	jal	ra,8000151e <__smakebuf_r>
    800010b0:	01045783          	lhu	a5,16(s0)
    800010b4:	0017f713          	andi	a4,a5,1
    800010b8:	c705                	beqz	a4,800010e0 <__swsetup_r+0x106>
    800010ba:	501c                	lw	a5,32(s0)
    800010bc:	00042623          	sw	zero,12(s0)
    800010c0:	40f007bb          	negw	a5,a5
    800010c4:	d41c                	sw	a5,40(s0)
    800010c6:	6c1c                	ld	a5,24(s0)
    800010c8:	4501                	li	a0,0
    800010ca:	f3b5                	bnez	a5,8000102e <__swsetup_r+0x54>
    800010cc:	01041783          	lh	a5,16(s0)
    800010d0:	0807f713          	andi	a4,a5,128
    800010d4:	df29                	beqz	a4,8000102e <__swsetup_r+0x54>
    800010d6:	0407e793          	ori	a5,a5,64
    800010da:	00f41823          	sh	a5,16(s0)
    800010de:	b7b9                	j	8000102c <__swsetup_r+0x52>
    800010e0:	8b89                	andi	a5,a5,2
    800010e2:	4701                	li	a4,0
    800010e4:	e391                	bnez	a5,800010e8 <__swsetup_r+0x10e>
    800010e6:	5018                	lw	a4,32(s0)
    800010e8:	c458                	sw	a4,12(s0)
    800010ea:	bff1                	j	800010c6 <__swsetup_r+0xec>

00000000800010ec <__sflush_r>:
__sflush_r():
    800010ec:	0105d783          	lhu	a5,16(a1)
    800010f0:	7179                	addi	sp,sp,-48
    800010f2:	f022                	sd	s0,32(sp)
    800010f4:	ec26                	sd	s1,24(sp)
    800010f6:	f406                	sd	ra,40(sp)
    800010f8:	e84a                	sd	s2,16(sp)
    800010fa:	e44e                	sd	s3,8(sp)
    800010fc:	0087f713          	andi	a4,a5,8
    80001100:	84aa                	mv	s1,a0
    80001102:	842e                	mv	s0,a1
    80001104:	ef79                	bnez	a4,800011e2 <__sflush_r+0xf6>
    80001106:	4598                	lw	a4,8(a1)
    80001108:	00e04d63          	bgtz	a4,80001122 <__sflush_r+0x36>
    8000110c:	5db8                	lw	a4,120(a1)
    8000110e:	00e04a63          	bgtz	a4,80001122 <__sflush_r+0x36>
    80001112:	4501                	li	a0,0
    80001114:	70a2                	ld	ra,40(sp)
    80001116:	7402                	ld	s0,32(sp)
    80001118:	64e2                	ld	s1,24(sp)
    8000111a:	6942                	ld	s2,16(sp)
    8000111c:	69a2                	ld	s3,8(sp)
    8000111e:	6145                	addi	sp,sp,48
    80001120:	8082                	ret
    80001122:	6838                	ld	a4,80(s0)
    80001124:	d77d                	beqz	a4,80001112 <__sflush_r+0x26>
    80001126:	0004a903          	lw	s2,0(s1)
    8000112a:	03379693          	slli	a3,a5,0x33
    8000112e:	0004a023          	sw	zero,0(s1)
    80001132:	0606de63          	bgez	a3,800011ae <__sflush_r+0xc2>
    80001136:	6c50                	ld	a2,152(s0)
    80001138:	01045783          	lhu	a5,16(s0)
    8000113c:	8b91                	andi	a5,a5,4
    8000113e:	c799                	beqz	a5,8000114c <__sflush_r+0x60>
    80001140:	441c                	lw	a5,8(s0)
    80001142:	8e1d                	sub	a2,a2,a5
    80001144:	703c                	ld	a5,96(s0)
    80001146:	c399                	beqz	a5,8000114c <__sflush_r+0x60>
    80001148:	5c3c                	lw	a5,120(s0)
    8000114a:	8e1d                	sub	a2,a2,a5
    8000114c:	683c                	ld	a5,80(s0)
    8000114e:	7c0c                	ld	a1,56(s0)
    80001150:	4681                	li	a3,0
    80001152:	8526                	mv	a0,s1
    80001154:	9782                	jalr	a5
    80001156:	57fd                	li	a5,-1
    80001158:	01045703          	lhu	a4,16(s0)
    8000115c:	00f51d63          	bne	a0,a5,80001176 <__sflush_r+0x8a>
    80001160:	4094                	lw	a3,0(s1)
    80001162:	47f5                	li	a5,29
    80001164:	06d7e963          	bltu	a5,a3,800011d6 <__sflush_r+0xea>
    80001168:	204007b7          	lui	a5,0x20400
    8000116c:	0785                	addi	a5,a5,1
    8000116e:	00d7d7b3          	srl	a5,a5,a3
    80001172:	8b85                	andi	a5,a5,1
    80001174:	c3ad                	beqz	a5,800011d6 <__sflush_r+0xea>
    80001176:	6c1c                	ld	a5,24(s0)
    80001178:	00042423          	sw	zero,8(s0)
    8000117c:	e01c                	sd	a5,0(s0)
    8000117e:	03371793          	slli	a5,a4,0x33
    80001182:	0007d863          	bgez	a5,80001192 <__sflush_r+0xa6>
    80001186:	57fd                	li	a5,-1
    80001188:	00f51463          	bne	a0,a5,80001190 <__sflush_r+0xa4>
    8000118c:	409c                	lw	a5,0(s1)
    8000118e:	e391                	bnez	a5,80001192 <__sflush_r+0xa6>
    80001190:	ec48                	sd	a0,152(s0)
    80001192:	702c                	ld	a1,96(s0)
    80001194:	0124a023          	sw	s2,0(s1)
    80001198:	ddad                	beqz	a1,80001112 <__sflush_r+0x26>
    8000119a:	07c40793          	addi	a5,s0,124
    8000119e:	00f58563          	beq	a1,a5,800011a8 <__sflush_r+0xbc>
    800011a2:	8526                	mv	a0,s1
    800011a4:	4c6000ef          	jal	ra,8000166a <_free_r>
    800011a8:	06043023          	sd	zero,96(s0)
    800011ac:	b79d                	j	80001112 <__sflush_r+0x26>
    800011ae:	7c0c                	ld	a1,56(s0)
    800011b0:	4601                	li	a2,0
    800011b2:	4685                	li	a3,1
    800011b4:	8526                	mv	a0,s1
    800011b6:	9702                	jalr	a4
    800011b8:	57fd                	li	a5,-1
    800011ba:	862a                	mv	a2,a0
    800011bc:	f6f51ee3          	bne	a0,a5,80001138 <__sflush_r+0x4c>
    800011c0:	409c                	lw	a5,0(s1)
    800011c2:	dbbd                	beqz	a5,80001138 <__sflush_r+0x4c>
    800011c4:	4775                	li	a4,29
    800011c6:	00e78563          	beq	a5,a4,800011d0 <__sflush_r+0xe4>
    800011ca:	4759                	li	a4,22
    800011cc:	04e79463          	bne	a5,a4,80001214 <__sflush_r+0x128>
    800011d0:	0124a023          	sw	s2,0(s1)
    800011d4:	bf3d                	j	80001112 <__sflush_r+0x26>
    800011d6:	04076713          	ori	a4,a4,64
    800011da:	00e41823          	sh	a4,16(s0)
    800011de:	557d                	li	a0,-1
    800011e0:	bf15                	j	80001114 <__sflush_r+0x28>
    800011e2:	0185b983          	ld	s3,24(a1)
    800011e6:	f20986e3          	beqz	s3,80001112 <__sflush_r+0x26>
    800011ea:	0005b903          	ld	s2,0(a1)
    800011ee:	8b8d                	andi	a5,a5,3
    800011f0:	0135b023          	sd	s3,0(a1)
    800011f4:	4139093b          	subw	s2,s2,s3
    800011f8:	4701                	li	a4,0
    800011fa:	e391                	bnez	a5,800011fe <__sflush_r+0x112>
    800011fc:	5198                	lw	a4,32(a1)
    800011fe:	c458                	sw	a4,12(s0)
    80001200:	f12059e3          	blez	s2,80001112 <__sflush_r+0x26>
    80001204:	643c                	ld	a5,72(s0)
    80001206:	7c0c                	ld	a1,56(s0)
    80001208:	86ca                	mv	a3,s2
    8000120a:	864e                	mv	a2,s3
    8000120c:	8526                	mv	a0,s1
    8000120e:	9782                	jalr	a5
    80001210:	00a04963          	bgtz	a0,80001222 <__sflush_r+0x136>
    80001214:	01045783          	lhu	a5,16(s0)
    80001218:	0407e793          	ori	a5,a5,64
    8000121c:	00f41823          	sh	a5,16(s0)
    80001220:	bf7d                	j	800011de <__sflush_r+0xf2>
    80001222:	99aa                	add	s3,s3,a0
    80001224:	40a9093b          	subw	s2,s2,a0
    80001228:	bfe1                	j	80001200 <__sflush_r+0x114>

000000008000122a <_fflush_r>:
_fflush_r():
    8000122a:	6d9c                	ld	a5,24(a1)
    8000122c:	c3a5                	beqz	a5,8000128c <_fflush_r+0x62>
    8000122e:	1101                	addi	sp,sp,-32
    80001230:	e822                	sd	s0,16(sp)
    80001232:	ec06                	sd	ra,24(sp)
    80001234:	842a                	mv	s0,a0
    80001236:	c519                	beqz	a0,80001244 <_fflush_r+0x1a>
    80001238:	591c                	lw	a5,48(a0)
    8000123a:	e789                	bnez	a5,80001244 <_fflush_r+0x1a>
    8000123c:	e42e                	sd	a1,8(sp)
    8000123e:	10a000ef          	jal	ra,80001348 <__sinit>
    80001242:	65a2                	ld	a1,8(sp)
    80001244:	fffff797          	auipc	a5,0xfffff
    80001248:	19c78793          	addi	a5,a5,412 # 800003e0 <__sf_fake_stdin>
    8000124c:	00f59b63          	bne	a1,a5,80001262 <_fflush_r+0x38>
    80001250:	640c                	ld	a1,8(s0)
    80001252:	01059783          	lh	a5,16(a1)
    80001256:	c795                	beqz	a5,80001282 <_fflush_r+0x58>
    80001258:	8522                	mv	a0,s0
    8000125a:	6442                	ld	s0,16(sp)
    8000125c:	60e2                	ld	ra,24(sp)
    8000125e:	6105                	addi	sp,sp,32
    80001260:	b571                	j	800010ec <__sflush_r>
    80001262:	fffff797          	auipc	a5,0xfffff
    80001266:	1b678793          	addi	a5,a5,438 # 80000418 <__sf_fake_stdout>
    8000126a:	00f59463          	bne	a1,a5,80001272 <_fflush_r+0x48>
    8000126e:	680c                	ld	a1,16(s0)
    80001270:	b7cd                	j	80001252 <_fflush_r+0x28>
    80001272:	fffff797          	auipc	a5,0xfffff
    80001276:	13678793          	addi	a5,a5,310 # 800003a8 <__sf_fake_stderr>
    8000127a:	fcf59ce3          	bne	a1,a5,80001252 <_fflush_r+0x28>
    8000127e:	6c0c                	ld	a1,24(s0)
    80001280:	bfc9                	j	80001252 <_fflush_r+0x28>
    80001282:	60e2                	ld	ra,24(sp)
    80001284:	6442                	ld	s0,16(sp)
    80001286:	4501                	li	a0,0
    80001288:	6105                	addi	sp,sp,32
    8000128a:	8082                	ret
    8000128c:	4501                	li	a0,0
    8000128e:	8082                	ret

0000000080001290 <std>:
std():
    80001290:	1141                	addi	sp,sp,-16
    80001292:	e022                	sd	s0,0(sp)
    80001294:	e406                	sd	ra,8(sp)
    80001296:	842a                	mv	s0,a0
    80001298:	00b51823          	sh	a1,16(a0)
    8000129c:	00c51923          	sh	a2,18(a0)
    800012a0:	00053023          	sd	zero,0(a0)
    800012a4:	00053423          	sd	zero,8(a0)
    800012a8:	0a052623          	sw	zero,172(a0)
    800012ac:	00053c23          	sd	zero,24(a0)
    800012b0:	02052023          	sw	zero,32(a0)
    800012b4:	02052423          	sw	zero,40(a0)
    800012b8:	4621                	li	a2,8
    800012ba:	4581                	li	a1,0
    800012bc:	0a450513          	addi	a0,a0,164
    800012c0:	300000ef          	jal	ra,800015c0 <memset>
    800012c4:	00001797          	auipc	a5,0x1
    800012c8:	89a78793          	addi	a5,a5,-1894 # 80001b5e <__sread>
    800012cc:	e03c                	sd	a5,64(s0)
    800012ce:	00001797          	auipc	a5,0x1
    800012d2:	8c278793          	addi	a5,a5,-1854 # 80001b90 <__swrite>
    800012d6:	e43c                	sd	a5,72(s0)
    800012d8:	00001797          	auipc	a5,0x1
    800012dc:	90878793          	addi	a5,a5,-1784 # 80001be0 <__sseek>
    800012e0:	e83c                	sd	a5,80(s0)
    800012e2:	00001797          	auipc	a5,0x1
    800012e6:	93678793          	addi	a5,a5,-1738 # 80001c18 <__sclose>
    800012ea:	fc00                	sd	s0,56(s0)
    800012ec:	ec3c                	sd	a5,88(s0)
    800012ee:	60a2                	ld	ra,8(sp)
    800012f0:	6402                	ld	s0,0(sp)
    800012f2:	0141                	addi	sp,sp,16
    800012f4:	8082                	ret

00000000800012f6 <_cleanup_r>:
_cleanup_r():
    800012f6:	00000597          	auipc	a1,0x0
    800012fa:	f3458593          	addi	a1,a1,-204 # 8000122a <_fflush_r>
    800012fe:	aaa1                	j	80001456 <_fwalk_reent>

0000000080001300 <__sfmoreglue>:
__sfmoreglue():
    80001300:	1101                	addi	sp,sp,-32
    80001302:	e426                	sd	s1,8(sp)
    80001304:	0b000613          	li	a2,176
    80001308:	fff5849b          	addiw	s1,a1,-1
    8000130c:	02c484b3          	mul	s1,s1,a2
    80001310:	e04a                	sd	s2,0(sp)
    80001312:	892e                	mv	s2,a1
    80001314:	e822                	sd	s0,16(sp)
    80001316:	ec06                	sd	ra,24(sp)
    80001318:	0c848593          	addi	a1,s1,200
    8000131c:	3fc000ef          	jal	ra,80001718 <_malloc_r>
    80001320:	842a                	mv	s0,a0
    80001322:	cd01                	beqz	a0,8000133a <__sfmoreglue+0x3a>
    80001324:	00053023          	sd	zero,0(a0)
    80001328:	01252423          	sw	s2,8(a0)
    8000132c:	0561                	addi	a0,a0,24
    8000132e:	e808                	sd	a0,16(s0)
    80001330:	0b048613          	addi	a2,s1,176
    80001334:	4581                	li	a1,0
    80001336:	28a000ef          	jal	ra,800015c0 <memset>
    8000133a:	8522                	mv	a0,s0
    8000133c:	60e2                	ld	ra,24(sp)
    8000133e:	6442                	ld	s0,16(sp)
    80001340:	64a2                	ld	s1,8(sp)
    80001342:	6902                	ld	s2,0(sp)
    80001344:	6105                	addi	sp,sp,32
    80001346:	8082                	ret

0000000080001348 <__sinit>:
__sinit():
    80001348:	591c                	lw	a5,48(a0)
    8000134a:	e7bd                	bnez	a5,800013b8 <__sinit+0x70>
    8000134c:	1141                	addi	sp,sp,-16
    8000134e:	e406                	sd	ra,8(sp)
    80001350:	e022                	sd	s0,0(sp)
    80001352:	00000797          	auipc	a5,0x0
    80001356:	fa478793          	addi	a5,a5,-92 # 800012f6 <_cleanup_r>
    8000135a:	e53c                	sd	a5,72(a0)
    8000135c:	81818793          	addi	a5,gp,-2024 # 80007580 <_global_impure_ptr>
    80001360:	639c                	ld	a5,0(a5)
    80001362:	08053023          	sd	zero,128(a0)
    80001366:	08052423          	sw	zero,136(a0)
    8000136a:	08053823          	sd	zero,144(a0)
    8000136e:	00f51463          	bne	a0,a5,80001376 <__sinit+0x2e>
    80001372:	4785                	li	a5,1
    80001374:	d91c                	sw	a5,48(a0)
    80001376:	842a                	mv	s0,a0
    80001378:	042000ef          	jal	ra,800013ba <__sfp>
    8000137c:	e408                	sd	a0,8(s0)
    8000137e:	8522                	mv	a0,s0
    80001380:	03a000ef          	jal	ra,800013ba <__sfp>
    80001384:	e808                	sd	a0,16(s0)
    80001386:	8522                	mv	a0,s0
    80001388:	032000ef          	jal	ra,800013ba <__sfp>
    8000138c:	ec08                	sd	a0,24(s0)
    8000138e:	6408                	ld	a0,8(s0)
    80001390:	4601                	li	a2,0
    80001392:	4591                	li	a1,4
    80001394:	efdff0ef          	jal	ra,80001290 <std>
    80001398:	6808                	ld	a0,16(s0)
    8000139a:	4605                	li	a2,1
    8000139c:	45a5                	li	a1,9
    8000139e:	ef3ff0ef          	jal	ra,80001290 <std>
    800013a2:	6c08                	ld	a0,24(s0)
    800013a4:	4609                	li	a2,2
    800013a6:	45c9                	li	a1,18
    800013a8:	ee9ff0ef          	jal	ra,80001290 <std>
    800013ac:	4785                	li	a5,1
    800013ae:	d81c                	sw	a5,48(s0)
    800013b0:	60a2                	ld	ra,8(sp)
    800013b2:	6402                	ld	s0,0(sp)
    800013b4:	0141                	addi	sp,sp,16
    800013b6:	8082                	ret
    800013b8:	8082                	ret

00000000800013ba <__sfp>:
__sfp():
    800013ba:	1101                	addi	sp,sp,-32
    800013bc:	81818793          	addi	a5,gp,-2024 # 80007580 <_global_impure_ptr>
    800013c0:	e426                	sd	s1,8(sp)
    800013c2:	6384                	ld	s1,0(a5)
    800013c4:	e04a                	sd	s2,0(sp)
    800013c6:	ec06                	sd	ra,24(sp)
    800013c8:	589c                	lw	a5,48(s1)
    800013ca:	e822                	sd	s0,16(sp)
    800013cc:	892a                	mv	s2,a0
    800013ce:	e781                	bnez	a5,800013d6 <__sfp+0x1c>
    800013d0:	8526                	mv	a0,s1
    800013d2:	f77ff0ef          	jal	ra,80001348 <__sinit>
    800013d6:	08048493          	addi	s1,s1,128
    800013da:	6880                	ld	s0,16(s1)
    800013dc:	449c                	lw	a5,8(s1)
    800013de:	37fd                	addiw	a5,a5,-1
    800013e0:	0007d663          	bgez	a5,800013ec <__sfp+0x32>
    800013e4:	609c                	ld	a5,0(s1)
    800013e6:	cfa9                	beqz	a5,80001440 <__sfp+0x86>
    800013e8:	6084                	ld	s1,0(s1)
    800013ea:	bfc5                	j	800013da <__sfp+0x20>
    800013ec:	01041703          	lh	a4,16(s0)
    800013f0:	e729                	bnez	a4,8000143a <__sfp+0x80>
    800013f2:	77c1                	lui	a5,0xffff0
    800013f4:	0785                	addi	a5,a5,1
    800013f6:	0a042623          	sw	zero,172(s0)
    800013fa:	00043023          	sd	zero,0(s0)
    800013fe:	00043423          	sd	zero,8(s0)
    80001402:	c81c                	sw	a5,16(s0)
    80001404:	00043c23          	sd	zero,24(s0)
    80001408:	02042023          	sw	zero,32(s0)
    8000140c:	02042423          	sw	zero,40(s0)
    80001410:	4621                	li	a2,8
    80001412:	4581                	li	a1,0
    80001414:	0a440513          	addi	a0,s0,164
    80001418:	1a8000ef          	jal	ra,800015c0 <memset>
    8000141c:	06043023          	sd	zero,96(s0)
    80001420:	06042423          	sw	zero,104(s0)
    80001424:	08043023          	sd	zero,128(s0)
    80001428:	08042423          	sw	zero,136(s0)
    8000142c:	8522                	mv	a0,s0
    8000142e:	60e2                	ld	ra,24(sp)
    80001430:	6442                	ld	s0,16(sp)
    80001432:	64a2                	ld	s1,8(sp)
    80001434:	6902                	ld	s2,0(sp)
    80001436:	6105                	addi	sp,sp,32
    80001438:	8082                	ret
    8000143a:	0b040413          	addi	s0,s0,176
    8000143e:	b745                	j	800013de <__sfp+0x24>
    80001440:	4591                	li	a1,4
    80001442:	854a                	mv	a0,s2
    80001444:	ebdff0ef          	jal	ra,80001300 <__sfmoreglue>
    80001448:	e088                	sd	a0,0(s1)
    8000144a:	842a                	mv	s0,a0
    8000144c:	fd51                	bnez	a0,800013e8 <__sfp+0x2e>
    8000144e:	47b1                	li	a5,12
    80001450:	00f92023          	sw	a5,0(s2)
    80001454:	bfe1                	j	8000142c <__sfp+0x72>

0000000080001456 <_fwalk_reent>:
_fwalk_reent():
    80001456:	715d                	addi	sp,sp,-80
    80001458:	e0a2                	sd	s0,64(sp)
    8000145a:	fc26                	sd	s1,56(sp)
    8000145c:	f052                	sd	s4,32(sp)
    8000145e:	ec56                	sd	s5,24(sp)
    80001460:	e85a                	sd	s6,16(sp)
    80001462:	e45e                	sd	s7,8(sp)
    80001464:	e486                	sd	ra,72(sp)
    80001466:	f84a                	sd	s2,48(sp)
    80001468:	f44e                	sd	s3,40(sp)
    8000146a:	8a2a                	mv	s4,a0
    8000146c:	8aae                	mv	s5,a1
    8000146e:	08050493          	addi	s1,a0,128
    80001472:	4401                	li	s0,0
    80001474:	4b05                	li	s6,1
    80001476:	5bfd                	li	s7,-1
    80001478:	ec89                	bnez	s1,80001492 <_fwalk_reent+0x3c>
    8000147a:	8522                	mv	a0,s0
    8000147c:	60a6                	ld	ra,72(sp)
    8000147e:	6406                	ld	s0,64(sp)
    80001480:	74e2                	ld	s1,56(sp)
    80001482:	7942                	ld	s2,48(sp)
    80001484:	79a2                	ld	s3,40(sp)
    80001486:	7a02                	ld	s4,32(sp)
    80001488:	6ae2                	ld	s5,24(sp)
    8000148a:	6b42                	ld	s6,16(sp)
    8000148c:	6ba2                	ld	s7,8(sp)
    8000148e:	6161                	addi	sp,sp,80
    80001490:	8082                	ret
    80001492:	0104b903          	ld	s2,16(s1)
    80001496:	0084a983          	lw	s3,8(s1)
    8000149a:	39fd                	addiw	s3,s3,-1
    8000149c:	0009d463          	bgez	s3,800014a4 <_fwalk_reent+0x4e>
    800014a0:	6084                	ld	s1,0(s1)
    800014a2:	bfd9                	j	80001478 <_fwalk_reent+0x22>
    800014a4:	01095783          	lhu	a5,16(s2)
    800014a8:	00fb7b63          	bgeu	s6,a5,800014be <_fwalk_reent+0x68>
    800014ac:	01291783          	lh	a5,18(s2)
    800014b0:	01778763          	beq	a5,s7,800014be <_fwalk_reent+0x68>
    800014b4:	85ca                	mv	a1,s2
    800014b6:	8552                	mv	a0,s4
    800014b8:	9a82                	jalr	s5
    800014ba:	8c49                	or	s0,s0,a0
    800014bc:	2401                	sext.w	s0,s0
    800014be:	0b090913          	addi	s2,s2,176
    800014c2:	bfe1                	j	8000149a <_fwalk_reent+0x44>

00000000800014c4 <__swhatbuf_r>:
__swhatbuf_r():
    800014c4:	7135                	addi	sp,sp,-160
    800014c6:	e526                	sd	s1,136(sp)
    800014c8:	84ae                	mv	s1,a1
    800014ca:	01259583          	lh	a1,18(a1)
    800014ce:	e922                	sd	s0,144(sp)
    800014d0:	ed06                	sd	ra,152(sp)
    800014d2:	8432                	mv	s0,a2
    800014d4:	0005dc63          	bgez	a1,800014ec <__swhatbuf_r+0x28>
    800014d8:	0104d783          	lhu	a5,16(s1)
    800014dc:	0006a023          	sw	zero,0(a3)
    800014e0:	0807f793          	andi	a5,a5,128
    800014e4:	e785                	bnez	a5,8000150c <__swhatbuf_r+0x48>
    800014e6:	40000793          	li	a5,1024
    800014ea:	a01d                	j	80001510 <__swhatbuf_r+0x4c>
    800014ec:	0830                	addi	a2,sp,24
    800014ee:	e436                	sd	a3,8(sp)
    800014f0:	786000ef          	jal	ra,80001c76 <_fstat_r>
    800014f4:	66a2                	ld	a3,8(sp)
    800014f6:	fe0541e3          	bltz	a0,800014d8 <__swhatbuf_r+0x14>
    800014fa:	47f2                	lw	a5,28(sp)
    800014fc:	673d                	lui	a4,0xf
    800014fe:	8ff9                	and	a5,a5,a4
    80001500:	6709                	lui	a4,0x2
    80001502:	8f99                	sub	a5,a5,a4
    80001504:	0017b793          	seqz	a5,a5
    80001508:	c29c                	sw	a5,0(a3)
    8000150a:	bff1                	j	800014e6 <__swhatbuf_r+0x22>
    8000150c:	04000793          	li	a5,64
    80001510:	e01c                	sd	a5,0(s0)
    80001512:	60ea                	ld	ra,152(sp)
    80001514:	644a                	ld	s0,144(sp)
    80001516:	64aa                	ld	s1,136(sp)
    80001518:	4501                	li	a0,0
    8000151a:	610d                	addi	sp,sp,160
    8000151c:	8082                	ret

000000008000151e <__smakebuf_r>:
__smakebuf_r():
    8000151e:	0105d783          	lhu	a5,16(a1)
    80001522:	7179                	addi	sp,sp,-48
    80001524:	f022                	sd	s0,32(sp)
    80001526:	f406                	sd	ra,40(sp)
    80001528:	ec26                	sd	s1,24(sp)
    8000152a:	e84a                	sd	s2,16(sp)
    8000152c:	8b89                	andi	a5,a5,2
    8000152e:	842e                	mv	s0,a1
    80001530:	cf89                	beqz	a5,8000154a <__smakebuf_r+0x2c>
    80001532:	07f40793          	addi	a5,s0,127
    80001536:	e01c                	sd	a5,0(s0)
    80001538:	ec1c                	sd	a5,24(s0)
    8000153a:	4785                	li	a5,1
    8000153c:	d01c                	sw	a5,32(s0)
    8000153e:	70a2                	ld	ra,40(sp)
    80001540:	7402                	ld	s0,32(sp)
    80001542:	64e2                	ld	s1,24(sp)
    80001544:	6942                	ld	s2,16(sp)
    80001546:	6145                	addi	sp,sp,48
    80001548:	8082                	ret
    8000154a:	0054                	addi	a3,sp,4
    8000154c:	0030                	addi	a2,sp,8
    8000154e:	84aa                	mv	s1,a0
    80001550:	f75ff0ef          	jal	ra,800014c4 <__swhatbuf_r>
    80001554:	65a2                	ld	a1,8(sp)
    80001556:	892a                	mv	s2,a0
    80001558:	8526                	mv	a0,s1
    8000155a:	1be000ef          	jal	ra,80001718 <_malloc_r>
    8000155e:	ed01                	bnez	a0,80001576 <__smakebuf_r+0x58>
    80001560:	01041783          	lh	a5,16(s0)
    80001564:	2007f713          	andi	a4,a5,512
    80001568:	fb79                	bnez	a4,8000153e <__smakebuf_r+0x20>
    8000156a:	9bf1                	andi	a5,a5,-4
    8000156c:	0027e793          	ori	a5,a5,2
    80001570:	00f41823          	sh	a5,16(s0)
    80001574:	bf7d                	j	80001532 <__smakebuf_r+0x14>
    80001576:	00000797          	auipc	a5,0x0
    8000157a:	d8078793          	addi	a5,a5,-640 # 800012f6 <_cleanup_r>
    8000157e:	e4bc                	sd	a5,72(s1)
    80001580:	01045783          	lhu	a5,16(s0)
    80001584:	e008                	sd	a0,0(s0)
    80001586:	ec08                	sd	a0,24(s0)
    80001588:	0807e793          	ori	a5,a5,128
    8000158c:	00f41823          	sh	a5,16(s0)
    80001590:	67a2                	ld	a5,8(sp)
    80001592:	d01c                	sw	a5,32(s0)
    80001594:	4792                	lw	a5,4(sp)
    80001596:	cf91                	beqz	a5,800015b2 <__smakebuf_r+0x94>
    80001598:	01241583          	lh	a1,18(s0)
    8000159c:	8526                	mv	a0,s1
    8000159e:	704000ef          	jal	ra,80001ca2 <_isatty_r>
    800015a2:	c901                	beqz	a0,800015b2 <__smakebuf_r+0x94>
    800015a4:	01045783          	lhu	a5,16(s0)
    800015a8:	9bf1                	andi	a5,a5,-4
    800015aa:	0017e793          	ori	a5,a5,1
    800015ae:	00f41823          	sh	a5,16(s0)
    800015b2:	01045783          	lhu	a5,16(s0)
    800015b6:	00f96933          	or	s2,s2,a5
    800015ba:	01241823          	sh	s2,16(s0)
    800015be:	b741                	j	8000153e <__smakebuf_r+0x20>

00000000800015c0 <memset>:
memset():
    800015c0:	433d                	li	t1,15
    800015c2:	872a                	mv	a4,a0
    800015c4:	02c37163          	bgeu	t1,a2,800015e6 <memset+0x26>
    800015c8:	00f77793          	andi	a5,a4,15
    800015cc:	e3c1                	bnez	a5,8000164c <memset+0x8c>
    800015ce:	e1bd                	bnez	a1,80001634 <memset+0x74>
    800015d0:	ff067693          	andi	a3,a2,-16
    800015d4:	8a3d                	andi	a2,a2,15
    800015d6:	96ba                	add	a3,a3,a4
    800015d8:	e30c                	sd	a1,0(a4)
    800015da:	e70c                	sd	a1,8(a4)
    800015dc:	0741                	addi	a4,a4,16
    800015de:	fed76de3          	bltu	a4,a3,800015d8 <memset+0x18>
    800015e2:	e211                	bnez	a2,800015e6 <memset+0x26>
    800015e4:	8082                	ret
    800015e6:	40c306b3          	sub	a3,t1,a2
    800015ea:	068a                	slli	a3,a3,0x2
    800015ec:	00000297          	auipc	t0,0x0
    800015f0:	9696                	add	a3,a3,t0
    800015f2:	00a68067          	jr	10(a3)
    800015f6:	00b70723          	sb	a1,14(a4) # 200e <__heap_size+0x180e>
    800015fa:	00b706a3          	sb	a1,13(a4)
    800015fe:	00b70623          	sb	a1,12(a4)
    80001602:	00b705a3          	sb	a1,11(a4)
    80001606:	00b70523          	sb	a1,10(a4)
    8000160a:	00b704a3          	sb	a1,9(a4)
    8000160e:	00b70423          	sb	a1,8(a4)
    80001612:	00b703a3          	sb	a1,7(a4)
    80001616:	00b70323          	sb	a1,6(a4)
    8000161a:	00b702a3          	sb	a1,5(a4)
    8000161e:	00b70223          	sb	a1,4(a4)
    80001622:	00b701a3          	sb	a1,3(a4)
    80001626:	00b70123          	sb	a1,2(a4)
    8000162a:	00b700a3          	sb	a1,1(a4)
    8000162e:	00b70023          	sb	a1,0(a4)
    80001632:	8082                	ret
    80001634:	0ff5f593          	andi	a1,a1,255
    80001638:	00859693          	slli	a3,a1,0x8
    8000163c:	8dd5                	or	a1,a1,a3
    8000163e:	01059693          	slli	a3,a1,0x10
    80001642:	8dd5                	or	a1,a1,a3
    80001644:	02059693          	slli	a3,a1,0x20
    80001648:	8dd5                	or	a1,a1,a3
    8000164a:	b759                	j	800015d0 <memset+0x10>
    8000164c:	00279693          	slli	a3,a5,0x2
    80001650:	00000297          	auipc	t0,0x0
    80001654:	9696                	add	a3,a3,t0
    80001656:	8286                	mv	t0,ra
    80001658:	fa2680e7          	jalr	-94(a3)
    8000165c:	8096                	mv	ra,t0
    8000165e:	17c1                	addi	a5,a5,-16
    80001660:	8f1d                	sub	a4,a4,a5
    80001662:	963e                	add	a2,a2,a5
    80001664:	f8c371e3          	bgeu	t1,a2,800015e6 <memset+0x26>
    80001668:	b79d                	j	800015ce <memset+0xe>

000000008000166a <_free_r>:
_free_r():
    8000166a:	c5d5                	beqz	a1,80001716 <_free_r+0xac>
    8000166c:	ff85b783          	ld	a5,-8(a1)
    80001670:	1101                	addi	sp,sp,-32
    80001672:	e822                	sd	s0,16(sp)
    80001674:	ec06                	sd	ra,24(sp)
    80001676:	e426                	sd	s1,8(sp)
    80001678:	ff858413          	addi	s0,a1,-8
    8000167c:	0007d363          	bgez	a5,80001682 <_free_r+0x18>
    80001680:	943e                	add	s0,s0,a5
    80001682:	84aa                	mv	s1,a0
    80001684:	690000ef          	jal	ra,80001d14 <__malloc_lock>
    80001688:	00006797          	auipc	a5,0x6
    8000168c:	f0878793          	addi	a5,a5,-248 # 80007590 <__tls_base>
    80001690:	639c                	ld	a5,0(a5)
    80001692:	ef89                	bnez	a5,800016ac <_free_r+0x42>
    80001694:	00043423          	sd	zero,8(s0)
    80001698:	00006797          	auipc	a5,0x6
    8000169c:	ee87bc23          	sd	s0,-264(a5) # 80007590 <__tls_base>
    800016a0:	6442                	ld	s0,16(sp)
    800016a2:	60e2                	ld	ra,24(sp)
    800016a4:	8526                	mv	a0,s1
    800016a6:	64a2                	ld	s1,8(sp)
    800016a8:	6105                	addi	sp,sp,32
    800016aa:	a5b5                	j	80001d16 <__malloc_unlock>
    800016ac:	00f47e63          	bgeu	s0,a5,800016c8 <_free_r+0x5e>
    800016b0:	6014                	ld	a3,0(s0)
    800016b2:	00d40733          	add	a4,s0,a3
    800016b6:	00e79663          	bne	a5,a4,800016c2 <_free_r+0x58>
    800016ba:	6398                	ld	a4,0(a5)
    800016bc:	679c                	ld	a5,8(a5)
    800016be:	9736                	add	a4,a4,a3
    800016c0:	e018                	sd	a4,0(s0)
    800016c2:	e41c                	sd	a5,8(s0)
    800016c4:	bfd1                	j	80001698 <_free_r+0x2e>
    800016c6:	87ba                	mv	a5,a4
    800016c8:	6798                	ld	a4,8(a5)
    800016ca:	c319                	beqz	a4,800016d0 <_free_r+0x66>
    800016cc:	fee47de3          	bgeu	s0,a4,800016c6 <_free_r+0x5c>
    800016d0:	6394                	ld	a3,0(a5)
    800016d2:	00d78633          	add	a2,a5,a3
    800016d6:	00861f63          	bne	a2,s0,800016f4 <_free_r+0x8a>
    800016da:	6010                	ld	a2,0(s0)
    800016dc:	96b2                	add	a3,a3,a2
    800016de:	e394                	sd	a3,0(a5)
    800016e0:	00d78633          	add	a2,a5,a3
    800016e4:	fac71ee3          	bne	a4,a2,800016a0 <_free_r+0x36>
    800016e8:	6310                	ld	a2,0(a4)
    800016ea:	6718                	ld	a4,8(a4)
    800016ec:	96b2                	add	a3,a3,a2
    800016ee:	e394                	sd	a3,0(a5)
    800016f0:	e798                	sd	a4,8(a5)
    800016f2:	b77d                	j	800016a0 <_free_r+0x36>
    800016f4:	00c47563          	bgeu	s0,a2,800016fe <_free_r+0x94>
    800016f8:	47b1                	li	a5,12
    800016fa:	c09c                	sw	a5,0(s1)
    800016fc:	b755                	j	800016a0 <_free_r+0x36>
    800016fe:	6010                	ld	a2,0(s0)
    80001700:	00c406b3          	add	a3,s0,a2
    80001704:	00d71663          	bne	a4,a3,80001710 <_free_r+0xa6>
    80001708:	6314                	ld	a3,0(a4)
    8000170a:	6718                	ld	a4,8(a4)
    8000170c:	96b2                	add	a3,a3,a2
    8000170e:	e014                	sd	a3,0(s0)
    80001710:	e418                	sd	a4,8(s0)
    80001712:	e780                	sd	s0,8(a5)
    80001714:	b771                	j	800016a0 <_free_r+0x36>
    80001716:	8082                	ret

0000000080001718 <_malloc_r>:
_malloc_r():
    80001718:	00758793          	addi	a5,a1,7
    8000171c:	7179                	addi	sp,sp,-48
    8000171e:	9be1                	andi	a5,a5,-8
    80001720:	e84a                	sd	s2,16(sp)
    80001722:	f406                	sd	ra,40(sp)
    80001724:	f022                	sd	s0,32(sp)
    80001726:	ec26                	sd	s1,24(sp)
    80001728:	e44e                	sd	s3,8(sp)
    8000172a:	07a1                	addi	a5,a5,8
    8000172c:	4741                	li	a4,16
    8000172e:	4941                	li	s2,16
    80001730:	00e7e363          	bltu	a5,a4,80001736 <_malloc_r+0x1e>
    80001734:	893e                	mv	s2,a5
    80001736:	80000737          	lui	a4,0x80000
    8000173a:	fff74713          	not	a4,a4
    8000173e:	00f76463          	bltu	a4,a5,80001746 <_malloc_r+0x2e>
    80001742:	00b97c63          	bgeu	s2,a1,8000175a <_malloc_r+0x42>
    80001746:	47b1                	li	a5,12
    80001748:	c11c                	sw	a5,0(a0)
    8000174a:	4501                	li	a0,0
    8000174c:	70a2                	ld	ra,40(sp)
    8000174e:	7402                	ld	s0,32(sp)
    80001750:	64e2                	ld	s1,24(sp)
    80001752:	6942                	ld	s2,16(sp)
    80001754:	69a2                	ld	s3,8(sp)
    80001756:	6145                	addi	sp,sp,48
    80001758:	8082                	ret
    8000175a:	84aa                	mv	s1,a0
    8000175c:	5b8000ef          	jal	ra,80001d14 <__malloc_lock>
    80001760:	00006797          	auipc	a5,0x6
    80001764:	e3078793          	addi	a5,a5,-464 # 80007590 <__tls_base>
    80001768:	6398                	ld	a4,0(a5)
    8000176a:	843a                	mv	s0,a4
    8000176c:	ec05                	bnez	s0,800017a4 <_malloc_r+0x8c>
    8000176e:	00006797          	auipc	a5,0x6
    80001772:	e2a78793          	addi	a5,a5,-470 # 80007598 <__malloc_sbrk_start>
    80001776:	639c                	ld	a5,0(a5)
    80001778:	eb89                	bnez	a5,8000178a <_malloc_r+0x72>
    8000177a:	4581                	li	a1,0
    8000177c:	8526                	mv	a0,s1
    8000177e:	3b6000ef          	jal	ra,80001b34 <_sbrk_r>
    80001782:	00006797          	auipc	a5,0x6
    80001786:	e0a7bb23          	sd	a0,-490(a5) # 80007598 <__malloc_sbrk_start>
    8000178a:	85ca                	mv	a1,s2
    8000178c:	8526                	mv	a0,s1
    8000178e:	3a6000ef          	jal	ra,80001b34 <_sbrk_r>
    80001792:	59fd                	li	s3,-1
    80001794:	07351163          	bne	a0,s3,800017f6 <_malloc_r+0xde>
    80001798:	47b1                	li	a5,12
    8000179a:	c09c                	sw	a5,0(s1)
    8000179c:	8526                	mv	a0,s1
    8000179e:	578000ef          	jal	ra,80001d16 <__malloc_unlock>
    800017a2:	b765                	j	8000174a <_malloc_r+0x32>
    800017a4:	601c                	ld	a5,0(s0)
    800017a6:	412787bb          	subw	a5,a5,s2
    800017aa:	0407c363          	bltz	a5,800017f0 <_malloc_r+0xd8>
    800017ae:	46bd                	li	a3,15
    800017b0:	00f6d763          	bge	a3,a5,800017be <_malloc_r+0xa6>
    800017b4:	e01c                	sd	a5,0(s0)
    800017b6:	943e                	add	s0,s0,a5
    800017b8:	01243023          	sd	s2,0(s0)
    800017bc:	a801                	j	800017cc <_malloc_r+0xb4>
    800017be:	641c                	ld	a5,8(s0)
    800017c0:	02871663          	bne	a4,s0,800017ec <_malloc_r+0xd4>
    800017c4:	00006717          	auipc	a4,0x6
    800017c8:	dcf73623          	sd	a5,-564(a4) # 80007590 <__tls_base>
    800017cc:	8526                	mv	a0,s1
    800017ce:	548000ef          	jal	ra,80001d16 <__malloc_unlock>
    800017d2:	00f40513          	addi	a0,s0,15
    800017d6:	00840793          	addi	a5,s0,8
    800017da:	9961                	andi	a0,a0,-8
    800017dc:	40f507bb          	subw	a5,a0,a5
    800017e0:	d7b5                	beqz	a5,8000174c <_malloc_r+0x34>
    800017e2:	943e                	add	s0,s0,a5
    800017e4:	40f007bb          	negw	a5,a5
    800017e8:	e01c                	sd	a5,0(s0)
    800017ea:	b78d                	j	8000174c <_malloc_r+0x34>
    800017ec:	e71c                	sd	a5,8(a4)
    800017ee:	bff9                	j	800017cc <_malloc_r+0xb4>
    800017f0:	8722                	mv	a4,s0
    800017f2:	6400                	ld	s0,8(s0)
    800017f4:	bfa5                	j	8000176c <_malloc_r+0x54>
    800017f6:	00750413          	addi	s0,a0,7
    800017fa:	9861                	andi	s0,s0,-8
    800017fc:	fa850ee3          	beq	a0,s0,800017b8 <_malloc_r+0xa0>
    80001800:	40a405b3          	sub	a1,s0,a0
    80001804:	8526                	mv	a0,s1
    80001806:	32e000ef          	jal	ra,80001b34 <_sbrk_r>
    8000180a:	fb3517e3          	bne	a0,s3,800017b8 <_malloc_r+0xa0>
    8000180e:	b769                	j	80001798 <_malloc_r+0x80>

0000000080001810 <__sfputc_r>:
__sfputc_r():
    80001810:	465c                	lw	a5,12(a2)
    80001812:	fff7871b          	addiw	a4,a5,-1
    80001816:	c658                	sw	a4,12(a2)
    80001818:	00075a63          	bgez	a4,8000182c <__sfputc_r+0x1c>
    8000181c:	561c                	lw	a5,40(a2)
    8000181e:	00f74563          	blt	a4,a5,80001828 <__sfputc_r+0x18>
    80001822:	47a9                	li	a5,10
    80001824:	00f59463          	bne	a1,a5,8000182c <__sfputc_r+0x1c>
    80001828:	eecff06f          	j	80000f14 <__swbuf_r>
    8000182c:	621c                	ld	a5,0(a2)
    8000182e:	852e                	mv	a0,a1
    80001830:	00178713          	addi	a4,a5,1
    80001834:	e218                	sd	a4,0(a2)
    80001836:	00b78023          	sb	a1,0(a5)
    8000183a:	8082                	ret

000000008000183c <__sfputs_r>:
__sfputs_r():
    8000183c:	7179                	addi	sp,sp,-48
    8000183e:	f022                	sd	s0,32(sp)
    80001840:	ec26                	sd	s1,24(sp)
    80001842:	e84a                	sd	s2,16(sp)
    80001844:	e44e                	sd	s3,8(sp)
    80001846:	e052                	sd	s4,0(sp)
    80001848:	f406                	sd	ra,40(sp)
    8000184a:	892a                	mv	s2,a0
    8000184c:	89ae                	mv	s3,a1
    8000184e:	8432                	mv	s0,a2
    80001850:	00d604b3          	add	s1,a2,a3
    80001854:	5a7d                	li	s4,-1
    80001856:	00941463          	bne	s0,s1,8000185e <__sfputs_r+0x22>
    8000185a:	4501                	li	a0,0
    8000185c:	a811                	j	80001870 <__sfputs_r+0x34>
    8000185e:	00044583          	lbu	a1,0(s0)
    80001862:	864e                	mv	a2,s3
    80001864:	854a                	mv	a0,s2
    80001866:	fabff0ef          	jal	ra,80001810 <__sfputc_r>
    8000186a:	0405                	addi	s0,s0,1
    8000186c:	ff4515e3          	bne	a0,s4,80001856 <__sfputs_r+0x1a>
    80001870:	70a2                	ld	ra,40(sp)
    80001872:	7402                	ld	s0,32(sp)
    80001874:	64e2                	ld	s1,24(sp)
    80001876:	6942                	ld	s2,16(sp)
    80001878:	69a2                	ld	s3,8(sp)
    8000187a:	6a02                	ld	s4,0(sp)
    8000187c:	6145                	addi	sp,sp,48
    8000187e:	8082                	ret

0000000080001880 <_vfiprintf_r>:
_vfiprintf_r():
    80001880:	7155                	addi	sp,sp,-208
    80001882:	e1a2                	sd	s0,192(sp)
    80001884:	fd26                	sd	s1,184(sp)
    80001886:	f94a                	sd	s2,176(sp)
    80001888:	f54e                	sd	s3,168(sp)
    8000188a:	f152                	sd	s4,160(sp)
    8000188c:	e586                	sd	ra,200(sp)
    8000188e:	ed56                	sd	s5,152(sp)
    80001890:	e95a                	sd	s6,144(sp)
    80001892:	e55e                	sd	s7,136(sp)
    80001894:	e162                	sd	s8,128(sp)
    80001896:	fce6                	sd	s9,120(sp)
    80001898:	f8ea                	sd	s10,112(sp)
    8000189a:	89aa                	mv	s3,a0
    8000189c:	84ae                	mv	s1,a1
    8000189e:	8932                	mv	s2,a2
    800018a0:	8436                	mv	s0,a3
    800018a2:	4a01                	li	s4,0
    800018a4:	c509                	beqz	a0,800018ae <_vfiprintf_r+0x2e>
    800018a6:	591c                	lw	a5,48(a0)
    800018a8:	e399                	bnez	a5,800018ae <_vfiprintf_r+0x2e>
    800018aa:	a9fff0ef          	jal	ra,80001348 <__sinit>
    800018ae:	fffff797          	auipc	a5,0xfffff
    800018b2:	b3278793          	addi	a5,a5,-1230 # 800003e0 <__sf_fake_stdin>
    800018b6:	0cf49e63          	bne	s1,a5,80001992 <_vfiprintf_r+0x112>
    800018ba:	0089b483          	ld	s1,8(s3)
    800018be:	0104d783          	lhu	a5,16(s1)
    800018c2:	8ba1                	andi	a5,a5,8
    800018c4:	cbed                	beqz	a5,800019b6 <_vfiprintf_r+0x136>
    800018c6:	6c9c                	ld	a5,24(s1)
    800018c8:	c7fd                	beqz	a5,800019b6 <_vfiprintf_r+0x136>
    800018ca:	02000793          	li	a5,32
    800018ce:	02f104a3          	sb	a5,41(sp)
    800018d2:	5afd                	li	s5,-1
    800018d4:	03000793          	li	a5,48
    800018d8:	d202                	sw	zero,36(sp)
    800018da:	02f10523          	sb	a5,42(sp)
    800018de:	e422                	sd	s0,8(sp)
    800018e0:	02500b93          	li	s7,37
    800018e4:	020a9c13          	slli	s8,s5,0x20
    800018e8:	fffffb17          	auipc	s6,0xfffff
    800018ec:	b68b0b13          	addi	s6,s6,-1176 # 80000450 <__sf_fake_stdout+0x38>
    800018f0:	4c85                	li	s9,1
    800018f2:	844a                	mv	s0,s2
    800018f4:	00044783          	lbu	a5,0(s0)
    800018f8:	c399                	beqz	a5,800018fe <_vfiprintf_r+0x7e>
    800018fa:	0f779263          	bne	a5,s7,800019de <_vfiprintf_r+0x15e>
    800018fe:	41240d3b          	subw	s10,s0,s2
    80001902:	000d0e63          	beqz	s10,8000191e <_vfiprintf_r+0x9e>
    80001906:	86ea                	mv	a3,s10
    80001908:	864a                	mv	a2,s2
    8000190a:	85a6                	mv	a1,s1
    8000190c:	854e                	mv	a0,s3
    8000190e:	f2fff0ef          	jal	ra,8000183c <__sfputs_r>
    80001912:	1f550e63          	beq	a0,s5,80001b0e <_vfiprintf_r+0x28e>
    80001916:	5692                	lw	a3,36(sp)
    80001918:	01a686bb          	addw	a3,a3,s10
    8000191c:	d236                	sw	a3,36(sp)
    8000191e:	00044783          	lbu	a5,0(s0)
    80001922:	1e078663          	beqz	a5,80001b0e <_vfiprintf_r+0x28e>
    80001926:	00140913          	addi	s2,s0,1
    8000192a:	e862                	sd	s8,16(sp)
    8000192c:	ec02                	sd	zero,24(sp)
    8000192e:	040109a3          	sb	zero,83(sp)
    80001932:	d482                	sw	zero,104(sp)
    80001934:	00094583          	lbu	a1,0(s2)
    80001938:	4615                	li	a2,5
    8000193a:	855a                	mv	a0,s6
    8000193c:	3be000ef          	jal	ra,80001cfa <memchr>
    80001940:	00190413          	addi	s0,s2,1
    80001944:	ed59                	bnez	a0,800019e2 <_vfiprintf_r+0x162>
    80001946:	47c2                	lw	a5,16(sp)
    80001948:	0107f713          	andi	a4,a5,16
    8000194c:	c709                	beqz	a4,80001956 <_vfiprintf_r+0xd6>
    8000194e:	02000713          	li	a4,32
    80001952:	04e109a3          	sb	a4,83(sp)
    80001956:	0087f713          	andi	a4,a5,8
    8000195a:	c709                	beqz	a4,80001964 <_vfiprintf_r+0xe4>
    8000195c:	02b00713          	li	a4,43
    80001960:	04e109a3          	sb	a4,83(sp)
    80001964:	00094683          	lbu	a3,0(s2)
    80001968:	02a00713          	li	a4,42
    8000196c:	08e68463          	beq	a3,a4,800019f4 <_vfiprintf_r+0x174>
    80001970:	47f2                	lw	a5,28(sp)
    80001972:	844a                	mv	s0,s2
    80001974:	4681                	li	a3,0
    80001976:	4625                	li	a2,9
    80001978:	4829                	li	a6,10
    8000197a:	00044703          	lbu	a4,0(s0)
    8000197e:	00140513          	addi	a0,s0,1
    80001982:	fd07059b          	addiw	a1,a4,-48
    80001986:	872e                	mv	a4,a1
    80001988:	0ab67b63          	bgeu	a2,a1,80001a3e <_vfiprintf_r+0x1be>
    8000198c:	cea5                	beqz	a3,80001a04 <_vfiprintf_r+0x184>
    8000198e:	ce3e                	sw	a5,28(sp)
    80001990:	a895                	j	80001a04 <_vfiprintf_r+0x184>
    80001992:	fffff797          	auipc	a5,0xfffff
    80001996:	a8678793          	addi	a5,a5,-1402 # 80000418 <__sf_fake_stdout>
    8000199a:	00f49563          	bne	s1,a5,800019a4 <_vfiprintf_r+0x124>
    8000199e:	0109b483          	ld	s1,16(s3)
    800019a2:	bf31                	j	800018be <_vfiprintf_r+0x3e>
    800019a4:	fffff797          	auipc	a5,0xfffff
    800019a8:	a0478793          	addi	a5,a5,-1532 # 800003a8 <__sf_fake_stderr>
    800019ac:	f0f499e3          	bne	s1,a5,800018be <_vfiprintf_r+0x3e>
    800019b0:	0189b483          	ld	s1,24(s3)
    800019b4:	b729                	j	800018be <_vfiprintf_r+0x3e>
    800019b6:	85a6                	mv	a1,s1
    800019b8:	854e                	mv	a0,s3
    800019ba:	e20ff0ef          	jal	ra,80000fda <__swsetup_r>
    800019be:	d511                	beqz	a0,800018ca <_vfiprintf_r+0x4a>
    800019c0:	557d                	li	a0,-1
    800019c2:	60ae                	ld	ra,200(sp)
    800019c4:	640e                	ld	s0,192(sp)
    800019c6:	74ea                	ld	s1,184(sp)
    800019c8:	794a                	ld	s2,176(sp)
    800019ca:	79aa                	ld	s3,168(sp)
    800019cc:	7a0a                	ld	s4,160(sp)
    800019ce:	6aea                	ld	s5,152(sp)
    800019d0:	6b4a                	ld	s6,144(sp)
    800019d2:	6baa                	ld	s7,136(sp)
    800019d4:	6c0a                	ld	s8,128(sp)
    800019d6:	7ce6                	ld	s9,120(sp)
    800019d8:	7d46                	ld	s10,112(sp)
    800019da:	6169                	addi	sp,sp,208
    800019dc:	8082                	ret
    800019de:	0405                	addi	s0,s0,1
    800019e0:	bf11                	j	800018f4 <_vfiprintf_r+0x74>
    800019e2:	47c2                	lw	a5,16(sp)
    800019e4:	41650533          	sub	a0,a0,s6
    800019e8:	00ac953b          	sllw	a0,s9,a0
    800019ec:	8d5d                	or	a0,a0,a5
    800019ee:	c82a                	sw	a0,16(sp)
    800019f0:	8922                	mv	s2,s0
    800019f2:	b789                	j	80001934 <_vfiprintf_r+0xb4>
    800019f4:	6722                	ld	a4,8(sp)
    800019f6:	00870693          	addi	a3,a4,8
    800019fa:	4318                	lw	a4,0(a4)
    800019fc:	e436                	sd	a3,8(sp)
    800019fe:	02074963          	bltz	a4,80001a30 <_vfiprintf_r+0x1b0>
    80001a02:	ce3a                	sw	a4,28(sp)
    80001a04:	00044703          	lbu	a4,0(s0)
    80001a08:	02e00793          	li	a5,46
    80001a0c:	04f71063          	bne	a4,a5,80001a4c <_vfiprintf_r+0x1cc>
    80001a10:	00144703          	lbu	a4,1(s0)
    80001a14:	02a00793          	li	a5,42
    80001a18:	0af71363          	bne	a4,a5,80001abe <_vfiprintf_r+0x23e>
    80001a1c:	67a2                	ld	a5,8(sp)
    80001a1e:	0409                	addi	s0,s0,2
    80001a20:	00878713          	addi	a4,a5,8
    80001a24:	439c                	lw	a5,0(a5)
    80001a26:	e43a                	sd	a4,8(sp)
    80001a28:	0207c163          	bltz	a5,80001a4a <_vfiprintf_r+0x1ca>
    80001a2c:	ca3e                	sw	a5,20(sp)
    80001a2e:	a839                	j	80001a4c <_vfiprintf_r+0x1cc>
    80001a30:	40e0073b          	negw	a4,a4
    80001a34:	0027e793          	ori	a5,a5,2
    80001a38:	ce3a                	sw	a4,28(sp)
    80001a3a:	c83e                	sw	a5,16(sp)
    80001a3c:	b7e1                	j	80001a04 <_vfiprintf_r+0x184>
    80001a3e:	02f807bb          	mulw	a5,a6,a5
    80001a42:	4685                	li	a3,1
    80001a44:	842a                	mv	s0,a0
    80001a46:	9fb9                	addw	a5,a5,a4
    80001a48:	bf0d                	j	8000197a <_vfiprintf_r+0xfa>
    80001a4a:	ca56                	sw	s5,20(sp)
    80001a4c:	00044583          	lbu	a1,0(s0)
    80001a50:	460d                	li	a2,3
    80001a52:	fffff517          	auipc	a0,0xfffff
    80001a56:	a0650513          	addi	a0,a0,-1530 # 80000458 <__sf_fake_stdout+0x40>
    80001a5a:	2a0000ef          	jal	ra,80001cfa <memchr>
    80001a5e:	cd19                	beqz	a0,80001a7c <_vfiprintf_r+0x1fc>
    80001a60:	fffff797          	auipc	a5,0xfffff
    80001a64:	9f878793          	addi	a5,a5,-1544 # 80000458 <__sf_fake_stdout+0x40>
    80001a68:	40f507b3          	sub	a5,a0,a5
    80001a6c:	04000513          	li	a0,64
    80001a70:	00f5153b          	sllw	a0,a0,a5
    80001a74:	47c2                	lw	a5,16(sp)
    80001a76:	0405                	addi	s0,s0,1
    80001a78:	8d5d                	or	a0,a0,a5
    80001a7a:	c82a                	sw	a0,16(sp)
    80001a7c:	00044583          	lbu	a1,0(s0)
    80001a80:	4619                	li	a2,6
    80001a82:	fffff517          	auipc	a0,0xfffff
    80001a86:	9de50513          	addi	a0,a0,-1570 # 80000460 <__sf_fake_stdout+0x48>
    80001a8a:	00140913          	addi	s2,s0,1
    80001a8e:	02b10423          	sb	a1,40(sp)
    80001a92:	268000ef          	jal	ra,80001cfa <memchr>
    80001a96:	c541                	beqz	a0,80001b1e <_vfiprintf_r+0x29e>
    80001a98:	000007b7          	lui	a5,0x0
    80001a9c:	00078793          	mv	a5,a5
    80001aa0:	eba1                	bnez	a5,80001af0 <_vfiprintf_r+0x270>
    80001aa2:	4742                	lw	a4,16(sp)
    80001aa4:	67a2                	ld	a5,8(sp)
    80001aa6:	10077713          	andi	a4,a4,256
    80001aaa:	c329                	beqz	a4,80001aec <_vfiprintf_r+0x26c>
    80001aac:	07bd                	addi	a5,a5,15
    80001aae:	9bc1                	andi	a5,a5,-16
    80001ab0:	07c1                	addi	a5,a5,16
    80001ab2:	e43e                	sd	a5,8(sp)
    80001ab4:	5792                	lw	a5,36(sp)
    80001ab6:	014787bb          	addw	a5,a5,s4
    80001aba:	d23e                	sw	a5,36(sp)
    80001abc:	bd1d                	j	800018f2 <_vfiprintf_r+0x72>
    80001abe:	0405                	addi	s0,s0,1
    80001ac0:	ca02                	sw	zero,20(sp)
    80001ac2:	4681                	li	a3,0
    80001ac4:	4781                	li	a5,0
    80001ac6:	4625                	li	a2,9
    80001ac8:	4829                	li	a6,10
    80001aca:	00044703          	lbu	a4,0(s0)
    80001ace:	00140513          	addi	a0,s0,1
    80001ad2:	fd07059b          	addiw	a1,a4,-48
    80001ad6:	872e                	mv	a4,a1
    80001ad8:	00b67463          	bgeu	a2,a1,80001ae0 <_vfiprintf_r+0x260>
    80001adc:	faa1                	bnez	a3,80001a2c <_vfiprintf_r+0x1ac>
    80001ade:	b7bd                	j	80001a4c <_vfiprintf_r+0x1cc>
    80001ae0:	02f807bb          	mulw	a5,a6,a5
    80001ae4:	4685                	li	a3,1
    80001ae6:	842a                	mv	s0,a0
    80001ae8:	9fb9                	addw	a5,a5,a4
    80001aea:	b7c5                	j	80001aca <_vfiprintf_r+0x24a>
    80001aec:	07a1                	addi	a5,a5,8
    80001aee:	b7d1                	j	80001ab2 <_vfiprintf_r+0x232>
    80001af0:	0038                	addi	a4,sp,8
    80001af2:	00000697          	auipc	a3,0x0
    80001af6:	d4a68693          	addi	a3,a3,-694 # 8000183c <__sfputs_r>
    80001afa:	8626                	mv	a2,s1
    80001afc:	080c                	addi	a1,sp,16
    80001afe:	854e                	mv	a0,s3
    80001b00:	00000097          	auipc	ra,0x0
    80001b04:	000000e7          	jalr	zero # 0 <__metal_boot_hart>
    80001b08:	8a2a                	mv	s4,a0
    80001b0a:	fb5515e3          	bne	a0,s5,80001ab4 <_vfiprintf_r+0x234>
    80001b0e:	0104d783          	lhu	a5,16(s1)
    80001b12:	0407f793          	andi	a5,a5,64
    80001b16:	ea0795e3          	bnez	a5,800019c0 <_vfiprintf_r+0x140>
    80001b1a:	5512                	lw	a0,36(sp)
    80001b1c:	b55d                	j	800019c2 <_vfiprintf_r+0x142>
    80001b1e:	0038                	addi	a4,sp,8
    80001b20:	00000697          	auipc	a3,0x0
    80001b24:	d1c68693          	addi	a3,a3,-740 # 8000183c <__sfputs_r>
    80001b28:	8626                	mv	a2,s1
    80001b2a:	080c                	addi	a1,sp,16
    80001b2c:	854e                	mv	a0,s3
    80001b2e:	30e000ef          	jal	ra,80001e3c <_printf_i>
    80001b32:	bfd9                	j	80001b08 <_vfiprintf_r+0x288>

0000000080001b34 <_sbrk_r>:
_sbrk_r():
    80001b34:	1141                	addi	sp,sp,-16
    80001b36:	e022                	sd	s0,0(sp)
    80001b38:	842a                	mv	s0,a0
    80001b3a:	852e                	mv	a0,a1
    80001b3c:	9601a023          	sw	zero,-1696(gp) # 800076c8 <errno>
    80001b40:	e406                	sd	ra,8(sp)
    80001b42:	0b3040ef          	jal	ra,800063f4 <_sbrk>
    80001b46:	57fd                	li	a5,-1
    80001b48:	00f51763          	bne	a0,a5,80001b56 <_sbrk_r+0x22>
    80001b4c:	96018793          	addi	a5,gp,-1696 # 800076c8 <errno>
    80001b50:	439c                	lw	a5,0(a5)
    80001b52:	c391                	beqz	a5,80001b56 <_sbrk_r+0x22>
    80001b54:	c01c                	sw	a5,0(s0)
    80001b56:	60a2                	ld	ra,8(sp)
    80001b58:	6402                	ld	s0,0(sp)
    80001b5a:	0141                	addi	sp,sp,16
    80001b5c:	8082                	ret

0000000080001b5e <__sread>:
__sread():
    80001b5e:	1141                	addi	sp,sp,-16
    80001b60:	e022                	sd	s0,0(sp)
    80001b62:	842e                	mv	s0,a1
    80001b64:	01259583          	lh	a1,18(a1)
    80001b68:	e406                	sd	ra,8(sp)
    80001b6a:	594000ef          	jal	ra,800020fe <_read_r>
    80001b6e:	00054963          	bltz	a0,80001b80 <__sread+0x22>
    80001b72:	6c5c                	ld	a5,152(s0)
    80001b74:	97aa                	add	a5,a5,a0
    80001b76:	ec5c                	sd	a5,152(s0)
    80001b78:	60a2                	ld	ra,8(sp)
    80001b7a:	6402                	ld	s0,0(sp)
    80001b7c:	0141                	addi	sp,sp,16
    80001b7e:	8082                	ret
    80001b80:	01045783          	lhu	a5,16(s0)
    80001b84:	777d                	lui	a4,0xfffff
    80001b86:	177d                	addi	a4,a4,-1
    80001b88:	8ff9                	and	a5,a5,a4
    80001b8a:	00f41823          	sh	a5,16(s0)
    80001b8e:	b7ed                	j	80001b78 <__sread+0x1a>

0000000080001b90 <__swrite>:
__swrite():
    80001b90:	0105d783          	lhu	a5,16(a1)
    80001b94:	7179                	addi	sp,sp,-48
    80001b96:	f022                	sd	s0,32(sp)
    80001b98:	ec26                	sd	s1,24(sp)
    80001b9a:	e84a                	sd	s2,16(sp)
    80001b9c:	e44e                	sd	s3,8(sp)
    80001b9e:	f406                	sd	ra,40(sp)
    80001ba0:	1007f793          	andi	a5,a5,256
    80001ba4:	84aa                	mv	s1,a0
    80001ba6:	842e                	mv	s0,a1
    80001ba8:	8932                	mv	s2,a2
    80001baa:	89b6                	mv	s3,a3
    80001bac:	c799                	beqz	a5,80001bba <__swrite+0x2a>
    80001bae:	01259583          	lh	a1,18(a1)
    80001bb2:	4689                	li	a3,2
    80001bb4:	4601                	li	a2,0
    80001bb6:	116000ef          	jal	ra,80001ccc <_lseek_r>
    80001bba:	01045783          	lhu	a5,16(s0)
    80001bbe:	777d                	lui	a4,0xfffff
    80001bc0:	177d                	addi	a4,a4,-1
    80001bc2:	8ff9                	and	a5,a5,a4
    80001bc4:	00f41823          	sh	a5,16(s0)
    80001bc8:	01241583          	lh	a1,18(s0)
    80001bcc:	7402                	ld	s0,32(sp)
    80001bce:	70a2                	ld	ra,40(sp)
    80001bd0:	86ce                	mv	a3,s3
    80001bd2:	864a                	mv	a2,s2
    80001bd4:	69a2                	ld	s3,8(sp)
    80001bd6:	6942                	ld	s2,16(sp)
    80001bd8:	8526                	mv	a0,s1
    80001bda:	64e2                	ld	s1,24(sp)
    80001bdc:	6145                	addi	sp,sp,48
    80001bde:	a081                	j	80001c1e <_write_r>

0000000080001be0 <__sseek>:
__sseek():
    80001be0:	1141                	addi	sp,sp,-16
    80001be2:	e022                	sd	s0,0(sp)
    80001be4:	842e                	mv	s0,a1
    80001be6:	01259583          	lh	a1,18(a1)
    80001bea:	e406                	sd	ra,8(sp)
    80001bec:	0e0000ef          	jal	ra,80001ccc <_lseek_r>
    80001bf0:	57fd                	li	a5,-1
    80001bf2:	01045703          	lhu	a4,16(s0)
    80001bf6:	00f51b63          	bne	a0,a5,80001c0c <__sseek+0x2c>
    80001bfa:	77fd                	lui	a5,0xfffff
    80001bfc:	17fd                	addi	a5,a5,-1
    80001bfe:	8ff9                	and	a5,a5,a4
    80001c00:	00f41823          	sh	a5,16(s0)
    80001c04:	60a2                	ld	ra,8(sp)
    80001c06:	6402                	ld	s0,0(sp)
    80001c08:	0141                	addi	sp,sp,16
    80001c0a:	8082                	ret
    80001c0c:	6785                	lui	a5,0x1
    80001c0e:	8fd9                	or	a5,a5,a4
    80001c10:	00f41823          	sh	a5,16(s0)
    80001c14:	ec48                	sd	a0,152(s0)
    80001c16:	b7fd                	j	80001c04 <__sseek+0x24>

0000000080001c18 <__sclose>:
__sclose():
    80001c18:	01259583          	lh	a1,18(a1)
    80001c1c:	a805                	j	80001c4c <_close_r>

0000000080001c1e <_write_r>:
_write_r():
    80001c1e:	1141                	addi	sp,sp,-16
    80001c20:	e022                	sd	s0,0(sp)
    80001c22:	842a                	mv	s0,a0
    80001c24:	852e                	mv	a0,a1
    80001c26:	85b2                	mv	a1,a2
    80001c28:	8636                	mv	a2,a3
    80001c2a:	9601a023          	sw	zero,-1696(gp) # 800076c8 <errno>
    80001c2e:	e406                	sd	ra,8(sp)
    80001c30:	03d040ef          	jal	ra,8000646c <_write>
    80001c34:	57fd                	li	a5,-1
    80001c36:	00f51763          	bne	a0,a5,80001c44 <_write_r+0x26>
    80001c3a:	96018793          	addi	a5,gp,-1696 # 800076c8 <errno>
    80001c3e:	439c                	lw	a5,0(a5)
    80001c40:	c391                	beqz	a5,80001c44 <_write_r+0x26>
    80001c42:	c01c                	sw	a5,0(s0)
    80001c44:	60a2                	ld	ra,8(sp)
    80001c46:	6402                	ld	s0,0(sp)
    80001c48:	0141                	addi	sp,sp,16
    80001c4a:	8082                	ret

0000000080001c4c <_close_r>:
_close_r():
    80001c4c:	1141                	addi	sp,sp,-16
    80001c4e:	e022                	sd	s0,0(sp)
    80001c50:	842a                	mv	s0,a0
    80001c52:	852e                	mv	a0,a1
    80001c54:	9601a023          	sw	zero,-1696(gp) # 800076c8 <errno>
    80001c58:	e406                	sd	ra,8(sp)
    80001c5a:	6be040ef          	jal	ra,80006318 <_close>
    80001c5e:	57fd                	li	a5,-1
    80001c60:	00f51763          	bne	a0,a5,80001c6e <_close_r+0x22>
    80001c64:	96018793          	addi	a5,gp,-1696 # 800076c8 <errno>
    80001c68:	439c                	lw	a5,0(a5)
    80001c6a:	c391                	beqz	a5,80001c6e <_close_r+0x22>
    80001c6c:	c01c                	sw	a5,0(s0)
    80001c6e:	60a2                	ld	ra,8(sp)
    80001c70:	6402                	ld	s0,0(sp)
    80001c72:	0141                	addi	sp,sp,16
    80001c74:	8082                	ret

0000000080001c76 <_fstat_r>:
_fstat_r():
    80001c76:	1141                	addi	sp,sp,-16
    80001c78:	e022                	sd	s0,0(sp)
    80001c7a:	842a                	mv	s0,a0
    80001c7c:	852e                	mv	a0,a1
    80001c7e:	85b2                	mv	a1,a2
    80001c80:	9601a023          	sw	zero,-1696(gp) # 800076c8 <errno>
    80001c84:	e406                	sd	ra,8(sp)
    80001c86:	6b8040ef          	jal	ra,8000633e <_fstat>
    80001c8a:	57fd                	li	a5,-1
    80001c8c:	00f51763          	bne	a0,a5,80001c9a <_fstat_r+0x24>
    80001c90:	96018793          	addi	a5,gp,-1696 # 800076c8 <errno>
    80001c94:	439c                	lw	a5,0(a5)
    80001c96:	c391                	beqz	a5,80001c9a <_fstat_r+0x24>
    80001c98:	c01c                	sw	a5,0(s0)
    80001c9a:	60a2                	ld	ra,8(sp)
    80001c9c:	6402                	ld	s0,0(sp)
    80001c9e:	0141                	addi	sp,sp,16
    80001ca0:	8082                	ret

0000000080001ca2 <_isatty_r>:
_isatty_r():
    80001ca2:	1141                	addi	sp,sp,-16
    80001ca4:	e022                	sd	s0,0(sp)
    80001ca6:	842a                	mv	s0,a0
    80001ca8:	852e                	mv	a0,a1
    80001caa:	9601a023          	sw	zero,-1696(gp) # 800076c8 <errno>
    80001cae:	e406                	sd	ra,8(sp)
    80001cb0:	6b8040ef          	jal	ra,80006368 <_isatty>
    80001cb4:	57fd                	li	a5,-1
    80001cb6:	00f51763          	bne	a0,a5,80001cc4 <_isatty_r+0x22>
    80001cba:	96018793          	addi	a5,gp,-1696 # 800076c8 <errno>
    80001cbe:	439c                	lw	a5,0(a5)
    80001cc0:	c391                	beqz	a5,80001cc4 <_isatty_r+0x22>
    80001cc2:	c01c                	sw	a5,0(s0)
    80001cc4:	60a2                	ld	ra,8(sp)
    80001cc6:	6402                	ld	s0,0(sp)
    80001cc8:	0141                	addi	sp,sp,16
    80001cca:	8082                	ret

0000000080001ccc <_lseek_r>:
_lseek_r():
    80001ccc:	1141                	addi	sp,sp,-16
    80001cce:	e022                	sd	s0,0(sp)
    80001cd0:	842a                	mv	s0,a0
    80001cd2:	852e                	mv	a0,a1
    80001cd4:	85b2                	mv	a1,a2
    80001cd6:	8636                	mv	a2,a3
    80001cd8:	9601a023          	sw	zero,-1696(gp) # 800076c8 <errno>
    80001cdc:	e406                	sd	ra,8(sp)
    80001cde:	6b6040ef          	jal	ra,80006394 <_lseek>
    80001ce2:	57fd                	li	a5,-1
    80001ce4:	00f51763          	bne	a0,a5,80001cf2 <_lseek_r+0x26>
    80001ce8:	96018793          	addi	a5,gp,-1696 # 800076c8 <errno>
    80001cec:	439c                	lw	a5,0(a5)
    80001cee:	c391                	beqz	a5,80001cf2 <_lseek_r+0x26>
    80001cf0:	c01c                	sw	a5,0(s0)
    80001cf2:	60a2                	ld	ra,8(sp)
    80001cf4:	6402                	ld	s0,0(sp)
    80001cf6:	0141                	addi	sp,sp,16
    80001cf8:	8082                	ret

0000000080001cfa <memchr>:
memchr():
    80001cfa:	0ff5f593          	andi	a1,a1,255
    80001cfe:	962a                	add	a2,a2,a0
    80001d00:	00c51463          	bne	a0,a2,80001d08 <memchr+0xe>
    80001d04:	4501                	li	a0,0
    80001d06:	8082                	ret
    80001d08:	00054783          	lbu	a5,0(a0)
    80001d0c:	feb78de3          	beq	a5,a1,80001d06 <memchr+0xc>
    80001d10:	0505                	addi	a0,a0,1
    80001d12:	b7fd                	j	80001d00 <memchr+0x6>

0000000080001d14 <__malloc_lock>:
__malloc_lock():
    80001d14:	8082                	ret

0000000080001d16 <__malloc_unlock>:
__malloc_unlock():
    80001d16:	8082                	ret

0000000080001d18 <_printf_common>:
_printf_common():
    80001d18:	715d                	addi	sp,sp,-80
    80001d1a:	ec56                	sd	s5,24(sp)
    80001d1c:	499c                	lw	a5,16(a1)
    80001d1e:	8aba                	mv	s5,a4
    80001d20:	4598                	lw	a4,8(a1)
    80001d22:	e0a2                	sd	s0,64(sp)
    80001d24:	f84a                	sd	s2,48(sp)
    80001d26:	f44e                	sd	s3,40(sp)
    80001d28:	f052                	sd	s4,32(sp)
    80001d2a:	8932                	mv	s2,a2
    80001d2c:	8a36                	mv	s4,a3
    80001d2e:	e486                	sd	ra,72(sp)
    80001d30:	fc26                	sd	s1,56(sp)
    80001d32:	e85a                	sd	s6,16(sp)
    80001d34:	e45e                	sd	s7,8(sp)
    80001d36:	0007861b          	sext.w	a2,a5
    80001d3a:	0007069b          	sext.w	a3,a4
    80001d3e:	89aa                	mv	s3,a0
    80001d40:	842e                	mv	s0,a1
    80001d42:	00d65363          	bge	a2,a3,80001d48 <_printf_common+0x30>
    80001d46:	87ba                	mv	a5,a4
    80001d48:	00f92023          	sw	a5,0(s2)
    80001d4c:	04344703          	lbu	a4,67(s0)
    80001d50:	c701                	beqz	a4,80001d58 <_printf_common+0x40>
    80001d52:	2785                	addiw	a5,a5,1
    80001d54:	00f92023          	sw	a5,0(s2)
    80001d58:	401c                	lw	a5,0(s0)
    80001d5a:	0207f793          	andi	a5,a5,32
    80001d5e:	c791                	beqz	a5,80001d6a <_printf_common+0x52>
    80001d60:	00092783          	lw	a5,0(s2)
    80001d64:	2789                	addiw	a5,a5,2
    80001d66:	00f92023          	sw	a5,0(s2)
    80001d6a:	4004                	lw	s1,0(s0)
    80001d6c:	8899                	andi	s1,s1,6
    80001d6e:	e891                	bnez	s1,80001d82 <_printf_common+0x6a>
    80001d70:	01940b13          	addi	s6,s0,25
    80001d74:	5bfd                	li	s7,-1
    80001d76:	445c                	lw	a5,12(s0)
    80001d78:	00092703          	lw	a4,0(s2)
    80001d7c:	9f99                	subw	a5,a5,a4
    80001d7e:	06f4c163          	blt	s1,a5,80001de0 <_printf_common+0xc8>
    80001d82:	04344783          	lbu	a5,67(s0)
    80001d86:	4018                	lw	a4,0(s0)
    80001d88:	00f037b3          	snez	a5,a5
    80001d8c:	02077713          	andi	a4,a4,32
    80001d90:	0007869b          	sext.w	a3,a5
    80001d94:	eb3d                	bnez	a4,80001e0a <_printf_common+0xf2>
    80001d96:	04340613          	addi	a2,s0,67
    80001d9a:	85d2                	mv	a1,s4
    80001d9c:	854e                	mv	a0,s3
    80001d9e:	9a82                	jalr	s5
    80001da0:	57fd                	li	a5,-1
    80001da2:	04f50663          	beq	a0,a5,80001dee <_printf_common+0xd6>
    80001da6:	401c                	lw	a5,0(s0)
    80001da8:	4611                	li	a2,4
    80001daa:	4454                	lw	a3,12(s0)
    80001dac:	8b99                	andi	a5,a5,6
    80001dae:	00092703          	lw	a4,0(s2)
    80001db2:	4481                	li	s1,0
    80001db4:	00c79963          	bne	a5,a2,80001dc6 <_printf_common+0xae>
    80001db8:	40e684bb          	subw	s1,a3,a4
    80001dbc:	02049793          	slli	a5,s1,0x20
    80001dc0:	0007d363          	bgez	a5,80001dc6 <_printf_common+0xae>
    80001dc4:	4481                	li	s1,0
    80001dc6:	441c                	lw	a5,8(s0)
    80001dc8:	4818                	lw	a4,16(s0)
    80001dca:	00f75463          	bge	a4,a5,80001dd2 <_printf_common+0xba>
    80001dce:	9f99                	subw	a5,a5,a4
    80001dd0:	9cbd                	addw	s1,s1,a5
    80001dd2:	4901                	li	s2,0
    80001dd4:	0469                	addi	s0,s0,26
    80001dd6:	5b7d                	li	s6,-1
    80001dd8:	05249963          	bne	s1,s2,80001e2a <_printf_common+0x112>
    80001ddc:	4501                	li	a0,0
    80001dde:	a809                	j	80001df0 <_printf_common+0xd8>
    80001de0:	4685                	li	a3,1
    80001de2:	865a                	mv	a2,s6
    80001de4:	85d2                	mv	a1,s4
    80001de6:	854e                	mv	a0,s3
    80001de8:	9a82                	jalr	s5
    80001dea:	01751e63          	bne	a0,s7,80001e06 <_printf_common+0xee>
    80001dee:	557d                	li	a0,-1
    80001df0:	60a6                	ld	ra,72(sp)
    80001df2:	6406                	ld	s0,64(sp)
    80001df4:	74e2                	ld	s1,56(sp)
    80001df6:	7942                	ld	s2,48(sp)
    80001df8:	79a2                	ld	s3,40(sp)
    80001dfa:	7a02                	ld	s4,32(sp)
    80001dfc:	6ae2                	ld	s5,24(sp)
    80001dfe:	6b42                	ld	s6,16(sp)
    80001e00:	6ba2                	ld	s7,8(sp)
    80001e02:	6161                	addi	sp,sp,80
    80001e04:	8082                	ret
    80001e06:	2485                	addiw	s1,s1,1
    80001e08:	b7bd                	j	80001d76 <_printf_common+0x5e>
    80001e0a:	96a2                	add	a3,a3,s0
    80001e0c:	03000613          	li	a2,48
    80001e10:	04c681a3          	sb	a2,67(a3)
    80001e14:	04544603          	lbu	a2,69(s0)
    80001e18:	0017871b          	addiw	a4,a5,1
    80001e1c:	0027869b          	addiw	a3,a5,2
    80001e20:	00e407b3          	add	a5,s0,a4
    80001e24:	04c781a3          	sb	a2,67(a5) # 1043 <__heap_size+0x843>
    80001e28:	b7bd                	j	80001d96 <_printf_common+0x7e>
    80001e2a:	4685                	li	a3,1
    80001e2c:	8622                	mv	a2,s0
    80001e2e:	85d2                	mv	a1,s4
    80001e30:	854e                	mv	a0,s3
    80001e32:	9a82                	jalr	s5
    80001e34:	fb650de3          	beq	a0,s6,80001dee <_printf_common+0xd6>
    80001e38:	2905                	addiw	s2,s2,1
    80001e3a:	bf79                	j	80001dd8 <_printf_common+0xc0>

0000000080001e3c <_printf_i>:
_printf_i():
    80001e3c:	715d                	addi	sp,sp,-80
    80001e3e:	e0a2                	sd	s0,64(sp)
    80001e40:	f84a                	sd	s2,48(sp)
    80001e42:	f44e                	sd	s3,40(sp)
    80001e44:	f052                	sd	s4,32(sp)
    80001e46:	e486                	sd	ra,72(sp)
    80001e48:	fc26                	sd	s1,56(sp)
    80001e4a:	ec56                	sd	s5,24(sp)
    80001e4c:	e85a                	sd	s6,16(sp)
    80001e4e:	8a36                	mv	s4,a3
    80001e50:	0185c683          	lbu	a3,24(a1)
    80001e54:	06e00793          	li	a5,110
    80001e58:	89b2                	mv	s3,a2
    80001e5a:	892a                	mv	s2,a0
    80001e5c:	842e                	mv	s0,a1
    80001e5e:	04358613          	addi	a2,a1,67
    80001e62:	1ef68a63          	beq	a3,a5,80002056 <_printf_i+0x21a>
    80001e66:	06d7e263          	bltu	a5,a3,80001eca <_printf_i+0x8e>
    80001e6a:	06300793          	li	a5,99
    80001e6e:	0af68263          	beq	a3,a5,80001f12 <_printf_i+0xd6>
    80001e72:	00d7ed63          	bltu	a5,a3,80001e8c <_printf_i+0x50>
    80001e76:	1e068c63          	beqz	a3,8000206e <_printf_i+0x232>
    80001e7a:	05800793          	li	a5,88
    80001e7e:	16f68b63          	beq	a3,a5,80001ff4 <_printf_i+0x1b8>
    80001e82:	04240493          	addi	s1,s0,66
    80001e86:	04d40123          	sb	a3,66(s0)
    80001e8a:	a869                	j	80001f24 <_printf_i+0xe8>
    80001e8c:	06400793          	li	a5,100
    80001e90:	00f68663          	beq	a3,a5,80001e9c <_printf_i+0x60>
    80001e94:	06900793          	li	a5,105
    80001e98:	fef695e3          	bne	a3,a5,80001e82 <_printf_i+0x46>
    80001e9c:	4014                	lw	a3,0(s0)
    80001e9e:	631c                	ld	a5,0(a4)
    80001ea0:	0806f513          	andi	a0,a3,128
    80001ea4:	00878593          	addi	a1,a5,8
    80001ea8:	c141                	beqz	a0,80001f28 <_printf_i+0xec>
    80001eaa:	639c                	ld	a5,0(a5)
    80001eac:	e30c                	sd	a1,0(a4)
    80001eae:	0007d863          	bgez	a5,80001ebe <_printf_i+0x82>
    80001eb2:	02d00713          	li	a4,45
    80001eb6:	40f007b3          	neg	a5,a5
    80001eba:	04e401a3          	sb	a4,67(s0)
    80001ebe:	ffffe697          	auipc	a3,0xffffe
    80001ec2:	5aa68693          	addi	a3,a3,1450 # 80000468 <__sf_fake_stdout+0x50>
    80001ec6:	4729                	li	a4,10
    80001ec8:	a871                	j	80001f64 <_printf_i+0x128>
    80001eca:	07300793          	li	a5,115
    80001ece:	1af68e63          	beq	a3,a5,8000208a <_printf_i+0x24e>
    80001ed2:	00d7ef63          	bltu	a5,a3,80001ef0 <_printf_i+0xb4>
    80001ed6:	06f00793          	li	a5,111
    80001eda:	06f68063          	beq	a3,a5,80001f3a <_printf_i+0xfe>
    80001ede:	07000793          	li	a5,112
    80001ee2:	faf690e3          	bne	a3,a5,80001e82 <_printf_i+0x46>
    80001ee6:	419c                	lw	a5,0(a1)
    80001ee8:	0a07e793          	ori	a5,a5,160
    80001eec:	c19c                	sw	a5,0(a1)
    80001eee:	a809                	j	80001f00 <_printf_i+0xc4>
    80001ef0:	07500793          	li	a5,117
    80001ef4:	04f68363          	beq	a3,a5,80001f3a <_printf_i+0xfe>
    80001ef8:	07800793          	li	a5,120
    80001efc:	f8f693e3          	bne	a3,a5,80001e82 <_printf_i+0x46>
    80001f00:	07800793          	li	a5,120
    80001f04:	04f402a3          	sb	a5,69(s0)
    80001f08:	ffffe697          	auipc	a3,0xffffe
    80001f0c:	57868693          	addi	a3,a3,1400 # 80000480 <__sf_fake_stdout+0x68>
    80001f10:	a8c5                	j	80002000 <_printf_i+0x1c4>
    80001f12:	631c                	ld	a5,0(a4)
    80001f14:	04258493          	addi	s1,a1,66
    80001f18:	00878693          	addi	a3,a5,8
    80001f1c:	439c                	lw	a5,0(a5)
    80001f1e:	e314                	sd	a3,0(a4)
    80001f20:	04f58123          	sb	a5,66(a1)
    80001f24:	4785                	li	a5,1
    80001f26:	a241                	j	800020a6 <_printf_i+0x26a>
    80001f28:	0406f693          	andi	a3,a3,64
    80001f2c:	e30c                	sd	a1,0(a4)
    80001f2e:	c681                	beqz	a3,80001f36 <_printf_i+0xfa>
    80001f30:	00079783          	lh	a5,0(a5)
    80001f34:	bfad                	j	80001eae <_printf_i+0x72>
    80001f36:	439c                	lw	a5,0(a5)
    80001f38:	bf9d                	j	80001eae <_printf_i+0x72>
    80001f3a:	400c                	lw	a1,0(s0)
    80001f3c:	631c                	ld	a5,0(a4)
    80001f3e:	0805f813          	andi	a6,a1,128
    80001f42:	00878513          	addi	a0,a5,8
    80001f46:	08080c63          	beqz	a6,80001fde <_printf_i+0x1a2>
    80001f4a:	639c                	ld	a5,0(a5)
    80001f4c:	e308                	sd	a0,0(a4)
    80001f4e:	06f00713          	li	a4,111
    80001f52:	0ee68a63          	beq	a3,a4,80002046 <_printf_i+0x20a>
    80001f56:	ffffe697          	auipc	a3,0xffffe
    80001f5a:	51268693          	addi	a3,a3,1298 # 80000468 <__sf_fake_stdout+0x50>
    80001f5e:	4729                	li	a4,10
    80001f60:	040401a3          	sb	zero,67(s0)
    80001f64:	404c                	lw	a1,4(s0)
    80001f66:	c40c                	sw	a1,8(s0)
    80001f68:	0005c563          	bltz	a1,80001f72 <_printf_i+0x136>
    80001f6c:	4008                	lw	a0,0(s0)
    80001f6e:	996d                	andi	a0,a0,-5
    80001f70:	c008                	sw	a0,0(s0)
    80001f72:	e399                	bnez	a5,80001f78 <_printf_i+0x13c>
    80001f74:	84b2                	mv	s1,a2
    80001f76:	cd91                	beqz	a1,80001f92 <_printf_i+0x156>
    80001f78:	84b2                	mv	s1,a2
    80001f7a:	02e7f5b3          	remu	a1,a5,a4
    80001f7e:	14fd                	addi	s1,s1,-1
    80001f80:	95b6                	add	a1,a1,a3
    80001f82:	0005c583          	lbu	a1,0(a1)
    80001f86:	00b48023          	sb	a1,0(s1)
    80001f8a:	02e7d5b3          	divu	a1,a5,a4
    80001f8e:	0ce7f263          	bgeu	a5,a4,80002052 <_printf_i+0x216>
    80001f92:	47a1                	li	a5,8
    80001f94:	00f71e63          	bne	a4,a5,80001fb0 <_printf_i+0x174>
    80001f98:	401c                	lw	a5,0(s0)
    80001f9a:	8b85                	andi	a5,a5,1
    80001f9c:	cb91                	beqz	a5,80001fb0 <_printf_i+0x174>
    80001f9e:	4058                	lw	a4,4(s0)
    80001fa0:	481c                	lw	a5,16(s0)
    80001fa2:	00e7c763          	blt	a5,a4,80001fb0 <_printf_i+0x174>
    80001fa6:	03000793          	li	a5,48
    80001faa:	fef48fa3          	sb	a5,-1(s1)
    80001fae:	14fd                	addi	s1,s1,-1
    80001fb0:	8e05                	sub	a2,a2,s1
    80001fb2:	c810                	sw	a2,16(s0)
    80001fb4:	8752                	mv	a4,s4
    80001fb6:	86ce                	mv	a3,s3
    80001fb8:	0070                	addi	a2,sp,12
    80001fba:	85a2                	mv	a1,s0
    80001fbc:	854a                	mv	a0,s2
    80001fbe:	d5bff0ef          	jal	ra,80001d18 <_printf_common>
    80001fc2:	5afd                	li	s5,-1
    80001fc4:	0f551563          	bne	a0,s5,800020ae <_printf_i+0x272>
    80001fc8:	557d                	li	a0,-1
    80001fca:	60a6                	ld	ra,72(sp)
    80001fcc:	6406                	ld	s0,64(sp)
    80001fce:	74e2                	ld	s1,56(sp)
    80001fd0:	7942                	ld	s2,48(sp)
    80001fd2:	79a2                	ld	s3,40(sp)
    80001fd4:	7a02                	ld	s4,32(sp)
    80001fd6:	6ae2                	ld	s5,24(sp)
    80001fd8:	6b42                	ld	s6,16(sp)
    80001fda:	6161                	addi	sp,sp,80
    80001fdc:	8082                	ret
    80001fde:	439c                	lw	a5,0(a5)
    80001fe0:	0405f593          	andi	a1,a1,64
    80001fe4:	e308                	sd	a0,0(a4)
    80001fe6:	c581                	beqz	a1,80001fee <_printf_i+0x1b2>
    80001fe8:	17c2                	slli	a5,a5,0x30
    80001fea:	93c1                	srli	a5,a5,0x30
    80001fec:	b78d                	j	80001f4e <_printf_i+0x112>
    80001fee:	1782                	slli	a5,a5,0x20
    80001ff0:	9381                	srli	a5,a5,0x20
    80001ff2:	bfb1                	j	80001f4e <_printf_i+0x112>
    80001ff4:	04d582a3          	sb	a3,69(a1)
    80001ff8:	ffffe697          	auipc	a3,0xffffe
    80001ffc:	47068693          	addi	a3,a3,1136 # 80000468 <__sf_fake_stdout+0x50>
    80002000:	400c                	lw	a1,0(s0)
    80002002:	631c                	ld	a5,0(a4)
    80002004:	0805f813          	andi	a6,a1,128
    80002008:	00878513          	addi	a0,a5,8
    8000200c:	02080163          	beqz	a6,8000202e <_printf_i+0x1f2>
    80002010:	639c                	ld	a5,0(a5)
    80002012:	e308                	sd	a0,0(a4)
    80002014:	0015f713          	andi	a4,a1,1
    80002018:	c701                	beqz	a4,80002020 <_printf_i+0x1e4>
    8000201a:	0205e593          	ori	a1,a1,32
    8000201e:	c00c                	sw	a1,0(s0)
    80002020:	4741                	li	a4,16
    80002022:	ff9d                	bnez	a5,80001f60 <_printf_i+0x124>
    80002024:	400c                	lw	a1,0(s0)
    80002026:	fdf5f593          	andi	a1,a1,-33
    8000202a:	c00c                	sw	a1,0(s0)
    8000202c:	bf15                	j	80001f60 <_printf_i+0x124>
    8000202e:	439c                	lw	a5,0(a5)
    80002030:	0405f813          	andi	a6,a1,64
    80002034:	e308                	sd	a0,0(a4)
    80002036:	00080563          	beqz	a6,80002040 <_printf_i+0x204>
    8000203a:	17c2                	slli	a5,a5,0x30
    8000203c:	93c1                	srli	a5,a5,0x30
    8000203e:	bfd9                	j	80002014 <_printf_i+0x1d8>
    80002040:	1782                	slli	a5,a5,0x20
    80002042:	9381                	srli	a5,a5,0x20
    80002044:	bfc1                	j	80002014 <_printf_i+0x1d8>
    80002046:	ffffe697          	auipc	a3,0xffffe
    8000204a:	42268693          	addi	a3,a3,1058 # 80000468 <__sf_fake_stdout+0x50>
    8000204e:	4721                	li	a4,8
    80002050:	bf01                	j	80001f60 <_printf_i+0x124>
    80002052:	87ae                	mv	a5,a1
    80002054:	b71d                	j	80001f7a <_printf_i+0x13e>
    80002056:	4194                	lw	a3,0(a1)
    80002058:	631c                	ld	a5,0(a4)
    8000205a:	49cc                	lw	a1,20(a1)
    8000205c:	0806f813          	andi	a6,a3,128
    80002060:	00878513          	addi	a0,a5,8
    80002064:	00080963          	beqz	a6,80002076 <_printf_i+0x23a>
    80002068:	e308                	sd	a0,0(a4)
    8000206a:	639c                	ld	a5,0(a5)
    8000206c:	e38c                	sd	a1,0(a5)
    8000206e:	00042823          	sw	zero,16(s0)
    80002072:	84b2                	mv	s1,a2
    80002074:	b781                	j	80001fb4 <_printf_i+0x178>
    80002076:	e308                	sd	a0,0(a4)
    80002078:	0406f693          	andi	a3,a3,64
    8000207c:	639c                	ld	a5,0(a5)
    8000207e:	c681                	beqz	a3,80002086 <_printf_i+0x24a>
    80002080:	00b79023          	sh	a1,0(a5)
    80002084:	b7ed                	j	8000206e <_printf_i+0x232>
    80002086:	c38c                	sw	a1,0(a5)
    80002088:	b7dd                	j	8000206e <_printf_i+0x232>
    8000208a:	631c                	ld	a5,0(a4)
    8000208c:	41d0                	lw	a2,4(a1)
    8000208e:	4581                	li	a1,0
    80002090:	00878693          	addi	a3,a5,8
    80002094:	e314                	sd	a3,0(a4)
    80002096:	6384                	ld	s1,0(a5)
    80002098:	8526                	mv	a0,s1
    8000209a:	c61ff0ef          	jal	ra,80001cfa <memchr>
    8000209e:	c119                	beqz	a0,800020a4 <_printf_i+0x268>
    800020a0:	8d05                	sub	a0,a0,s1
    800020a2:	c048                	sw	a0,4(s0)
    800020a4:	405c                	lw	a5,4(s0)
    800020a6:	c81c                	sw	a5,16(s0)
    800020a8:	040401a3          	sb	zero,67(s0)
    800020ac:	b721                	j	80001fb4 <_printf_i+0x178>
    800020ae:	4814                	lw	a3,16(s0)
    800020b0:	8626                	mv	a2,s1
    800020b2:	85ce                	mv	a1,s3
    800020b4:	854a                	mv	a0,s2
    800020b6:	9a02                	jalr	s4
    800020b8:	f15508e3          	beq	a0,s5,80001fc8 <_printf_i+0x18c>
    800020bc:	401c                	lw	a5,0(s0)
    800020be:	8b89                	andi	a5,a5,2
    800020c0:	eb95                	bnez	a5,800020f4 <_printf_i+0x2b8>
    800020c2:	47b2                	lw	a5,12(sp)
    800020c4:	4448                	lw	a0,12(s0)
    800020c6:	0007871b          	sext.w	a4,a5
    800020ca:	0005069b          	sext.w	a3,a0
    800020ce:	00e6d363          	bge	a3,a4,800020d4 <_printf_i+0x298>
    800020d2:	853e                	mv	a0,a5
    800020d4:	2501                	sext.w	a0,a0
    800020d6:	bdd5                	j	80001fca <_printf_i+0x18e>
    800020d8:	4685                	li	a3,1
    800020da:	8656                	mv	a2,s5
    800020dc:	85ce                	mv	a1,s3
    800020de:	854a                	mv	a0,s2
    800020e0:	9a02                	jalr	s4
    800020e2:	ef6503e3          	beq	a0,s6,80001fc8 <_printf_i+0x18c>
    800020e6:	2485                	addiw	s1,s1,1
    800020e8:	445c                	lw	a5,12(s0)
    800020ea:	4732                	lw	a4,12(sp)
    800020ec:	9f99                	subw	a5,a5,a4
    800020ee:	fef4c5e3          	blt	s1,a5,800020d8 <_printf_i+0x29c>
    800020f2:	bfc1                	j	800020c2 <_printf_i+0x286>
    800020f4:	4481                	li	s1,0
    800020f6:	01940a93          	addi	s5,s0,25
    800020fa:	5b7d                	li	s6,-1
    800020fc:	b7f5                	j	800020e8 <_printf_i+0x2ac>

00000000800020fe <_read_r>:
_read_r():
    800020fe:	1141                	addi	sp,sp,-16
    80002100:	e022                	sd	s0,0(sp)
    80002102:	842a                	mv	s0,a0
    80002104:	852e                	mv	a0,a1
    80002106:	85b2                	mv	a1,a2
    80002108:	8636                	mv	a2,a3
    8000210a:	9601a023          	sw	zero,-1696(gp) # 800076c8 <errno>
    8000210e:	e406                	sd	ra,8(sp)
    80002110:	2b6040ef          	jal	ra,800063c6 <_read>
    80002114:	57fd                	li	a5,-1
    80002116:	00f51763          	bne	a0,a5,80002124 <_read_r+0x26>
    8000211a:	96018793          	addi	a5,gp,-1696 # 800076c8 <errno>
    8000211e:	439c                	lw	a5,0(a5)
    80002120:	c391                	beqz	a5,80002124 <_read_r+0x26>
    80002122:	c01c                	sw	a5,0(s0)
    80002124:	60a2                	ld	ra,8(sp)
    80002126:	6402                	ld	s0,0(sp)
    80002128:	0141                	addi	sp,sp,16
    8000212a:	8082                	ret

000000008000212c <__metal_driver_sifive_clint0_control_base>:
__metal_driver_sifive_clint0_control_base():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:150
/* --------------------- fixed_factor_clock ------------ */


/* --------------------- sifive_clint0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_clint0_control_base(struct metal_interrupt *controller)
{
    8000212c:	1101                	addi	sp,sp,-32
    8000212e:	ec22                	sd	s0,24(sp)
    80002130:	1000                	addi	s0,sp,32
    80002132:	fea43423          	sd	a0,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:151
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
    80002136:	fe843703          	ld	a4,-24(s0)
    8000213a:	00005797          	auipc	a5,0x5
    8000213e:	82678793          	addi	a5,a5,-2010 # 80006960 <__metal_dt_clint_2000000>
    80002142:	00f71563          	bne	a4,a5,8000214c <__metal_driver_sifive_clint0_control_base+0x20>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:152
		return METAL_RISCV_CLINT0_2000000_BASE_ADDRESS;
    80002146:	020007b7          	lui	a5,0x2000
    8000214a:	a011                	j	8000214e <__metal_driver_sifive_clint0_control_base+0x22>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:155
	}
	else {
		return 0;
    8000214c:	4781                	li	a5,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:157
	}
}
    8000214e:	853e                	mv	a0,a5
    80002150:	6462                	ld	s0,24(sp)
    80002152:	6105                	addi	sp,sp,32
    80002154:	8082                	ret

0000000080002156 <__metal_driver_sifive_clint0_num_interrupts>:
__metal_driver_sifive_clint0_num_interrupts():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:170
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_clint0_num_interrupts(struct metal_interrupt *controller)
{
    80002156:	1101                	addi	sp,sp,-32
    80002158:	ec22                	sd	s0,24(sp)
    8000215a:	1000                	addi	s0,sp,32
    8000215c:	fea43423          	sd	a0,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:171
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
    80002160:	fe843703          	ld	a4,-24(s0)
    80002164:	00004797          	auipc	a5,0x4
    80002168:	7fc78793          	addi	a5,a5,2044 # 80006960 <__metal_dt_clint_2000000>
    8000216c:	00f71463          	bne	a4,a5,80002174 <__metal_driver_sifive_clint0_num_interrupts+0x1e>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:172
		return METAL_MAX_CLINT_INTERRUPTS;
    80002170:	4789                	li	a5,2
    80002172:	a011                	j	80002176 <__metal_driver_sifive_clint0_num_interrupts+0x20>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:175
	}
	else {
		return 0;
    80002174:	4781                	li	a5,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:177
	}
}
    80002176:	853e                	mv	a0,a5
    80002178:	6462                	ld	s0,24(sp)
    8000217a:	6105                	addi	sp,sp,32
    8000217c:	8082                	ret

000000008000217e <__metal_driver_sifive_clint0_interrupt_parents>:
__metal_driver_sifive_clint0_interrupt_parents():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:180

static __inline__ struct metal_interrupt * __metal_driver_sifive_clint0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
    8000217e:	1101                	addi	sp,sp,-32
    80002180:	ec22                	sd	s0,24(sp)
    80002182:	1000                	addi	s0,sp,32
    80002184:	fea43423          	sd	a0,-24(s0)
    80002188:	87ae                	mv	a5,a1
    8000218a:	fef42223          	sw	a5,-28(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:181
	if (idx == 0) {
    8000218e:	fe442783          	lw	a5,-28(s0)
    80002192:	2781                	sext.w	a5,a5
    80002194:	e791                	bnez	a5,800021a0 <__metal_driver_sifive_clint0_interrupt_parents+0x22>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:182
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
    80002196:	00004797          	auipc	a5,0x4
    8000219a:	7ea78793          	addi	a5,a5,2026 # 80006980 <__metal_dt_cpu_0_interrupt_controller>
    8000219e:	a831                	j	800021ba <__metal_driver_sifive_clint0_interrupt_parents+0x3c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:184
	}
	else if (idx == 1) {
    800021a0:	fe442783          	lw	a5,-28(s0)
    800021a4:	0007871b          	sext.w	a4,a5
    800021a8:	4785                	li	a5,1
    800021aa:	00f71763          	bne	a4,a5,800021b8 <__metal_driver_sifive_clint0_interrupt_parents+0x3a>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:185
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
    800021ae:	00004797          	auipc	a5,0x4
    800021b2:	7d278793          	addi	a5,a5,2002 # 80006980 <__metal_dt_cpu_0_interrupt_controller>
    800021b6:	a011                	j	800021ba <__metal_driver_sifive_clint0_interrupt_parents+0x3c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:188
	}
	else {
		return NULL;
    800021b8:	4781                	li	a5,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:190
	}
}
    800021ba:	853e                	mv	a0,a5
    800021bc:	6462                	ld	s0,24(sp)
    800021be:	6105                	addi	sp,sp,32
    800021c0:	8082                	ret

00000000800021c2 <__metal_driver_sifive_clint0_interrupt_lines>:
__metal_driver_sifive_clint0_interrupt_lines():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:193

static __inline__ int __metal_driver_sifive_clint0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
    800021c2:	1101                	addi	sp,sp,-32
    800021c4:	ec22                	sd	s0,24(sp)
    800021c6:	1000                	addi	s0,sp,32
    800021c8:	fea43423          	sd	a0,-24(s0)
    800021cc:	87ae                	mv	a5,a1
    800021ce:	fef42223          	sw	a5,-28(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:194
	if (idx == 0) {
    800021d2:	fe442783          	lw	a5,-28(s0)
    800021d6:	2781                	sext.w	a5,a5
    800021d8:	e399                	bnez	a5,800021de <__metal_driver_sifive_clint0_interrupt_lines+0x1c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:195
		return 3;
    800021da:	478d                	li	a5,3
    800021dc:	a819                	j	800021f2 <__metal_driver_sifive_clint0_interrupt_lines+0x30>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:197
	}
	else if (idx == 1) {
    800021de:	fe442783          	lw	a5,-28(s0)
    800021e2:	0007871b          	sext.w	a4,a5
    800021e6:	4785                	li	a5,1
    800021e8:	00f71463          	bne	a4,a5,800021f0 <__metal_driver_sifive_clint0_interrupt_lines+0x2e>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:198
		return 7;
    800021ec:	479d                	li	a5,7
    800021ee:	a011                	j	800021f2 <__metal_driver_sifive_clint0_interrupt_lines+0x30>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:201
	}
	else {
		return 0;
    800021f0:	4781                	li	a5,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:203
	}
}
    800021f2:	853e                	mv	a0,a5
    800021f4:	6462                	ld	s0,24(sp)
    800021f6:	6105                	addi	sp,sp,32
    800021f8:	8082                	ret

00000000800021fa <__metal_clint0_mtime_get>:
__metal_clint0_mtime_get():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:14
#include <metal/drivers/riscv_clint0.h>
#include <metal/io.h>
#include <metal/machine.h>

unsigned long long
__metal_clint0_mtime_get(struct __metal_driver_riscv_clint0 *clint) {
    800021fa:	7179                	addi	sp,sp,-48
    800021fc:	f406                	sd	ra,40(sp)
    800021fe:	f022                	sd	s0,32(sp)
    80002200:	1800                	addi	s0,sp,48
    80002202:	fca43c23          	sd	a0,-40(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:17
    __metal_io_u32 lo, hi;
    unsigned long control_base =
        __metal_driver_sifive_clint0_control_base(&clint->controller);
    80002206:	fd843783          	ld	a5,-40(s0)
    8000220a:	853e                	mv	a0,a5
    8000220c:	f21ff0ef          	jal	ra,8000212c <__metal_driver_sifive_clint0_control_base>
    80002210:	fea43423          	sd	a0,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:21 (discriminator 1)

    /* Guard against rollover when reading */
    do {
        hi = __METAL_ACCESS_ONCE(
    80002214:	fe843703          	ld	a4,-24(s0)
    80002218:	67b1                	lui	a5,0xc
    8000221a:	17f1                	addi	a5,a5,-4
    8000221c:	97ba                	add	a5,a5,a4
    8000221e:	439c                	lw	a5,0(a5)
    80002220:	fef42223          	sw	a5,-28(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:23 (discriminator 1)
            (__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4));
        lo = __METAL_ACCESS_ONCE(
    80002224:	fe843703          	ld	a4,-24(s0)
    80002228:	67b1                	lui	a5,0xc
    8000222a:	17e1                	addi	a5,a5,-8
    8000222c:	97ba                	add	a5,a5,a4
    8000222e:	439c                	lw	a5,0(a5)
    80002230:	fef42023          	sw	a5,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:25 (discriminator 1)
            (__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME));
    } while (__METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
    80002234:	fe843703          	ld	a4,-24(s0)
    80002238:	67b1                	lui	a5,0xc
    8000223a:	17f1                	addi	a5,a5,-4
    8000223c:	97ba                	add	a5,a5,a4
    8000223e:	439c                	lw	a5,0(a5)
    80002240:	0007871b          	sext.w	a4,a5
    80002244:	fe442783          	lw	a5,-28(s0)
    80002248:	2781                	sext.w	a5,a5
    8000224a:	fce795e3          	bne	a5,a4,80002214 <__metal_clint0_mtime_get+0x1a>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:29
                                                    METAL_RISCV_CLINT0_MTIME +
                                                    4)) != hi);

    return (((unsigned long long)hi) << 32) | lo;
    8000224e:	fe446783          	lwu	a5,-28(s0)
    80002252:	02079713          	slli	a4,a5,0x20
    80002256:	fe046783          	lwu	a5,-32(s0)
    8000225a:	8fd9                	or	a5,a5,a4
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:30
}
    8000225c:	853e                	mv	a0,a5
    8000225e:	70a2                	ld	ra,40(sp)
    80002260:	7402                	ld	s0,32(sp)
    80002262:	6145                	addi	sp,sp,48
    80002264:	8082                	ret

0000000080002266 <__metal_driver_riscv_clint0_mtimecmp_set>:
__metal_driver_riscv_clint0_mtimecmp_set():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:34

int __metal_driver_riscv_clint0_mtimecmp_set(struct metal_interrupt *controller,
                                             int hartid,
                                             unsigned long long time) {
    80002266:	7139                	addi	sp,sp,-64
    80002268:	fc06                	sd	ra,56(sp)
    8000226a:	f822                	sd	s0,48(sp)
    8000226c:	0080                	addi	s0,sp,64
    8000226e:	fca43c23          	sd	a0,-40(s0)
    80002272:	87ae                	mv	a5,a1
    80002274:	fcc43423          	sd	a2,-56(s0)
    80002278:	fcf42a23          	sw	a5,-44(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:35
    struct __metal_driver_riscv_clint0 *clint =
    8000227c:	fd843783          	ld	a5,-40(s0)
    80002280:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:38
        (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base =
        __metal_driver_sifive_clint0_control_base(&clint->controller);
    80002284:	fe843783          	ld	a5,-24(s0)
    80002288:	853e                	mv	a0,a5
    8000228a:	ea3ff0ef          	jal	ra,8000212c <__metal_driver_sifive_clint0_control_base>
    8000228e:	fea43023          	sd	a0,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:45
     * and are NOT internally latched for multiword transfers.
     * Need to be careful about sequencing to avoid triggering
     * spurious interrupts: For that set the high word to a max
     * value first.
     */
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) +
    80002292:	fd442783          	lw	a5,-44(s0)
    80002296:	0037979b          	slliw	a5,a5,0x3
    8000229a:	2781                	sext.w	a5,a5
    8000229c:	873e                	mv	a4,a5
    8000229e:	fe043783          	ld	a5,-32(s0)
    800022a2:	973e                	add	a4,a4,a5
    800022a4:	6791                	lui	a5,0x4
    800022a6:	0791                	addi	a5,a5,4
    800022a8:	97ba                	add	a5,a5,a4
    800022aa:	873e                	mv	a4,a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:47
                                           METAL_RISCV_CLINT0_MTIMECMP_BASE +
                                           4)) = 0xFFFFFFFF;
    800022ac:	57fd                	li	a5,-1
    800022ae:	c31c                	sw	a5,0(a4)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:48
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) +
    800022b0:	fd442783          	lw	a5,-44(s0)
    800022b4:	0037979b          	slliw	a5,a5,0x3
    800022b8:	2781                	sext.w	a5,a5
    800022ba:	873e                	mv	a4,a5
    800022bc:	fe043783          	ld	a5,-32(s0)
    800022c0:	973e                	add	a4,a4,a5
    800022c2:	6791                	lui	a5,0x4
    800022c4:	97ba                	add	a5,a5,a4
    800022c6:	873e                	mv	a4,a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:50
                                           METAL_RISCV_CLINT0_MTIMECMP_BASE)) =
        (__metal_io_u32)time;
    800022c8:	fc843783          	ld	a5,-56(s0)
    800022cc:	2781                	sext.w	a5,a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:49
                                           METAL_RISCV_CLINT0_MTIMECMP_BASE)) =
    800022ce:	c31c                	sw	a5,0(a4)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:53
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) +
                                           METAL_RISCV_CLINT0_MTIMECMP_BASE +
                                           4)) = (__metal_io_u32)(time >> 32);
    800022d0:	fc843783          	ld	a5,-56(s0)
    800022d4:	0207d693          	srli	a3,a5,0x20
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:51
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) +
    800022d8:	fd442783          	lw	a5,-44(s0)
    800022dc:	0037979b          	slliw	a5,a5,0x3
    800022e0:	2781                	sext.w	a5,a5
    800022e2:	873e                	mv	a4,a5
    800022e4:	fe043783          	ld	a5,-32(s0)
    800022e8:	973e                	add	a4,a4,a5
    800022ea:	6791                	lui	a5,0x4
    800022ec:	0791                	addi	a5,a5,4
    800022ee:	97ba                	add	a5,a5,a4
    800022f0:	873e                	mv	a4,a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:53
                                           4)) = (__metal_io_u32)(time >> 32);
    800022f2:	0006879b          	sext.w	a5,a3
    800022f6:	c31c                	sw	a5,0(a4)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:54
    return 0;
    800022f8:	4781                	li	a5,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:55
}
    800022fa:	853e                	mv	a0,a5
    800022fc:	70e2                	ld	ra,56(sp)
    800022fe:	7442                	ld	s0,48(sp)
    80002300:	6121                	addi	sp,sp,64
    80002302:	8082                	ret

0000000080002304 <_get_cpu_intc>:
_get_cpu_intc():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:57

static struct metal_interrupt *_get_cpu_intc() {
    80002304:	1101                	addi	sp,sp,-32
    80002306:	ec06                	sd	ra,24(sp)
    80002308:	e822                	sd	s0,16(sp)
    8000230a:	1000                	addi	s0,sp,32
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:58
    int hartid = 0;
    8000230c:	fe042623          	sw	zero,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:59
    __asm__ volatile("csrr %[hartid], mhartid"
    80002310:	f14027f3          	csrr	a5,mhartid
    80002314:	fef42623          	sw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:62
                     : [hartid] "=r"(hartid)::"memory");

    struct metal_cpu *cpu = metal_cpu_get(hartid);
    80002318:	fec42783          	lw	a5,-20(s0)
    8000231c:	853e                	mv	a0,a5
    8000231e:	299030ef          	jal	ra,80005db6 <metal_cpu_get>
    80002322:	fea43023          	sd	a0,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:64

    return metal_cpu_interrupt_controller(cpu);
    80002326:	fe043503          	ld	a0,-32(s0)
    8000232a:	267030ef          	jal	ra,80005d90 <metal_cpu_interrupt_controller>
    8000232e:	87aa                	mv	a5,a0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65
}
    80002330:	853e                	mv	a0,a5
    80002332:	60e2                	ld	ra,24(sp)
    80002334:	6442                	ld	s0,16(sp)
    80002336:	6105                	addi	sp,sp,32
    80002338:	8082                	ret

000000008000233a <__metal_driver_riscv_clint0_init>:
__metal_driver_riscv_clint0_init():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:67

void __metal_driver_riscv_clint0_init(struct metal_interrupt *controller) {
    8000233a:	7139                	addi	sp,sp,-64
    8000233c:	fc06                	sd	ra,56(sp)
    8000233e:	f822                	sd	s0,48(sp)
    80002340:	0080                	addi	s0,sp,64
    80002342:	fca43423          	sd	a0,-56(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:69
    int num_interrupts =
        __metal_driver_sifive_clint0_num_interrupts(controller);
    80002346:	fc843503          	ld	a0,-56(s0)
    8000234a:	e0dff0ef          	jal	ra,80002156 <__metal_driver_sifive_clint0_num_interrupts>
    8000234e:	87aa                	mv	a5,a0
    80002350:	fef42423          	sw	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:70
    struct __metal_driver_riscv_clint0 *clint =
    80002354:	fc843783          	ld	a5,-56(s0)
    80002358:	fef43023          	sd	a5,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:73
        (struct __metal_driver_riscv_clint0 *)(controller);

    if (!clint->init_done) {
    8000235c:	fe043783          	ld	a5,-32(s0)
    80002360:	479c                	lw	a5,8(a5)
    80002362:	e7ad                	bnez	a5,800023cc <__metal_driver_riscv_clint0_init+0x92>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:76
        /* Register its interrupts with with parent controller, aka sw and
         * timerto its default isr */
        for (int i = 0; i < num_interrupts; i++) {
    80002364:	fe042623          	sw	zero,-20(s0)
    80002368:	a0b1                	j	800023b4 <__metal_driver_riscv_clint0_init+0x7a>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:78 (discriminator 3)
            struct metal_interrupt *intc =
                __metal_driver_sifive_clint0_interrupt_parents(controller, i);
    8000236a:	fec42783          	lw	a5,-20(s0)
    8000236e:	85be                	mv	a1,a5
    80002370:	fc843503          	ld	a0,-56(s0)
    80002374:	e0bff0ef          	jal	ra,8000217e <__metal_driver_sifive_clint0_interrupt_parents>
    80002378:	fca43c23          	sd	a0,-40(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:80 (discriminator 3)
            int line =
                __metal_driver_sifive_clint0_interrupt_lines(controller, i);
    8000237c:	fec42783          	lw	a5,-20(s0)
    80002380:	85be                	mv	a1,a5
    80002382:	fc843503          	ld	a0,-56(s0)
    80002386:	e3dff0ef          	jal	ra,800021c2 <__metal_driver_sifive_clint0_interrupt_lines>
    8000238a:	87aa                	mv	a5,a0
    8000238c:	fcf42a23          	sw	a5,-44(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:81 (discriminator 3)
            intc->vtable->interrupt_register(intc, line, NULL, controller);
    80002390:	fd843783          	ld	a5,-40(s0)
    80002394:	639c                	ld	a5,0(a5)
    80002396:	7f98                	ld	a4,56(a5)
    80002398:	fd442783          	lw	a5,-44(s0)
    8000239c:	fc843683          	ld	a3,-56(s0)
    800023a0:	4601                	li	a2,0
    800023a2:	85be                	mv	a1,a5
    800023a4:	fd843503          	ld	a0,-40(s0)
    800023a8:	9702                	jalr	a4
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:76 (discriminator 3)
        for (int i = 0; i < num_interrupts; i++) {
    800023aa:	fec42783          	lw	a5,-20(s0)
    800023ae:	2785                	addiw	a5,a5,1
    800023b0:	fef42623          	sw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:76 (discriminator 1)
    800023b4:	fec42703          	lw	a4,-20(s0)
    800023b8:	fe842783          	lw	a5,-24(s0)
    800023bc:	2701                	sext.w	a4,a4
    800023be:	2781                	sext.w	a5,a5
    800023c0:	faf745e3          	blt	a4,a5,8000236a <__metal_driver_riscv_clint0_init+0x30>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:83
        }
        clint->init_done = 1;
    800023c4:	fe043783          	ld	a5,-32(s0)
    800023c8:	4705                	li	a4,1
    800023ca:	c798                	sw	a4,8(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:85
    }
}
    800023cc:	0001                	nop
    800023ce:	70e2                	ld	ra,56(sp)
    800023d0:	7442                	ld	s0,48(sp)
    800023d2:	6121                	addi	sp,sp,64
    800023d4:	8082                	ret

00000000800023d6 <__metal_driver_riscv_clint0_register>:
__metal_driver_riscv_clint0_register():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:89

int __metal_driver_riscv_clint0_register(struct metal_interrupt *controller,
                                         int id, metal_interrupt_handler_t isr,
                                         void *priv) {
    800023d6:	711d                	addi	sp,sp,-96
    800023d8:	ec86                	sd	ra,88(sp)
    800023da:	e8a2                	sd	s0,80(sp)
    800023dc:	1080                	addi	s0,sp,96
    800023de:	faa43c23          	sd	a0,-72(s0)
    800023e2:	87ae                	mv	a5,a1
    800023e4:	fac43423          	sd	a2,-88(s0)
    800023e8:	fad43023          	sd	a3,-96(s0)
    800023ec:	faf42a23          	sw	a5,-76(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:90
    int rc = -1;
    800023f0:	57fd                	li	a5,-1
    800023f2:	fef42623          	sw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91
    metal_vector_mode mode = __metal_controller_interrupt_vector_mode();
    800023f6:	4e4010ef          	jal	ra,800038da <__metal_controller_interrupt_vector_mode>
    800023fa:	87aa                	mv	a5,a0
    800023fc:	fcf42c23          	sw	a5,-40(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:92
    struct metal_interrupt *intc = NULL;
    80002400:	fe043023          	sd	zero,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:93
    struct metal_interrupt *cpu_intc = _get_cpu_intc();
    80002404:	f01ff0ef          	jal	ra,80002304 <_get_cpu_intc>
    80002408:	fca43823          	sd	a0,-48(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:95
    int num_interrupts =
        __metal_driver_sifive_clint0_num_interrupts(controller);
    8000240c:	fb843503          	ld	a0,-72(s0)
    80002410:	d47ff0ef          	jal	ra,80002156 <__metal_driver_sifive_clint0_num_interrupts>
    80002414:	87aa                	mv	a5,a0
    80002416:	fcf42623          	sw	a5,-52(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:97

    if ((mode != METAL_VECTOR_MODE) && (mode != METAL_DIRECT_MODE)) {
    8000241a:	fd842783          	lw	a5,-40(s0)
    8000241e:	0007871b          	sext.w	a4,a5
    80002422:	4785                	li	a5,1
    80002424:	00f70963          	beq	a4,a5,80002436 <__metal_driver_riscv_clint0_register+0x60>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:97 (discriminator 1)
    80002428:	fd842783          	lw	a5,-40(s0)
    8000242c:	2781                	sext.w	a5,a5
    8000242e:	c781                	beqz	a5,80002436 <__metal_driver_riscv_clint0_register+0x60>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:98
        return rc;
    80002430:	fec42783          	lw	a5,-20(s0)
    80002434:	a861                	j	800024cc <__metal_driver_riscv_clint0_register+0xf6>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:101
    }

    for (int i = 0; i < num_interrupts; i++) {
    80002436:	fc042e23          	sw	zero,-36(s0)
    8000243a:	a889                	j	8000248c <__metal_driver_riscv_clint0_register+0xb6>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:102
        int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
    8000243c:	fdc42783          	lw	a5,-36(s0)
    80002440:	85be                	mv	a1,a5
    80002442:	fb843503          	ld	a0,-72(s0)
    80002446:	d7dff0ef          	jal	ra,800021c2 <__metal_driver_sifive_clint0_interrupt_lines>
    8000244a:	87aa                	mv	a5,a0
    8000244c:	fcf42423          	sw	a5,-56(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:103
        intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
    80002450:	fdc42783          	lw	a5,-36(s0)
    80002454:	85be                	mv	a1,a5
    80002456:	fb843503          	ld	a0,-72(s0)
    8000245a:	d25ff0ef          	jal	ra,8000217e <__metal_driver_sifive_clint0_interrupt_parents>
    8000245e:	fea43023          	sd	a0,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:104
        if (cpu_intc == intc && id == line) {
    80002462:	fd043703          	ld	a4,-48(s0)
    80002466:	fe043783          	ld	a5,-32(s0)
    8000246a:	00f71a63          	bne	a4,a5,8000247e <__metal_driver_riscv_clint0_register+0xa8>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:104 (discriminator 1)
    8000246e:	fb442703          	lw	a4,-76(s0)
    80002472:	fc842783          	lw	a5,-56(s0)
    80002476:	2701                	sext.w	a4,a4
    80002478:	2781                	sext.w	a5,a5
    8000247a:	02f70263          	beq	a4,a5,8000249e <__metal_driver_riscv_clint0_register+0xc8>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:107 (discriminator 2)
            break;
        }
        intc = NULL;
    8000247e:	fe043023          	sd	zero,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:101 (discriminator 2)
    for (int i = 0; i < num_interrupts; i++) {
    80002482:	fdc42783          	lw	a5,-36(s0)
    80002486:	2785                	addiw	a5,a5,1
    80002488:	fcf42e23          	sw	a5,-36(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:101 (discriminator 1)
    8000248c:	fdc42703          	lw	a4,-36(s0)
    80002490:	fcc42783          	lw	a5,-52(s0)
    80002494:	2701                	sext.w	a4,a4
    80002496:	2781                	sext.w	a5,a5
    80002498:	faf742e3          	blt	a4,a5,8000243c <__metal_driver_riscv_clint0_register+0x66>
    8000249c:	a011                	j	800024a0 <__metal_driver_riscv_clint0_register+0xca>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:105
            break;
    8000249e:	0001                	nop
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:111
    }

    /* Register its interrupts with parent controller */
    if (intc) {
    800024a0:	fe043783          	ld	a5,-32(s0)
    800024a4:	c395                	beqz	a5,800024c8 <__metal_driver_riscv_clint0_register+0xf2>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:112
        rc = intc->vtable->interrupt_register(intc, id, isr, priv);
    800024a6:	fe043783          	ld	a5,-32(s0)
    800024aa:	639c                	ld	a5,0(a5)
    800024ac:	7f98                	ld	a4,56(a5)
    800024ae:	fb442783          	lw	a5,-76(s0)
    800024b2:	fa043683          	ld	a3,-96(s0)
    800024b6:	fa843603          	ld	a2,-88(s0)
    800024ba:	85be                	mv	a1,a5
    800024bc:	fe043503          	ld	a0,-32(s0)
    800024c0:	9702                	jalr	a4
    800024c2:	87aa                	mv	a5,a0
    800024c4:	fef42623          	sw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:114
    }
    return rc;
    800024c8:	fec42783          	lw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:115
}
    800024cc:	853e                	mv	a0,a5
    800024ce:	60e6                	ld	ra,88(sp)
    800024d0:	6446                	ld	s0,80(sp)
    800024d2:	6125                	addi	sp,sp,96
    800024d4:	8082                	ret

00000000800024d6 <__metal_driver_riscv_clint0_vector_register>:
__metal_driver_riscv_clint0_vector_register():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:119

int __metal_driver_riscv_clint0_vector_register(
    struct metal_interrupt *controller, int id,
    metal_interrupt_vector_handler_t isr, void *priv) {
    800024d6:	7139                	addi	sp,sp,-64
    800024d8:	fc22                	sd	s0,56(sp)
    800024da:	0080                	addi	s0,sp,64
    800024dc:	fca43c23          	sd	a0,-40(s0)
    800024e0:	87ae                	mv	a5,a1
    800024e2:	fcc43423          	sd	a2,-56(s0)
    800024e6:	fcd43023          	sd	a3,-64(s0)
    800024ea:	fcf42a23          	sw	a5,-44(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:121
    /* Not supported. User can override the 'weak' handler with their own */
    int rc = -1;
    800024ee:	57fd                	li	a5,-1
    800024f0:	fef42623          	sw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:122
    return rc;
    800024f4:	fec42783          	lw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:123
}
    800024f8:	853e                	mv	a0,a5
    800024fa:	7462                	ld	s0,56(sp)
    800024fc:	6121                	addi	sp,sp,64
    800024fe:	8082                	ret

0000000080002500 <__metal_driver_riscv_clint0_get_vector_mode>:
__metal_driver_riscv_clint0_get_vector_mode():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:126

metal_vector_mode __metal_driver_riscv_clint0_get_vector_mode(
    struct metal_interrupt *controller) {
    80002500:	1101                	addi	sp,sp,-32
    80002502:	ec06                	sd	ra,24(sp)
    80002504:	e822                	sd	s0,16(sp)
    80002506:	1000                	addi	s0,sp,32
    80002508:	fea43423          	sd	a0,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:127
    return __metal_controller_interrupt_vector_mode();
    8000250c:	3ce010ef          	jal	ra,800038da <__metal_controller_interrupt_vector_mode>
    80002510:	87aa                	mv	a5,a0
    80002512:	2781                	sext.w	a5,a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:128
}
    80002514:	853e                	mv	a0,a5
    80002516:	60e2                	ld	ra,24(sp)
    80002518:	6442                	ld	s0,16(sp)
    8000251a:	6105                	addi	sp,sp,32
    8000251c:	8082                	ret

000000008000251e <__metal_driver_riscv_clint0_set_vector_mode>:
__metal_driver_riscv_clint0_set_vector_mode():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:131

int __metal_driver_riscv_clint0_set_vector_mode(
    struct metal_interrupt *controller, metal_vector_mode mode) {
    8000251e:	7179                	addi	sp,sp,-48
    80002520:	f406                	sd	ra,40(sp)
    80002522:	f022                	sd	s0,32(sp)
    80002524:	1800                	addi	s0,sp,48
    80002526:	fca43c23          	sd	a0,-40(s0)
    8000252a:	87ae                	mv	a5,a1
    8000252c:	fcf42a23          	sw	a5,-44(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:132
    int rc = -1;
    80002530:	57fd                	li	a5,-1
    80002532:	fef42623          	sw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:133
    struct metal_interrupt *intc = _get_cpu_intc();
    80002536:	dcfff0ef          	jal	ra,80002304 <_get_cpu_intc>
    8000253a:	fea43023          	sd	a0,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:135

    if (intc) {
    8000253e:	fe043783          	ld	a5,-32(s0)
    80002542:	c795                	beqz	a5,8000256e <__metal_driver_riscv_clint0_set_vector_mode+0x50>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:138
        /* Valid vector modes are VECTOR and DIRECT, anything else is invalid
         * (-1) */
        switch (mode) {
    80002544:	fd442783          	lw	a5,-44(s0)
    80002548:	0007871b          	sext.w	a4,a5
    8000254c:	4785                	li	a5,1
    8000254e:	02e7e263          	bltu	a5,a4,80002572 <__metal_driver_riscv_clint0_set_vector_mode+0x54>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:141
        case METAL_VECTOR_MODE:
        case METAL_DIRECT_MODE:
            rc = intc->vtable->interrupt_set_vector_mode(intc, mode);
    80002552:	fe043783          	ld	a5,-32(s0)
    80002556:	639c                	ld	a5,0(a5)
    80002558:	6798                	ld	a4,8(a5)
    8000255a:	fd442783          	lw	a5,-44(s0)
    8000255e:	85be                	mv	a1,a5
    80002560:	fe043503          	ld	a0,-32(s0)
    80002564:	9702                	jalr	a4
    80002566:	87aa                	mv	a5,a0
    80002568:	fef42623          	sw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:142
            break;
    8000256c:	a021                	j	80002574 <__metal_driver_riscv_clint0_set_vector_mode+0x56>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:146
        default:
            break;
        }
    }
    8000256e:	0001                	nop
    80002570:	a011                	j	80002574 <__metal_driver_riscv_clint0_set_vector_mode+0x56>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144
            break;
    80002572:	0001                	nop
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147
    return rc;
    80002574:	fec42783          	lw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:148
}
    80002578:	853e                	mv	a0,a5
    8000257a:	70a2                	ld	ra,40(sp)
    8000257c:	7402                	ld	s0,32(sp)
    8000257e:	6145                	addi	sp,sp,48
    80002580:	8082                	ret

0000000080002582 <__metal_driver_riscv_clint0_enable>:
__metal_driver_riscv_clint0_enable():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:151

int __metal_driver_riscv_clint0_enable(struct metal_interrupt *controller,
                                       int id) {
    80002582:	715d                	addi	sp,sp,-80
    80002584:	e486                	sd	ra,72(sp)
    80002586:	e0a2                	sd	s0,64(sp)
    80002588:	0880                	addi	s0,sp,80
    8000258a:	faa43c23          	sd	a0,-72(s0)
    8000258e:	87ae                	mv	a5,a1
    80002590:	faf42a23          	sw	a5,-76(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:152
    int rc = -1;
    80002594:	57fd                	li	a5,-1
    80002596:	fef42623          	sw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:154

    if (id) {
    8000259a:	fb442783          	lw	a5,-76(s0)
    8000259e:	2781                	sext.w	a5,a5
    800025a0:	c3dd                	beqz	a5,80002646 <__metal_driver_riscv_clint0_enable+0xc4>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:155
        struct metal_interrupt *intc = NULL;
    800025a2:	fe043023          	sd	zero,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:156
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
    800025a6:	d5fff0ef          	jal	ra,80002304 <_get_cpu_intc>
    800025aa:	fca43823          	sd	a0,-48(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:158
        int num_interrupts =
            __metal_driver_sifive_clint0_num_interrupts(controller);
    800025ae:	fb843503          	ld	a0,-72(s0)
    800025b2:	ba5ff0ef          	jal	ra,80002156 <__metal_driver_sifive_clint0_num_interrupts>
    800025b6:	87aa                	mv	a5,a0
    800025b8:	fcf42623          	sw	a5,-52(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:160

        for (int i = 0; i < num_interrupts; i++) {
    800025bc:	fc042e23          	sw	zero,-36(s0)
    800025c0:	a889                	j	80002612 <__metal_driver_riscv_clint0_enable+0x90>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:162
            int line =
                __metal_driver_sifive_clint0_interrupt_lines(controller, i);
    800025c2:	fdc42783          	lw	a5,-36(s0)
    800025c6:	85be                	mv	a1,a5
    800025c8:	fb843503          	ld	a0,-72(s0)
    800025cc:	bf7ff0ef          	jal	ra,800021c2 <__metal_driver_sifive_clint0_interrupt_lines>
    800025d0:	87aa                	mv	a5,a0
    800025d2:	fcf42423          	sw	a5,-56(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:164
            intc =
                __metal_driver_sifive_clint0_interrupt_parents(controller, i);
    800025d6:	fdc42783          	lw	a5,-36(s0)
    800025da:	85be                	mv	a1,a5
    800025dc:	fb843503          	ld	a0,-72(s0)
    800025e0:	b9fff0ef          	jal	ra,8000217e <__metal_driver_sifive_clint0_interrupt_parents>
    800025e4:	fea43023          	sd	a0,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:165
            if (cpu_intc == intc && id == line) {
    800025e8:	fd043703          	ld	a4,-48(s0)
    800025ec:	fe043783          	ld	a5,-32(s0)
    800025f0:	00f71a63          	bne	a4,a5,80002604 <__metal_driver_riscv_clint0_enable+0x82>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:165 (discriminator 1)
    800025f4:	fb442703          	lw	a4,-76(s0)
    800025f8:	fc842783          	lw	a5,-56(s0)
    800025fc:	2701                	sext.w	a4,a4
    800025fe:	2781                	sext.w	a5,a5
    80002600:	02f70263          	beq	a4,a5,80002624 <__metal_driver_riscv_clint0_enable+0xa2>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:168 (discriminator 2)
                break;
            }
            intc = NULL;
    80002604:	fe043023          	sd	zero,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:160 (discriminator 2)
        for (int i = 0; i < num_interrupts; i++) {
    80002608:	fdc42783          	lw	a5,-36(s0)
    8000260c:	2785                	addiw	a5,a5,1
    8000260e:	fcf42e23          	sw	a5,-36(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:160 (discriminator 1)
    80002612:	fdc42703          	lw	a4,-36(s0)
    80002616:	fcc42783          	lw	a5,-52(s0)
    8000261a:	2701                	sext.w	a4,a4
    8000261c:	2781                	sext.w	a5,a5
    8000261e:	faf742e3          	blt	a4,a5,800025c2 <__metal_driver_riscv_clint0_enable+0x40>
    80002622:	a011                	j	80002626 <__metal_driver_riscv_clint0_enable+0xa4>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:166
                break;
    80002624:	0001                	nop
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:172
        }

        /* Enable its interrupts with parent controller */
        if (intc) {
    80002626:	fe043783          	ld	a5,-32(s0)
    8000262a:	cf91                	beqz	a5,80002646 <__metal_driver_riscv_clint0_enable+0xc4>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:173
            rc = intc->vtable->interrupt_enable(intc, id);
    8000262c:	fe043783          	ld	a5,-32(s0)
    80002630:	639c                	ld	a5,0(a5)
    80002632:	67b8                	ld	a4,72(a5)
    80002634:	fb442783          	lw	a5,-76(s0)
    80002638:	85be                	mv	a1,a5
    8000263a:	fe043503          	ld	a0,-32(s0)
    8000263e:	9702                	jalr	a4
    80002640:	87aa                	mv	a5,a0
    80002642:	fef42623          	sw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:177
        }
    }

    return rc;
    80002646:	fec42783          	lw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:178
}
    8000264a:	853e                	mv	a0,a5
    8000264c:	60a6                	ld	ra,72(sp)
    8000264e:	6406                	ld	s0,64(sp)
    80002650:	6161                	addi	sp,sp,80
    80002652:	8082                	ret

0000000080002654 <__metal_driver_riscv_clint0_disable>:
__metal_driver_riscv_clint0_disable():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:181

int __metal_driver_riscv_clint0_disable(struct metal_interrupt *controller,
                                        int id) {
    80002654:	715d                	addi	sp,sp,-80
    80002656:	e486                	sd	ra,72(sp)
    80002658:	e0a2                	sd	s0,64(sp)
    8000265a:	0880                	addi	s0,sp,80
    8000265c:	faa43c23          	sd	a0,-72(s0)
    80002660:	87ae                	mv	a5,a1
    80002662:	faf42a23          	sw	a5,-76(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:182
    int rc = -1;
    80002666:	57fd                	li	a5,-1
    80002668:	fef42623          	sw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:184

    if (id) {
    8000266c:	fb442783          	lw	a5,-76(s0)
    80002670:	2781                	sext.w	a5,a5
    80002672:	c3dd                	beqz	a5,80002718 <__metal_driver_riscv_clint0_disable+0xc4>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:185
        struct metal_interrupt *intc = NULL;
    80002674:	fe043023          	sd	zero,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:186
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
    80002678:	c8dff0ef          	jal	ra,80002304 <_get_cpu_intc>
    8000267c:	fca43823          	sd	a0,-48(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:188
        int num_interrupts =
            __metal_driver_sifive_clint0_num_interrupts(controller);
    80002680:	fb843503          	ld	a0,-72(s0)
    80002684:	ad3ff0ef          	jal	ra,80002156 <__metal_driver_sifive_clint0_num_interrupts>
    80002688:	87aa                	mv	a5,a0
    8000268a:	fcf42623          	sw	a5,-52(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:190

        for (int i = 0; i < num_interrupts; i++) {
    8000268e:	fc042e23          	sw	zero,-36(s0)
    80002692:	a889                	j	800026e4 <__metal_driver_riscv_clint0_disable+0x90>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:192
            int line =
                __metal_driver_sifive_clint0_interrupt_lines(controller, i);
    80002694:	fdc42783          	lw	a5,-36(s0)
    80002698:	85be                	mv	a1,a5
    8000269a:	fb843503          	ld	a0,-72(s0)
    8000269e:	b25ff0ef          	jal	ra,800021c2 <__metal_driver_sifive_clint0_interrupt_lines>
    800026a2:	87aa                	mv	a5,a0
    800026a4:	fcf42423          	sw	a5,-56(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:194
            intc =
                __metal_driver_sifive_clint0_interrupt_parents(controller, i);
    800026a8:	fdc42783          	lw	a5,-36(s0)
    800026ac:	85be                	mv	a1,a5
    800026ae:	fb843503          	ld	a0,-72(s0)
    800026b2:	acdff0ef          	jal	ra,8000217e <__metal_driver_sifive_clint0_interrupt_parents>
    800026b6:	fea43023          	sd	a0,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:195
            if (cpu_intc == intc && id == line) {
    800026ba:	fd043703          	ld	a4,-48(s0)
    800026be:	fe043783          	ld	a5,-32(s0)
    800026c2:	00f71a63          	bne	a4,a5,800026d6 <__metal_driver_riscv_clint0_disable+0x82>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:195 (discriminator 1)
    800026c6:	fb442703          	lw	a4,-76(s0)
    800026ca:	fc842783          	lw	a5,-56(s0)
    800026ce:	2701                	sext.w	a4,a4
    800026d0:	2781                	sext.w	a5,a5
    800026d2:	02f70263          	beq	a4,a5,800026f6 <__metal_driver_riscv_clint0_disable+0xa2>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198 (discriminator 2)
                break;
            }
            intc = NULL;
    800026d6:	fe043023          	sd	zero,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:190 (discriminator 2)
        for (int i = 0; i < num_interrupts; i++) {
    800026da:	fdc42783          	lw	a5,-36(s0)
    800026de:	2785                	addiw	a5,a5,1
    800026e0:	fcf42e23          	sw	a5,-36(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:190 (discriminator 1)
    800026e4:	fdc42703          	lw	a4,-36(s0)
    800026e8:	fcc42783          	lw	a5,-52(s0)
    800026ec:	2701                	sext.w	a4,a4
    800026ee:	2781                	sext.w	a5,a5
    800026f0:	faf742e3          	blt	a4,a5,80002694 <__metal_driver_riscv_clint0_disable+0x40>
    800026f4:	a011                	j	800026f8 <__metal_driver_riscv_clint0_disable+0xa4>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:196
                break;
    800026f6:	0001                	nop
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:202
        }

        /* Disable its interrupts with parent controller */
        if (intc) {
    800026f8:	fe043783          	ld	a5,-32(s0)
    800026fc:	cf91                	beqz	a5,80002718 <__metal_driver_riscv_clint0_disable+0xc4>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:203
            rc = intc->vtable->interrupt_disable(intc, id);
    800026fe:	fe043783          	ld	a5,-32(s0)
    80002702:	639c                	ld	a5,0(a5)
    80002704:	6bb8                	ld	a4,80(a5)
    80002706:	fb442783          	lw	a5,-76(s0)
    8000270a:	85be                	mv	a1,a5
    8000270c:	fe043503          	ld	a0,-32(s0)
    80002710:	9702                	jalr	a4
    80002712:	87aa                	mv	a5,a0
    80002714:	fef42623          	sw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:207
        }
    }

    return rc;
    80002718:	fec42783          	lw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:208
}
    8000271c:	853e                	mv	a0,a5
    8000271e:	60a6                	ld	ra,72(sp)
    80002720:	6406                	ld	s0,64(sp)
    80002722:	6161                	addi	sp,sp,80
    80002724:	8082                	ret

0000000080002726 <__metal_driver_riscv_clint0_command_request>:
__metal_driver_riscv_clint0_command_request():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:211

int __metal_driver_riscv_clint0_command_request(
    struct metal_interrupt *controller, int command, void *data) {
    80002726:	715d                	addi	sp,sp,-80
    80002728:	e486                	sd	ra,72(sp)
    8000272a:	e0a2                	sd	s0,64(sp)
    8000272c:	0880                	addi	s0,sp,80
    8000272e:	fca43423          	sd	a0,-56(s0)
    80002732:	87ae                	mv	a5,a1
    80002734:	fac43c23          	sd	a2,-72(s0)
    80002738:	fcf42223          	sw	a5,-60(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:213
    int hartid;
    int rc = -1;
    8000273c:	57fd                	li	a5,-1
    8000273e:	fef42623          	sw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:214
    struct __metal_driver_riscv_clint0 *clint =
    80002742:	fc843783          	ld	a5,-56(s0)
    80002746:	fef43023          	sd	a5,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:217
        (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base =
        __metal_driver_sifive_clint0_control_base(controller);
    8000274a:	fc843503          	ld	a0,-56(s0)
    8000274e:	9dfff0ef          	jal	ra,8000212c <__metal_driver_sifive_clint0_control_base>
    80002752:	fca43c23          	sd	a0,-40(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:219

    switch (command) {
    80002756:	fc442783          	lw	a5,-60(s0)
    8000275a:	0007871b          	sext.w	a4,a5
    8000275e:	4789                	li	a5,2
    80002760:	04f70e63          	beq	a4,a5,800027bc <__metal_driver_riscv_clint0_command_request+0x96>
    80002764:	fc442783          	lw	a5,-60(s0)
    80002768:	0007871b          	sext.w	a4,a5
    8000276c:	4789                	li	a5,2
    8000276e:	00e7ca63          	blt	a5,a4,80002782 <__metal_driver_riscv_clint0_command_request+0x5c>
    80002772:	fc442783          	lw	a5,-60(s0)
    80002776:	0007871b          	sext.w	a4,a5
    8000277a:	4785                	li	a5,1
    8000277c:	02f70263          	beq	a4,a5,800027a0 <__metal_driver_riscv_clint0_command_request+0x7a>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:263
            rc = __METAL_ACCESS_ONCE(
                (__metal_io_u32 *)(control_base + (hartid * 4)));
        }
        break;
    default:
        break;
    80002780:	a8cd                	j	80002872 <__metal_driver_riscv_clint0_command_request+0x14c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:219
    switch (command) {
    80002782:	fc442783          	lw	a5,-60(s0)
    80002786:	0007871b          	sext.w	a4,a5
    8000278a:	478d                	li	a5,3
    8000278c:	04f70e63          	beq	a4,a5,800027e8 <__metal_driver_riscv_clint0_command_request+0xc2>
    80002790:	fc442783          	lw	a5,-60(s0)
    80002794:	0007871b          	sext.w	a4,a5
    80002798:	4791                	li	a5,4
    8000279a:	08f70d63          	beq	a4,a5,80002834 <__metal_driver_riscv_clint0_command_request+0x10e>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:263
        break;
    8000279e:	a8d1                	j	80002872 <__metal_driver_riscv_clint0_command_request+0x14c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:221
        if (data) {
    800027a0:	fb843783          	ld	a5,-72(s0)
    800027a4:	c3e1                	beqz	a5,80002864 <__metal_driver_riscv_clint0_command_request+0x13e>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:222
            *(unsigned long long *)data = __metal_clint0_mtime_get(clint);
    800027a6:	fe043503          	ld	a0,-32(s0)
    800027aa:	a51ff0ef          	jal	ra,800021fa <__metal_clint0_mtime_get>
    800027ae:	872a                	mv	a4,a0
    800027b0:	fb843783          	ld	a5,-72(s0)
    800027b4:	e398                	sd	a4,0(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:223
            rc = 0;
    800027b6:	fe042623          	sw	zero,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:225
        break;
    800027ba:	a06d                	j	80002864 <__metal_driver_riscv_clint0_command_request+0x13e>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:227
        if (data) {
    800027bc:	fb843783          	ld	a5,-72(s0)
    800027c0:	c7c5                	beqz	a5,80002868 <__metal_driver_riscv_clint0_command_request+0x142>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:228
            hartid = *(int *)data;
    800027c2:	fb843783          	ld	a5,-72(s0)
    800027c6:	439c                	lw	a5,0(a5)
    800027c8:	fcf42a23          	sw	a5,-44(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:229
            __METAL_ACCESS_ONCE((
    800027cc:	fd442783          	lw	a5,-44(s0)
    800027d0:	0027979b          	slliw	a5,a5,0x2
    800027d4:	2781                	sext.w	a5,a5
    800027d6:	873e                	mv	a4,a5
    800027d8:	fd843783          	ld	a5,-40(s0)
    800027dc:	97ba                	add	a5,a5,a4
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:230
                __metal_io_u32 *)(control_base + (hartid * 4))) = METAL_DISABLE;
    800027de:	0007a023          	sw	zero,0(a5) # 4000 <__heap_size+0x3800>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:231
            rc = 0;
    800027e2:	fe042623          	sw	zero,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:233
        break;
    800027e6:	a049                	j	80002868 <__metal_driver_riscv_clint0_command_request+0x142>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:235
        if (data) {
    800027e8:	fb843783          	ld	a5,-72(s0)
    800027ec:	c3c1                	beqz	a5,8000286c <__metal_driver_riscv_clint0_command_request+0x146>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:236
            hartid = *(int *)data;
    800027ee:	fb843783          	ld	a5,-72(s0)
    800027f2:	439c                	lw	a5,0(a5)
    800027f4:	fcf42a23          	sw	a5,-44(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:237
            __METAL_ACCESS_ONCE(
    800027f8:	fd442783          	lw	a5,-44(s0)
    800027fc:	0027979b          	slliw	a5,a5,0x2
    80002800:	2781                	sext.w	a5,a5
    80002802:	873e                	mv	a4,a5
    80002804:	fd843783          	ld	a5,-40(s0)
    80002808:	97ba                	add	a5,a5,a4
    8000280a:	873e                	mv	a4,a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:238
                (__metal_io_u32 *)(control_base + (hartid * 4))) = METAL_ENABLE;
    8000280c:	4785                	li	a5,1
    8000280e:	c31c                	sw	a5,0(a4)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:248
            __METAL_IO_FENCE(o, i);
    80002810:	0480000f          	fence	o,i
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:249
            rc = __METAL_ACCESS_ONCE(
    80002814:	fd442783          	lw	a5,-44(s0)
    80002818:	0027979b          	slliw	a5,a5,0x2
    8000281c:	2781                	sext.w	a5,a5
    8000281e:	873e                	mv	a4,a5
    80002820:	fd843783          	ld	a5,-40(s0)
    80002824:	97ba                	add	a5,a5,a4
    80002826:	439c                	lw	a5,0(a5)
    80002828:	2781                	sext.w	a5,a5
    8000282a:	fef42623          	sw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:251
            rc = 0;
    8000282e:	fe042623          	sw	zero,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:253
        break;
    80002832:	a82d                	j	8000286c <__metal_driver_riscv_clint0_command_request+0x146>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:255
        rc = 0;
    80002834:	fe042623          	sw	zero,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:256
        if (data) {
    80002838:	fb843783          	ld	a5,-72(s0)
    8000283c:	cb95                	beqz	a5,80002870 <__metal_driver_riscv_clint0_command_request+0x14a>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:257
            hartid = *(int *)data;
    8000283e:	fb843783          	ld	a5,-72(s0)
    80002842:	439c                	lw	a5,0(a5)
    80002844:	fcf42a23          	sw	a5,-44(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:258
            rc = __METAL_ACCESS_ONCE(
    80002848:	fd442783          	lw	a5,-44(s0)
    8000284c:	0027979b          	slliw	a5,a5,0x2
    80002850:	2781                	sext.w	a5,a5
    80002852:	873e                	mv	a4,a5
    80002854:	fd843783          	ld	a5,-40(s0)
    80002858:	97ba                	add	a5,a5,a4
    8000285a:	439c                	lw	a5,0(a5)
    8000285c:	2781                	sext.w	a5,a5
    8000285e:	fef42623          	sw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:261
        break;
    80002862:	a039                	j	80002870 <__metal_driver_riscv_clint0_command_request+0x14a>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:225
        break;
    80002864:	0001                	nop
    80002866:	a031                	j	80002872 <__metal_driver_riscv_clint0_command_request+0x14c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:233
        break;
    80002868:	0001                	nop
    8000286a:	a021                	j	80002872 <__metal_driver_riscv_clint0_command_request+0x14c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:253
        break;
    8000286c:	0001                	nop
    8000286e:	a011                	j	80002872 <__metal_driver_riscv_clint0_command_request+0x14c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:261
        break;
    80002870:	0001                	nop
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:266
    }

    return rc;
    80002872:	fec42783          	lw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:267
}
    80002876:	853e                	mv	a0,a5
    80002878:	60a6                	ld	ra,72(sp)
    8000287a:	6406                	ld	s0,64(sp)
    8000287c:	6161                	addi	sp,sp,80
    8000287e:	8082                	ret

0000000080002880 <__metal_driver_riscv_clint0_clear_interrupt>:
__metal_driver_riscv_clint0_clear_interrupt():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:270

int __metal_driver_riscv_clint0_clear_interrupt(
    struct metal_interrupt *controller, int id) {
    80002880:	7179                	addi	sp,sp,-48
    80002882:	f406                	sd	ra,40(sp)
    80002884:	f022                	sd	s0,32(sp)
    80002886:	1800                	addi	s0,sp,48
    80002888:	fca43c23          	sd	a0,-40(s0)
    8000288c:	87ae                	mv	a5,a1
    8000288e:	fcf42a23          	sw	a5,-44(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:271
    int hartid = metal_cpu_get_current_hartid();
    80002892:	556030ef          	jal	ra,80005de8 <metal_cpu_get_current_hartid>
    80002896:	87aa                	mv	a5,a0
    80002898:	fef42623          	sw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:272
    return __metal_driver_riscv_clint0_command_request(
    8000289c:	fec40793          	addi	a5,s0,-20
    800028a0:	863e                	mv	a2,a5
    800028a2:	4589                	li	a1,2
    800028a4:	fd843503          	ld	a0,-40(s0)
    800028a8:	e7fff0ef          	jal	ra,80002726 <__metal_driver_riscv_clint0_command_request>
    800028ac:	87aa                	mv	a5,a0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:274
        controller, METAL_SOFTWARE_IPI_CLEAR, &hartid);
}
    800028ae:	853e                	mv	a0,a5
    800028b0:	70a2                	ld	ra,40(sp)
    800028b2:	7402                	ld	s0,32(sp)
    800028b4:	6145                	addi	sp,sp,48
    800028b6:	8082                	ret

00000000800028b8 <__metal_driver_riscv_clint0_set_interrupt>:
__metal_driver_riscv_clint0_set_interrupt():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:277

int __metal_driver_riscv_clint0_set_interrupt(
    struct metal_interrupt *controller, int id) {
    800028b8:	7179                	addi	sp,sp,-48
    800028ba:	f406                	sd	ra,40(sp)
    800028bc:	f022                	sd	s0,32(sp)
    800028be:	1800                	addi	s0,sp,48
    800028c0:	fca43c23          	sd	a0,-40(s0)
    800028c4:	87ae                	mv	a5,a1
    800028c6:	fcf42a23          	sw	a5,-44(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:278
    int hartid = metal_cpu_get_current_hartid();
    800028ca:	51e030ef          	jal	ra,80005de8 <metal_cpu_get_current_hartid>
    800028ce:	87aa                	mv	a5,a0
    800028d0:	fef42623          	sw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:279
    return __metal_driver_riscv_clint0_command_request(
    800028d4:	fec40793          	addi	a5,s0,-20
    800028d8:	863e                	mv	a2,a5
    800028da:	458d                	li	a1,3
    800028dc:	fd843503          	ld	a0,-40(s0)
    800028e0:	e47ff0ef          	jal	ra,80002726 <__metal_driver_riscv_clint0_command_request>
    800028e4:	87aa                	mv	a5,a0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:281
        controller, METAL_SOFTWARE_IPI_SET, &hartid);
}
    800028e6:	853e                	mv	a0,a5
    800028e8:	70a2                	ld	ra,40(sp)
    800028ea:	7402                	ld	s0,32(sp)
    800028ec:	6145                	addi	sp,sp,48
    800028ee:	8082                	ret

00000000800028f0 <__metal_driver_cpu_hartid>:
__metal_driver_cpu_hartid():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:209



/* --------------------- cpu ------------ */
static __inline__ int __metal_driver_cpu_hartid(struct metal_cpu *cpu)
{
    800028f0:	1101                	addi	sp,sp,-32
    800028f2:	ec22                	sd	s0,24(sp)
    800028f4:	1000                	addi	s0,sp,32
    800028f6:	fea43423          	sd	a0,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:210
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
    800028fa:	fe843703          	ld	a4,-24(s0)
    800028fe:	00004797          	auipc	a5,0x4
    80002902:	07278793          	addi	a5,a5,114 # 80006970 <__metal_dt_cpu_0>
    80002906:	00f71463          	bne	a4,a5,8000290e <__metal_driver_cpu_hartid+0x1e>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:211
		return 0;
    8000290a:	4781                	li	a5,0
    8000290c:	a011                	j	80002910 <__metal_driver_cpu_hartid+0x20>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:214
	}
	else {
		return -1;
    8000290e:	57fd                	li	a5,-1
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:216
	}
}
    80002910:	853e                	mv	a0,a5
    80002912:	6462                	ld	s0,24(sp)
    80002914:	6105                	addi	sp,sp,32
    80002916:	8082                	ret

0000000080002918 <__metal_driver_cpu_timebase>:
__metal_driver_cpu_timebase():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:219

static __inline__ int __metal_driver_cpu_timebase(struct metal_cpu *cpu)
{
    80002918:	1101                	addi	sp,sp,-32
    8000291a:	ec22                	sd	s0,24(sp)
    8000291c:	1000                	addi	s0,sp,32
    8000291e:	fea43423          	sd	a0,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:220
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
    80002922:	fe843703          	ld	a4,-24(s0)
    80002926:	00004797          	auipc	a5,0x4
    8000292a:	04a78793          	addi	a5,a5,74 # 80006970 <__metal_dt_cpu_0>
    8000292e:	00f71463          	bne	a4,a5,80002936 <__metal_driver_cpu_timebase+0x1e>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:221
		return 32768;
    80002932:	67a1                	lui	a5,0x8
    80002934:	a011                	j	80002938 <__metal_driver_cpu_timebase+0x20>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:224
	}
	else {
		return 0;
    80002936:	4781                	li	a5,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:226
	}
}
    80002938:	853e                	mv	a0,a5
    8000293a:	6462                	ld	s0,24(sp)
    8000293c:	6105                	addi	sp,sp,32
    8000293e:	8082                	ret

0000000080002940 <__metal_driver_cpu_interrupt_controller>:
__metal_driver_cpu_interrupt_controller():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:229

static __inline__ struct metal_interrupt * __metal_driver_cpu_interrupt_controller(struct metal_cpu *cpu)
{
    80002940:	1101                	addi	sp,sp,-32
    80002942:	ec22                	sd	s0,24(sp)
    80002944:	1000                	addi	s0,sp,32
    80002946:	fea43423          	sd	a0,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:230
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
    8000294a:	fe843703          	ld	a4,-24(s0)
    8000294e:	00004797          	auipc	a5,0x4
    80002952:	02278793          	addi	a5,a5,34 # 80006970 <__metal_dt_cpu_0>
    80002956:	00f71763          	bne	a4,a5,80002964 <__metal_driver_cpu_interrupt_controller+0x24>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:231
		return &__metal_dt_cpu_0_interrupt_controller.controller;
    8000295a:	00004797          	auipc	a5,0x4
    8000295e:	02678793          	addi	a5,a5,38 # 80006980 <__metal_dt_cpu_0_interrupt_controller>
    80002962:	a011                	j	80002966 <__metal_driver_cpu_interrupt_controller+0x26>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:234
	}
	else {
		return NULL;
    80002964:	4781                	li	a5,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:236
	}
}
    80002966:	853e                	mv	a0,a5
    80002968:	6462                	ld	s0,24(sp)
    8000296a:	6105                	addi	sp,sp,32
    8000296c:	8082                	ret

000000008000296e <__metal_driver_cpu_buserror>:
__metal_driver_cpu_buserror():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:249
		return 0;
	}
}

static __inline__ struct metal_buserror * __metal_driver_cpu_buserror(struct metal_cpu *cpu)
{
    8000296e:	1101                	addi	sp,sp,-32
    80002970:	ec22                	sd	s0,24(sp)
    80002972:	1000                	addi	s0,sp,32
    80002974:	fea43423          	sd	a0,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:250
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
    80002978:	fe843703          	ld	a4,-24(s0)
    8000297c:	00004797          	auipc	a5,0x4
    80002980:	ff478793          	addi	a5,a5,-12 # 80006970 <__metal_dt_cpu_0>
    80002984:	00f71463          	bne	a4,a5,8000298c <__metal_driver_cpu_buserror+0x1e>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:251
		return NULL;
    80002988:	4781                	li	a5,0
    8000298a:	a011                	j	8000298e <__metal_driver_cpu_buserror+0x20>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:254
	}
	else {
		return NULL;
    8000298c:	4781                	li	a5,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:256
	}
}
    8000298e:	853e                	mv	a0,a5
    80002990:	6462                	ld	s0,24(sp)
    80002992:	6105                	addi	sp,sp,32
    80002994:	8082                	ret

0000000080002996 <__metal_driver_cpu_get>:
__metal_driver_cpu_get():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:25
extern void __metal_vector_table();
unsigned long long __metal_driver_cpu_mtime_get(struct metal_cpu *cpu);
int __metal_driver_cpu_mtimecmp_set(struct metal_cpu *cpu,
                                    unsigned long long time);

struct metal_cpu *__metal_driver_cpu_get(int hartid) {
    80002996:	1101                	addi	sp,sp,-32
    80002998:	ec22                	sd	s0,24(sp)
    8000299a:	1000                	addi	s0,sp,32
    8000299c:	87aa                	mv	a5,a0
    8000299e:	fef42623          	sw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:26
    if (hartid < __METAL_DT_MAX_HARTS) {
    800029a2:	fec42783          	lw	a5,-20(s0)
    800029a6:	2781                	sext.w	a5,a5
    800029a8:	00f04c63          	bgtz	a5,800029c0 <__metal_driver_cpu_get+0x2a>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:27
        return &(__metal_cpu_table[hartid]->cpu);
    800029ac:	00005717          	auipc	a4,0x5
    800029b0:	bbc70713          	addi	a4,a4,-1092 # 80007568 <__metal_cpu_table>
    800029b4:	fec42783          	lw	a5,-20(s0)
    800029b8:	078e                	slli	a5,a5,0x3
    800029ba:	97ba                	add	a5,a5,a4
    800029bc:	639c                	ld	a5,0(a5)
    800029be:	a011                	j	800029c2 <__metal_driver_cpu_get+0x2c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:29
    }
    return (struct metal_cpu *)NULL;
    800029c0:	4781                	li	a5,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:30
}
    800029c2:	853e                	mv	a0,a5
    800029c4:	6462                	ld	s0,24(sp)
    800029c6:	6105                	addi	sp,sp,32
    800029c8:	8082                	ret

00000000800029ca <__metal_myhart_id>:
__metal_myhart_id():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:32

uintptr_t __metal_myhart_id(void) {
    800029ca:	1101                	addi	sp,sp,-32
    800029cc:	ec22                	sd	s0,24(sp)
    800029ce:	1000                	addi	s0,sp,32
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:34
    uintptr_t myhart;
    __asm__ volatile("csrr %0, mhartid" : "=r"(myhart));
    800029d0:	f14027f3          	csrr	a5,mhartid
    800029d4:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:35
    return myhart;
    800029d8:	fe843783          	ld	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:36
}
    800029dc:	853e                	mv	a0,a5
    800029de:	6462                	ld	s0,24(sp)
    800029e0:	6105                	addi	sp,sp,32
    800029e2:	8082                	ret

00000000800029e4 <__metal_interrupt_global_enable>:
__metal_interrupt_global_enable():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:45
    for (ptr = base; ptr < (base + size); ptr++) {
        *ptr = 0;
    }
}

void __metal_interrupt_global_enable(void) {
    800029e4:	1101                	addi	sp,sp,-32
    800029e6:	ec22                	sd	s0,24(sp)
    800029e8:	1000                	addi	s0,sp,32
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:47
    uintptr_t m;
    __asm__ volatile("csrrs %0, mstatus, %1"
    800029ea:	47a1                	li	a5,8
    800029ec:	3007a7f3          	csrrs	a5,mstatus,a5
    800029f0:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:50
                     : "=r"(m)
                     : "r"(METAL_MIE_INTERRUPT));
}
    800029f4:	0001                	nop
    800029f6:	6462                	ld	s0,24(sp)
    800029f8:	6105                	addi	sp,sp,32
    800029fa:	8082                	ret

00000000800029fc <__metal_interrupt_global_disable>:
__metal_interrupt_global_disable():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:52

void __metal_interrupt_global_disable(void) {
    800029fc:	1101                	addi	sp,sp,-32
    800029fe:	ec22                	sd	s0,24(sp)
    80002a00:	1000                	addi	s0,sp,32
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:54
    uintptr_t m;
    __asm__ volatile("csrrc %0, mstatus, %1"
    80002a02:	47a1                	li	a5,8
    80002a04:	3007b7f3          	csrrc	a5,mstatus,a5
    80002a08:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:57
                     : "=r"(m)
                     : "r"(METAL_MIE_INTERRUPT));
}
    80002a0c:	0001                	nop
    80002a0e:	6462                	ld	s0,24(sp)
    80002a10:	6105                	addi	sp,sp,32
    80002a12:	8082                	ret

0000000080002a14 <__metal_interrupt_software_enable>:
__metal_interrupt_software_enable():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:59

void __metal_interrupt_software_enable(void) {
    80002a14:	1101                	addi	sp,sp,-32
    80002a16:	ec22                	sd	s0,24(sp)
    80002a18:	1000                	addi	s0,sp,32
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:61
    uintptr_t m;
    __asm__ volatile("csrrs %0, mie, %1"
    80002a1a:	47a1                	li	a5,8
    80002a1c:	3047a7f3          	csrrs	a5,mie,a5
    80002a20:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:64
                     : "=r"(m)
                     : "r"(METAL_LOCAL_INTERRUPT_SW));
}
    80002a24:	0001                	nop
    80002a26:	6462                	ld	s0,24(sp)
    80002a28:	6105                	addi	sp,sp,32
    80002a2a:	8082                	ret

0000000080002a2c <__metal_interrupt_software_disable>:
__metal_interrupt_software_disable():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:66

void __metal_interrupt_software_disable(void) {
    80002a2c:	1101                	addi	sp,sp,-32
    80002a2e:	ec22                	sd	s0,24(sp)
    80002a30:	1000                	addi	s0,sp,32
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:68
    uintptr_t m;
    __asm__ volatile("csrrc %0, mie, %1"
    80002a32:	47a1                	li	a5,8
    80002a34:	3047b7f3          	csrrc	a5,mie,a5
    80002a38:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:71
                     : "=r"(m)
                     : "r"(METAL_LOCAL_INTERRUPT_SW));
}
    80002a3c:	0001                	nop
    80002a3e:	6462                	ld	s0,24(sp)
    80002a40:	6105                	addi	sp,sp,32
    80002a42:	8082                	ret

0000000080002a44 <__metal_interrupt_timer_enable>:
__metal_interrupt_timer_enable():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:73

void __metal_interrupt_timer_enable(void) {
    80002a44:	1101                	addi	sp,sp,-32
    80002a46:	ec22                	sd	s0,24(sp)
    80002a48:	1000                	addi	s0,sp,32
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:75
    uintptr_t m;
    __asm__ volatile("csrrs %0, mie, %1"
    80002a4a:	08000793          	li	a5,128
    80002a4e:	3047a7f3          	csrrs	a5,mie,a5
    80002a52:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:78
                     : "=r"(m)
                     : "r"(METAL_LOCAL_INTERRUPT_TMR));
}
    80002a56:	0001                	nop
    80002a58:	6462                	ld	s0,24(sp)
    80002a5a:	6105                	addi	sp,sp,32
    80002a5c:	8082                	ret

0000000080002a5e <__metal_interrupt_timer_disable>:
__metal_interrupt_timer_disable():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:80

void __metal_interrupt_timer_disable(void) {
    80002a5e:	1101                	addi	sp,sp,-32
    80002a60:	ec22                	sd	s0,24(sp)
    80002a62:	1000                	addi	s0,sp,32
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:82
    uintptr_t m;
    __asm__ volatile("csrrc %0, mie, %1"
    80002a64:	08000793          	li	a5,128
    80002a68:	3047b7f3          	csrrc	a5,mie,a5
    80002a6c:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:85
                     : "=r"(m)
                     : "r"(METAL_LOCAL_INTERRUPT_TMR));
}
    80002a70:	0001                	nop
    80002a72:	6462                	ld	s0,24(sp)
    80002a74:	6105                	addi	sp,sp,32
    80002a76:	8082                	ret

0000000080002a78 <__metal_interrupt_external_enable>:
__metal_interrupt_external_enable():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:87

void __metal_interrupt_external_enable(void) {
    80002a78:	1101                	addi	sp,sp,-32
    80002a7a:	ec22                	sd	s0,24(sp)
    80002a7c:	1000                	addi	s0,sp,32
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:89
    uintptr_t m;
    __asm__ volatile("csrrs %0, mie, %1"
    80002a7e:	6785                	lui	a5,0x1
    80002a80:	8007879b          	addiw	a5,a5,-2048
    80002a84:	3047a7f3          	csrrs	a5,mie,a5
    80002a88:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:92
                     : "=r"(m)
                     : "r"(METAL_LOCAL_INTERRUPT_EXT));
}
    80002a8c:	0001                	nop
    80002a8e:	6462                	ld	s0,24(sp)
    80002a90:	6105                	addi	sp,sp,32
    80002a92:	8082                	ret

0000000080002a94 <__metal_interrupt_external_disable>:
__metal_interrupt_external_disable():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:94

void __metal_interrupt_external_disable(void) {
    80002a94:	1101                	addi	sp,sp,-32
    80002a96:	ec22                	sd	s0,24(sp)
    80002a98:	1000                	addi	s0,sp,32
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:96
    unsigned long m;
    __asm__ volatile("csrrc %0, mie, %1"
    80002a9a:	6785                	lui	a5,0x1
    80002a9c:	8007879b          	addiw	a5,a5,-2048
    80002aa0:	3047b7f3          	csrrc	a5,mie,a5
    80002aa4:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:99
                     : "=r"(m)
                     : "r"(METAL_LOCAL_INTERRUPT_EXT));
}
    80002aa8:	0001                	nop
    80002aaa:	6462                	ld	s0,24(sp)
    80002aac:	6105                	addi	sp,sp,32
    80002aae:	8082                	ret

0000000080002ab0 <__metal_interrupt_local_enable>:
__metal_interrupt_local_enable():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:101

void __metal_interrupt_local_enable(int id) {
    80002ab0:	7179                	addi	sp,sp,-48
    80002ab2:	f422                	sd	s0,40(sp)
    80002ab4:	1800                	addi	s0,sp,48
    80002ab6:	87aa                	mv	a5,a0
    80002ab8:	fcf42e23          	sw	a5,-36(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:102
    uintptr_t b = 1 << id;
    80002abc:	fdc42783          	lw	a5,-36(s0)
    80002ac0:	4705                	li	a4,1
    80002ac2:	00f717bb          	sllw	a5,a4,a5
    80002ac6:	2781                	sext.w	a5,a5
    80002ac8:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:104
    uintptr_t m;
    __asm__ volatile("csrrs %0, mie, %1" : "=r"(m) : "r"(b));
    80002acc:	fe843783          	ld	a5,-24(s0)
    80002ad0:	3047a7f3          	csrrs	a5,mie,a5
    80002ad4:	fef43023          	sd	a5,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:105
}
    80002ad8:	0001                	nop
    80002ada:	7422                	ld	s0,40(sp)
    80002adc:	6145                	addi	sp,sp,48
    80002ade:	8082                	ret

0000000080002ae0 <__metal_interrupt_local_disable>:
__metal_interrupt_local_disable():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:107

void __metal_interrupt_local_disable(int id) {
    80002ae0:	7179                	addi	sp,sp,-48
    80002ae2:	f422                	sd	s0,40(sp)
    80002ae4:	1800                	addi	s0,sp,48
    80002ae6:	87aa                	mv	a5,a0
    80002ae8:	fcf42e23          	sw	a5,-36(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:108
    uintptr_t b = 1 << id;
    80002aec:	fdc42783          	lw	a5,-36(s0)
    80002af0:	4705                	li	a4,1
    80002af2:	00f717bb          	sllw	a5,a4,a5
    80002af6:	2781                	sext.w	a5,a5
    80002af8:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:110
    uintptr_t m;
    __asm__ volatile("csrrc %0, mie, %1" : "=r"(m) : "r"(b));
    80002afc:	fe843783          	ld	a5,-24(s0)
    80002b00:	3047b7f3          	csrrc	a5,mie,a5
    80002b04:	fef43023          	sd	a5,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:111
}
    80002b08:	0001                	nop
    80002b0a:	7422                	ld	s0,40(sp)
    80002b0c:	6145                	addi	sp,sp,48
    80002b0e:	8082                	ret

0000000080002b10 <__metal_default_exception_handler>:
__metal_default_exception_handler():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:113

void __metal_default_exception_handler(struct metal_cpu *cpu, int ecode) {
    80002b10:	1101                	addi	sp,sp,-32
    80002b12:	ec06                	sd	ra,24(sp)
    80002b14:	e822                	sd	s0,16(sp)
    80002b16:	1000                	addi	s0,sp,32
    80002b18:	fea43423          	sd	a0,-24(s0)
    80002b1c:	87ae                	mv	a5,a1
    80002b1e:	fef42223          	sw	a5,-28(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:114
    metal_shutdown(100);
    80002b22:	06400513          	li	a0,100
    80002b26:	41e030ef          	jal	ra,80005f44 <metal_shutdown>

0000000080002b2a <__metal_default_interrupt_handler>:
__metal_default_interrupt_handler():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:117
}

void __metal_default_interrupt_handler(int id, void *priv) {
    80002b2a:	1101                	addi	sp,sp,-32
    80002b2c:	ec06                	sd	ra,24(sp)
    80002b2e:	e822                	sd	s0,16(sp)
    80002b30:	1000                	addi	s0,sp,32
    80002b32:	87aa                	mv	a5,a0
    80002b34:	feb43023          	sd	a1,-32(s0)
    80002b38:	fef42623          	sw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:118
    metal_shutdown(200);
    80002b3c:	0c800513          	li	a0,200
    80002b40:	404030ef          	jal	ra,80005f44 <metal_shutdown>

0000000080002b44 <metal_interrupt_vector_handler>:
metal_interrupt_vector_handler():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:122
}

/* The metal_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_interrupt_vector_handler(void) {
    80002b44:	7175                	addi	sp,sp,-144
    80002b46:	e506                	sd	ra,136(sp)
    80002b48:	e116                	sd	t0,128(sp)
    80002b4a:	fc9a                	sd	t1,120(sp)
    80002b4c:	f89e                	sd	t2,112(sp)
    80002b4e:	f4a2                	sd	s0,104(sp)
    80002b50:	f0aa                	sd	a0,96(sp)
    80002b52:	ecae                	sd	a1,88(sp)
    80002b54:	e8b2                	sd	a2,80(sp)
    80002b56:	e4b6                	sd	a3,72(sp)
    80002b58:	e0ba                	sd	a4,64(sp)
    80002b5a:	fc3e                	sd	a5,56(sp)
    80002b5c:	f842                	sd	a6,48(sp)
    80002b5e:	f446                	sd	a7,40(sp)
    80002b60:	f072                	sd	t3,32(sp)
    80002b62:	ec76                	sd	t4,24(sp)
    80002b64:	e87a                	sd	t5,16(sp)
    80002b66:	e47e                	sd	t6,8(sp)
    80002b68:	0900                	addi	s0,sp,144
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:123
    metal_shutdown(300);
    80002b6a:	12c00513          	li	a0,300
    80002b6e:	3d6030ef          	jal	ra,80005f44 <metal_shutdown>

0000000080002b72 <metal_software_interrupt_vector_handler>:
metal_software_interrupt_vector_handler():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:128
}

/* The metal_software_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt))
metal_software_interrupt_vector_handler(void) {
    80002b72:	7171                	addi	sp,sp,-176
    80002b74:	f506                	sd	ra,168(sp)
    80002b76:	f116                	sd	t0,160(sp)
    80002b78:	ed1a                	sd	t1,152(sp)
    80002b7a:	e91e                	sd	t2,144(sp)
    80002b7c:	e522                	sd	s0,136(sp)
    80002b7e:	e12a                	sd	a0,128(sp)
    80002b80:	fcae                	sd	a1,120(sp)
    80002b82:	f8b2                	sd	a2,112(sp)
    80002b84:	f4b6                	sd	a3,104(sp)
    80002b86:	f0ba                	sd	a4,96(sp)
    80002b88:	ecbe                	sd	a5,88(sp)
    80002b8a:	e8c2                	sd	a6,80(sp)
    80002b8c:	e4c6                	sd	a7,72(sp)
    80002b8e:	e0f2                	sd	t3,64(sp)
    80002b90:	fc76                	sd	t4,56(sp)
    80002b92:	f87a                	sd	t5,48(sp)
    80002b94:	f47e                	sd	t6,40(sp)
    80002b96:	1900                	addi	s0,sp,176
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:129
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_SW);
    80002b98:	e33ff0ef          	jal	ra,800029ca <__metal_myhart_id>
    80002b9c:	87aa                	mv	a5,a0
    80002b9e:	00005717          	auipc	a4,0x5
    80002ba2:	9ca70713          	addi	a4,a4,-1590 # 80007568 <__metal_cpu_table>
    80002ba6:	078e                	slli	a5,a5,0x3
    80002ba8:	97ba                	add	a5,a5,a4
    80002baa:	639c                	ld	a5,0(a5)
    80002bac:	f6f43423          	sd	a5,-152(s0)
    80002bb0:	f6843783          	ld	a5,-152(s0)
    80002bb4:	c78d                	beqz	a5,80002bde <metal_software_interrupt_vector_handler+0x6c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:129 (discriminator 1)
    80002bb6:	f6843503          	ld	a0,-152(s0)
    80002bba:	d87ff0ef          	jal	ra,80002940 <__metal_driver_cpu_interrupt_controller>
    80002bbe:	f6a43023          	sd	a0,-160(s0)
    80002bc2:	f6043783          	ld	a5,-160(s0)
    80002bc6:	1887b783          	ld	a5,392(a5) # 1188 <__heap_size+0x988>
    80002bca:	f4f43c23          	sd	a5,-168(s0)
    80002bce:	f6043783          	ld	a5,-160(s0)
    80002bd2:	1787b783          	ld	a5,376(a5)
    80002bd6:	f5843583          	ld	a1,-168(s0)
    80002bda:	450d                	li	a0,3
    80002bdc:	9782                	jalr	a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:130
}
    80002bde:	0001                	nop
    80002be0:	70aa                	ld	ra,168(sp)
    80002be2:	728a                	ld	t0,160(sp)
    80002be4:	636a                	ld	t1,152(sp)
    80002be6:	63ca                	ld	t2,144(sp)
    80002be8:	642a                	ld	s0,136(sp)
    80002bea:	650a                	ld	a0,128(sp)
    80002bec:	75e6                	ld	a1,120(sp)
    80002bee:	7646                	ld	a2,112(sp)
    80002bf0:	76a6                	ld	a3,104(sp)
    80002bf2:	7706                	ld	a4,96(sp)
    80002bf4:	67e6                	ld	a5,88(sp)
    80002bf6:	6846                	ld	a6,80(sp)
    80002bf8:	68a6                	ld	a7,72(sp)
    80002bfa:	6e06                	ld	t3,64(sp)
    80002bfc:	7ee2                	ld	t4,56(sp)
    80002bfe:	7f42                	ld	t5,48(sp)
    80002c00:	7fa2                	ld	t6,40(sp)
    80002c02:	614d                	addi	sp,sp,176
    80002c04:	30200073          	mret

0000000080002c08 <__metal_default_sw_handler>:
__metal_default_sw_handler():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:132

void __metal_default_sw_handler(int id, void *priv) {
    80002c08:	7139                	addi	sp,sp,-64
    80002c0a:	fc06                	sd	ra,56(sp)
    80002c0c:	f822                	sd	s0,48(sp)
    80002c0e:	0080                	addi	s0,sp,64
    80002c10:	87aa                	mv	a5,a0
    80002c12:	fcb43023          	sd	a1,-64(s0)
    80002c16:	fcf42623          	sw	a5,-52(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:135
    uintptr_t mcause;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
    80002c1a:	db1ff0ef          	jal	ra,800029ca <__metal_myhart_id>
    80002c1e:	87aa                	mv	a5,a0
    80002c20:	00005717          	auipc	a4,0x5
    80002c24:	94870713          	addi	a4,a4,-1720 # 80007568 <__metal_cpu_table>
    80002c28:	078e                	slli	a5,a5,0x3
    80002c2a:	97ba                	add	a5,a5,a4
    80002c2c:	639c                	ld	a5,0(a5)
    80002c2e:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:137

    __asm__ volatile("csrr %0, mcause" : "=r"(mcause));
    80002c32:	342027f3          	csrr	a5,mcause
    80002c36:	fef43023          	sd	a5,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:138
    if (cpu) {
    80002c3a:	fe843783          	ld	a5,-24(s0)
    80002c3e:	cb85                	beqz	a5,80002c6e <__metal_default_sw_handler+0x66>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:140
        intc = (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
    80002c40:	fe843503          	ld	a0,-24(s0)
    80002c44:	cfdff0ef          	jal	ra,80002940 <__metal_driver_cpu_interrupt_controller>
    80002c48:	fca43c23          	sd	a0,-40(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:141
        intc->metal_exception_table[mcause & METAL_MCAUSE_CAUSE](
    80002c4c:	fe043783          	ld	a5,-32(s0)
    80002c50:	3ff7f793          	andi	a5,a5,1023
    80002c54:	fd843703          	ld	a4,-40(s0)
    80002c58:	0a678793          	addi	a5,a5,166
    80002c5c:	078e                	slli	a5,a5,0x3
    80002c5e:	97ba                	add	a5,a5,a4
    80002c60:	6398                	ld	a4,0(a5)
    80002c62:	fcc42783          	lw	a5,-52(s0)
    80002c66:	85be                	mv	a1,a5
    80002c68:	fe843503          	ld	a0,-24(s0)
    80002c6c:	9702                	jalr	a4
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:144
            (struct metal_cpu *)cpu, id);
    }
}
    80002c6e:	0001                	nop
    80002c70:	70e2                	ld	ra,56(sp)
    80002c72:	7442                	ld	s0,48(sp)
    80002c74:	6121                	addi	sp,sp,64
    80002c76:	8082                	ret

0000000080002c78 <metal_timer_interrupt_vector_handler>:
metal_timer_interrupt_vector_handler():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:148

/* The metal_timer_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt))
metal_timer_interrupt_vector_handler(void) {
    80002c78:	7171                	addi	sp,sp,-176
    80002c7a:	f506                	sd	ra,168(sp)
    80002c7c:	f116                	sd	t0,160(sp)
    80002c7e:	ed1a                	sd	t1,152(sp)
    80002c80:	e91e                	sd	t2,144(sp)
    80002c82:	e522                	sd	s0,136(sp)
    80002c84:	e12a                	sd	a0,128(sp)
    80002c86:	fcae                	sd	a1,120(sp)
    80002c88:	f8b2                	sd	a2,112(sp)
    80002c8a:	f4b6                	sd	a3,104(sp)
    80002c8c:	f0ba                	sd	a4,96(sp)
    80002c8e:	ecbe                	sd	a5,88(sp)
    80002c90:	e8c2                	sd	a6,80(sp)
    80002c92:	e4c6                	sd	a7,72(sp)
    80002c94:	e0f2                	sd	t3,64(sp)
    80002c96:	fc76                	sd	t4,56(sp)
    80002c98:	f87a                	sd	t5,48(sp)
    80002c9a:	f47e                	sd	t6,40(sp)
    80002c9c:	1900                	addi	s0,sp,176
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:149
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_TMR);
    80002c9e:	d2dff0ef          	jal	ra,800029ca <__metal_myhart_id>
    80002ca2:	87aa                	mv	a5,a0
    80002ca4:	00005717          	auipc	a4,0x5
    80002ca8:	8c470713          	addi	a4,a4,-1852 # 80007568 <__metal_cpu_table>
    80002cac:	078e                	slli	a5,a5,0x3
    80002cae:	97ba                	add	a5,a5,a4
    80002cb0:	639c                	ld	a5,0(a5)
    80002cb2:	f6f43423          	sd	a5,-152(s0)
    80002cb6:	f6843783          	ld	a5,-152(s0)
    80002cba:	c78d                	beqz	a5,80002ce4 <metal_timer_interrupt_vector_handler+0x6c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:149 (discriminator 1)
    80002cbc:	f6843503          	ld	a0,-152(s0)
    80002cc0:	c81ff0ef          	jal	ra,80002940 <__metal_driver_cpu_interrupt_controller>
    80002cc4:	f6a43023          	sd	a0,-160(s0)
    80002cc8:	f6043783          	ld	a5,-160(s0)
    80002ccc:	2087b783          	ld	a5,520(a5)
    80002cd0:	f4f43c23          	sd	a5,-168(s0)
    80002cd4:	f6043783          	ld	a5,-160(s0)
    80002cd8:	1f87b783          	ld	a5,504(a5)
    80002cdc:	f5843583          	ld	a1,-168(s0)
    80002ce0:	451d                	li	a0,7
    80002ce2:	9782                	jalr	a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:150
}
    80002ce4:	0001                	nop
    80002ce6:	70aa                	ld	ra,168(sp)
    80002ce8:	728a                	ld	t0,160(sp)
    80002cea:	636a                	ld	t1,152(sp)
    80002cec:	63ca                	ld	t2,144(sp)
    80002cee:	642a                	ld	s0,136(sp)
    80002cf0:	650a                	ld	a0,128(sp)
    80002cf2:	75e6                	ld	a1,120(sp)
    80002cf4:	7646                	ld	a2,112(sp)
    80002cf6:	76a6                	ld	a3,104(sp)
    80002cf8:	7706                	ld	a4,96(sp)
    80002cfa:	67e6                	ld	a5,88(sp)
    80002cfc:	6846                	ld	a6,80(sp)
    80002cfe:	68a6                	ld	a7,72(sp)
    80002d00:	6e06                	ld	t3,64(sp)
    80002d02:	7ee2                	ld	t4,56(sp)
    80002d04:	7f42                	ld	t5,48(sp)
    80002d06:	7fa2                	ld	t6,40(sp)
    80002d08:	614d                	addi	sp,sp,176
    80002d0a:	30200073          	mret

0000000080002d0e <__metal_default_beu_handler>:
__metal_default_beu_handler():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:152

void __metal_default_beu_handler(int id, void *priv) {}
    80002d0e:	1101                	addi	sp,sp,-32
    80002d10:	ec22                	sd	s0,24(sp)
    80002d12:	1000                	addi	s0,sp,32
    80002d14:	87aa                	mv	a5,a0
    80002d16:	feb43023          	sd	a1,-32(s0)
    80002d1a:	fef42623          	sw	a5,-20(s0)
    80002d1e:	0001                	nop
    80002d20:	6462                	ld	s0,24(sp)
    80002d22:	6105                	addi	sp,sp,32
    80002d24:	8082                	ret

0000000080002d26 <__metal_default_timer_handler>:
__metal_default_timer_handler():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:154

void __metal_default_timer_handler(int id, void *priv) {
    80002d26:	7179                	addi	sp,sp,-48
    80002d28:	f406                	sd	ra,40(sp)
    80002d2a:	f022                	sd	s0,32(sp)
    80002d2c:	1800                	addi	s0,sp,48
    80002d2e:	87aa                	mv	a5,a0
    80002d30:	fcb43823          	sd	a1,-48(s0)
    80002d34:	fcf42e23          	sw	a5,-36(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:155
    struct metal_cpu *cpu = __metal_driver_cpu_get(__metal_myhart_id());
    80002d38:	c93ff0ef          	jal	ra,800029ca <__metal_myhart_id>
    80002d3c:	87aa                	mv	a5,a0
    80002d3e:	2781                	sext.w	a5,a5
    80002d40:	853e                	mv	a0,a5
    80002d42:	c55ff0ef          	jal	ra,80002996 <__metal_driver_cpu_get>
    80002d46:	fea43423          	sd	a0,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:156
    unsigned long long time = __metal_driver_cpu_mtime_get(cpu);
    80002d4a:	fe843503          	ld	a0,-24(s0)
    80002d4e:	23a010ef          	jal	ra,80003f88 <__metal_driver_cpu_mtime_get>
    80002d52:	fea43023          	sd	a0,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:159

    /* Set a 10 cycle timer */
    __metal_driver_cpu_mtimecmp_set(cpu, time + 10);
    80002d56:	fe043783          	ld	a5,-32(s0)
    80002d5a:	07a9                	addi	a5,a5,10
    80002d5c:	85be                	mv	a1,a5
    80002d5e:	fe843503          	ld	a0,-24(s0)
    80002d62:	27e010ef          	jal	ra,80003fe0 <__metal_driver_cpu_mtimecmp_set>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:160
}
    80002d66:	0001                	nop
    80002d68:	70a2                	ld	ra,40(sp)
    80002d6a:	7402                	ld	s0,32(sp)
    80002d6c:	6145                	addi	sp,sp,48
    80002d6e:	8082                	ret
	...

0000000080002d80 <__metal_exception_handler>:
__metal_exception_handler():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:169
metal_external_interrupt_vector_handler(void) {
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_EXT);
}

void __metal_exception_handler(void) __attribute__((interrupt, aligned(128)));
void __metal_exception_handler(void) {
    80002d80:	7115                	addi	sp,sp,-224
    80002d82:	ed86                	sd	ra,216(sp)
    80002d84:	e996                	sd	t0,208(sp)
    80002d86:	e59a                	sd	t1,200(sp)
    80002d88:	e19e                	sd	t2,192(sp)
    80002d8a:	fd22                	sd	s0,184(sp)
    80002d8c:	f92a                	sd	a0,176(sp)
    80002d8e:	f52e                	sd	a1,168(sp)
    80002d90:	f132                	sd	a2,160(sp)
    80002d92:	ed36                	sd	a3,152(sp)
    80002d94:	e93a                	sd	a4,144(sp)
    80002d96:	e53e                	sd	a5,136(sp)
    80002d98:	e142                	sd	a6,128(sp)
    80002d9a:	fcc6                	sd	a7,120(sp)
    80002d9c:	f8f2                	sd	t3,112(sp)
    80002d9e:	f4f6                	sd	t4,104(sp)
    80002da0:	f0fa                	sd	t5,96(sp)
    80002da2:	ecfe                	sd	t6,88(sp)
    80002da4:	1180                	addi	s0,sp,224
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:174
    int id;
    void *priv;
    uintptr_t mcause, mepc, mtval, mtvec;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
    80002da6:	c25ff0ef          	jal	ra,800029ca <__metal_myhart_id>
    80002daa:	87aa                	mv	a5,a0
    80002dac:	00004717          	auipc	a4,0x4
    80002db0:	7bc70713          	addi	a4,a4,1980 # 80007568 <__metal_cpu_table>
    80002db4:	078e                	slli	a5,a5,0x3
    80002db6:	97ba                	add	a5,a5,a4
    80002db8:	639c                	ld	a5,0(a5)
    80002dba:	f6f43423          	sd	a5,-152(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:176

    __asm__ volatile("csrr %0, mcause" : "=r"(mcause));
    80002dbe:	342027f3          	csrr	a5,mcause
    80002dc2:	f6f43023          	sd	a5,-160(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:177
    __asm__ volatile("csrr %0, mepc" : "=r"(mepc));
    80002dc6:	341027f3          	csrr	a5,mepc
    80002dca:	f4f43c23          	sd	a5,-168(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:178
    __asm__ volatile("csrr %0, mtval" : "=r"(mtval));
    80002dce:	343027f3          	csrr	a5,mtval
    80002dd2:	f4f43823          	sd	a5,-176(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:179
    __asm__ volatile("csrr %0, mtvec" : "=r"(mtvec));
    80002dd6:	305027f3          	csrr	a5,mtvec
    80002dda:	f4f43423          	sd	a5,-184(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:181

    if (cpu) {
    80002dde:	f6843783          	ld	a5,-152(s0)
    80002de2:	0e078f63          	beqz	a5,80002ee0 <__metal_exception_handler+0x160>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:183
        intc = (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
    80002de6:	f6843503          	ld	a0,-152(s0)
    80002dea:	b57ff0ef          	jal	ra,80002940 <__metal_driver_cpu_interrupt_controller>
    80002dee:	f4a43023          	sd	a0,-192(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:184
        id = mcause & METAL_MCAUSE_CAUSE;
    80002df2:	f6043783          	ld	a5,-160(s0)
    80002df6:	2781                	sext.w	a5,a5
    80002df8:	3ff7f793          	andi	a5,a5,1023
    80002dfc:	f2f42e23          	sw	a5,-196(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:185
        if (mcause & METAL_MCAUSE_INTR) {
    80002e00:	f6043783          	ld	a5,-160(s0)
    80002e04:	0a07df63          	bgez	a5,80002ec2 <__metal_exception_handler+0x142>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:186
            if (id == METAL_INTERRUPT_ID_BEU) {
    80002e08:	f3c42783          	lw	a5,-196(s0)
    80002e0c:	0007871b          	sext.w	a4,a5
    80002e10:	08000793          	li	a5,128
    80002e14:	02f71363          	bne	a4,a5,80002e3a <__metal_exception_handler+0xba>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:187
                priv = intc->metal_int_beu.exint_data;
    80002e18:	f4043783          	ld	a5,-192(s0)
    80002e1c:	5287b783          	ld	a5,1320(a5)
    80002e20:	f2f43823          	sd	a5,-208(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:188
                intc->metal_int_beu.handler(id, priv);
    80002e24:	f4043783          	ld	a5,-192(s0)
    80002e28:	5187b703          	ld	a4,1304(a5)
    80002e2c:	f3c42783          	lw	a5,-196(s0)
    80002e30:	f3043583          	ld	a1,-208(s0)
    80002e34:	853e                	mv	a0,a5
    80002e36:	9702                	jalr	a4
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:189
                return;
    80002e38:	a065                	j	80002ee0 <__metal_exception_handler+0x160>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:191
            }
            if ((id < METAL_INTERRUPT_ID_CSW) ||
    80002e3a:	f3c42783          	lw	a5,-196(s0)
    80002e3e:	0007871b          	sext.w	a4,a5
    80002e42:	47ad                	li	a5,11
    80002e44:	00e7d763          	bge	a5,a4,80002e52 <__metal_exception_handler+0xd2>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:192 (discriminator 1)
                ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_DIRECT)) {
    80002e48:	f4843783          	ld	a5,-184(s0)
    80002e4c:	03f7f793          	andi	a5,a5,63
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:191 (discriminator 1)
            if ((id < METAL_INTERRUPT_ID_CSW) ||
    80002e50:	eb95                	bnez	a5,80002e84 <__metal_exception_handler+0x104>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:193
                priv = intc->metal_int_table[id].exint_data;
    80002e52:	f4043703          	ld	a4,-192(s0)
    80002e56:	f3c42783          	lw	a5,-196(s0)
    80002e5a:	07a5                	addi	a5,a5,9
    80002e5c:	0796                	slli	a5,a5,0x5
    80002e5e:	97ba                	add	a5,a5,a4
    80002e60:	679c                	ld	a5,8(a5)
    80002e62:	f2f43823          	sd	a5,-208(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:194
                intc->metal_int_table[id].handler(id, priv);
    80002e66:	f4043703          	ld	a4,-192(s0)
    80002e6a:	f3c42783          	lw	a5,-196(s0)
    80002e6e:	0796                	slli	a5,a5,0x5
    80002e70:	97ba                	add	a5,a5,a4
    80002e72:	1187b703          	ld	a4,280(a5)
    80002e76:	f3c42783          	lw	a5,-196(s0)
    80002e7a:	f3043583          	ld	a1,-208(s0)
    80002e7e:	853e                	mv	a0,a5
    80002e80:	9702                	jalr	a4
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:195
                return;
    80002e82:	a8b9                	j	80002ee0 <__metal_exception_handler+0x160>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:197
            }
            if ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_CLIC) {
    80002e84:	f4843783          	ld	a5,-184(s0)
    80002e88:	03f7f713          	andi	a4,a5,63
    80002e8c:	4789                	li	a5,2
    80002e8e:	04f71963          	bne	a4,a5,80002ee0 <__metal_exception_handler+0x160>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:201
                uintptr_t mtvt;
                metal_interrupt_handler_t mtvt_handler;

                __asm__ volatile("csrr %0, 0x307" : "=r"(mtvt));
    80002e92:	307027f3          	csrr	a5,mtvt
    80002e96:	f2f43423          	sd	a5,-216(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:202
                priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
    80002e9a:	f4043783          	ld	a5,-192(s0)
    80002e9e:	1807b783          	ld	a5,384(a5)
    80002ea2:	f2f43823          	sd	a5,-208(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:203
                mtvt_handler = (metal_interrupt_handler_t) * (uintptr_t *)mtvt;
    80002ea6:	f2843783          	ld	a5,-216(s0)
    80002eaa:	639c                	ld	a5,0(a5)
    80002eac:	f2f43023          	sd	a5,-224(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:204
                mtvt_handler(id, priv);
    80002eb0:	f3c42783          	lw	a5,-196(s0)
    80002eb4:	f2043703          	ld	a4,-224(s0)
    80002eb8:	f3043583          	ld	a1,-208(s0)
    80002ebc:	853e                	mv	a0,a5
    80002ebe:	9702                	jalr	a4
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:205
                return;
    80002ec0:	a005                	j	80002ee0 <__metal_exception_handler+0x160>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:208
            }
        } else {
            intc->metal_exception_table[id]((struct metal_cpu *)cpu, id);
    80002ec2:	f4043703          	ld	a4,-192(s0)
    80002ec6:	f3c42783          	lw	a5,-196(s0)
    80002eca:	0a678793          	addi	a5,a5,166
    80002ece:	078e                	slli	a5,a5,0x3
    80002ed0:	97ba                	add	a5,a5,a4
    80002ed2:	6398                	ld	a4,0(a5)
    80002ed4:	f3c42783          	lw	a5,-196(s0)
    80002ed8:	85be                	mv	a1,a5
    80002eda:	f6843503          	ld	a0,-152(s0)
    80002ede:	9702                	jalr	a4
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:211
        }
    }
}
    80002ee0:	60ee                	ld	ra,216(sp)
    80002ee2:	62ce                	ld	t0,208(sp)
    80002ee4:	632e                	ld	t1,200(sp)
    80002ee6:	638e                	ld	t2,192(sp)
    80002ee8:	746a                	ld	s0,184(sp)
    80002eea:	754a                	ld	a0,176(sp)
    80002eec:	75aa                	ld	a1,168(sp)
    80002eee:	760a                	ld	a2,160(sp)
    80002ef0:	66ea                	ld	a3,152(sp)
    80002ef2:	674a                	ld	a4,144(sp)
    80002ef4:	67aa                	ld	a5,136(sp)
    80002ef6:	680a                	ld	a6,128(sp)
    80002ef8:	78e6                	ld	a7,120(sp)
    80002efa:	7e46                	ld	t3,112(sp)
    80002efc:	7ea6                	ld	t4,104(sp)
    80002efe:	7f06                	ld	t5,96(sp)
    80002f00:	6fe6                	ld	t6,88(sp)
    80002f02:	612d                	addi	sp,sp,224
    80002f04:	30200073          	mret
	...

0000000080002f7a <metal_lc0_interrupt_vector_handler>:
metal_lc0_interrupt_vector_handler():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:214

/* The metal_lc0_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc0_interrupt_vector_handler(void) {
    80002f7a:	7171                	addi	sp,sp,-176
    80002f7c:	f506                	sd	ra,168(sp)
    80002f7e:	f116                	sd	t0,160(sp)
    80002f80:	ed1a                	sd	t1,152(sp)
    80002f82:	e91e                	sd	t2,144(sp)
    80002f84:	e522                	sd	s0,136(sp)
    80002f86:	e12a                	sd	a0,128(sp)
    80002f88:	fcae                	sd	a1,120(sp)
    80002f8a:	f8b2                	sd	a2,112(sp)
    80002f8c:	f4b6                	sd	a3,104(sp)
    80002f8e:	f0ba                	sd	a4,96(sp)
    80002f90:	ecbe                	sd	a5,88(sp)
    80002f92:	e8c2                	sd	a6,80(sp)
    80002f94:	e4c6                	sd	a7,72(sp)
    80002f96:	e0f2                	sd	t3,64(sp)
    80002f98:	fc76                	sd	t4,56(sp)
    80002f9a:	f87a                	sd	t5,48(sp)
    80002f9c:	f47e                	sd	t6,40(sp)
    80002f9e:	1900                	addi	s0,sp,176
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:215
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC0);
    80002fa0:	a2bff0ef          	jal	ra,800029ca <__metal_myhart_id>
    80002fa4:	87aa                	mv	a5,a0
    80002fa6:	00004717          	auipc	a4,0x4
    80002faa:	5c270713          	addi	a4,a4,1474 # 80007568 <__metal_cpu_table>
    80002fae:	078e                	slli	a5,a5,0x3
    80002fb0:	97ba                	add	a5,a5,a4
    80002fb2:	639c                	ld	a5,0(a5)
    80002fb4:	f6f43423          	sd	a5,-152(s0)
    80002fb8:	f6843783          	ld	a5,-152(s0)
    80002fbc:	c78d                	beqz	a5,80002fe6 <metal_lc0_interrupt_vector_handler+0x6c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:215 (discriminator 1)
    80002fbe:	f6843503          	ld	a0,-152(s0)
    80002fc2:	97fff0ef          	jal	ra,80002940 <__metal_driver_cpu_interrupt_controller>
    80002fc6:	f6a43023          	sd	a0,-160(s0)
    80002fca:	f6043783          	ld	a5,-160(s0)
    80002fce:	3287b783          	ld	a5,808(a5)
    80002fd2:	f4f43c23          	sd	a5,-168(s0)
    80002fd6:	f6043783          	ld	a5,-160(s0)
    80002fda:	3187b783          	ld	a5,792(a5)
    80002fde:	f5843583          	ld	a1,-168(s0)
    80002fe2:	4541                	li	a0,16
    80002fe4:	9782                	jalr	a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:216
}
    80002fe6:	0001                	nop
    80002fe8:	70aa                	ld	ra,168(sp)
    80002fea:	728a                	ld	t0,160(sp)
    80002fec:	636a                	ld	t1,152(sp)
    80002fee:	63ca                	ld	t2,144(sp)
    80002ff0:	642a                	ld	s0,136(sp)
    80002ff2:	650a                	ld	a0,128(sp)
    80002ff4:	75e6                	ld	a1,120(sp)
    80002ff6:	7646                	ld	a2,112(sp)
    80002ff8:	76a6                	ld	a3,104(sp)
    80002ffa:	7706                	ld	a4,96(sp)
    80002ffc:	67e6                	ld	a5,88(sp)
    80002ffe:	6846                	ld	a6,80(sp)
    80003000:	68a6                	ld	a7,72(sp)
    80003002:	6e06                	ld	t3,64(sp)
    80003004:	7ee2                	ld	t4,56(sp)
    80003006:	7f42                	ld	t5,48(sp)
    80003008:	7fa2                	ld	t6,40(sp)
    8000300a:	614d                	addi	sp,sp,176
    8000300c:	30200073          	mret

0000000080003010 <metal_lc1_interrupt_vector_handler>:
metal_lc1_interrupt_vector_handler():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:219

/* The metal_lc1_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc1_interrupt_vector_handler(void) {
    80003010:	7171                	addi	sp,sp,-176
    80003012:	f506                	sd	ra,168(sp)
    80003014:	f116                	sd	t0,160(sp)
    80003016:	ed1a                	sd	t1,152(sp)
    80003018:	e91e                	sd	t2,144(sp)
    8000301a:	e522                	sd	s0,136(sp)
    8000301c:	e12a                	sd	a0,128(sp)
    8000301e:	fcae                	sd	a1,120(sp)
    80003020:	f8b2                	sd	a2,112(sp)
    80003022:	f4b6                	sd	a3,104(sp)
    80003024:	f0ba                	sd	a4,96(sp)
    80003026:	ecbe                	sd	a5,88(sp)
    80003028:	e8c2                	sd	a6,80(sp)
    8000302a:	e4c6                	sd	a7,72(sp)
    8000302c:	e0f2                	sd	t3,64(sp)
    8000302e:	fc76                	sd	t4,56(sp)
    80003030:	f87a                	sd	t5,48(sp)
    80003032:	f47e                	sd	t6,40(sp)
    80003034:	1900                	addi	s0,sp,176
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:220
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC1);
    80003036:	995ff0ef          	jal	ra,800029ca <__metal_myhart_id>
    8000303a:	87aa                	mv	a5,a0
    8000303c:	00004717          	auipc	a4,0x4
    80003040:	52c70713          	addi	a4,a4,1324 # 80007568 <__metal_cpu_table>
    80003044:	078e                	slli	a5,a5,0x3
    80003046:	97ba                	add	a5,a5,a4
    80003048:	639c                	ld	a5,0(a5)
    8000304a:	f6f43423          	sd	a5,-152(s0)
    8000304e:	f6843783          	ld	a5,-152(s0)
    80003052:	c78d                	beqz	a5,8000307c <metal_lc1_interrupt_vector_handler+0x6c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:220 (discriminator 1)
    80003054:	f6843503          	ld	a0,-152(s0)
    80003058:	8e9ff0ef          	jal	ra,80002940 <__metal_driver_cpu_interrupt_controller>
    8000305c:	f6a43023          	sd	a0,-160(s0)
    80003060:	f6043783          	ld	a5,-160(s0)
    80003064:	3487b783          	ld	a5,840(a5)
    80003068:	f4f43c23          	sd	a5,-168(s0)
    8000306c:	f6043783          	ld	a5,-160(s0)
    80003070:	3387b783          	ld	a5,824(a5)
    80003074:	f5843583          	ld	a1,-168(s0)
    80003078:	4545                	li	a0,17
    8000307a:	9782                	jalr	a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:221
}
    8000307c:	0001                	nop
    8000307e:	70aa                	ld	ra,168(sp)
    80003080:	728a                	ld	t0,160(sp)
    80003082:	636a                	ld	t1,152(sp)
    80003084:	63ca                	ld	t2,144(sp)
    80003086:	642a                	ld	s0,136(sp)
    80003088:	650a                	ld	a0,128(sp)
    8000308a:	75e6                	ld	a1,120(sp)
    8000308c:	7646                	ld	a2,112(sp)
    8000308e:	76a6                	ld	a3,104(sp)
    80003090:	7706                	ld	a4,96(sp)
    80003092:	67e6                	ld	a5,88(sp)
    80003094:	6846                	ld	a6,80(sp)
    80003096:	68a6                	ld	a7,72(sp)
    80003098:	6e06                	ld	t3,64(sp)
    8000309a:	7ee2                	ld	t4,56(sp)
    8000309c:	7f42                	ld	t5,48(sp)
    8000309e:	7fa2                	ld	t6,40(sp)
    800030a0:	614d                	addi	sp,sp,176
    800030a2:	30200073          	mret

00000000800030a6 <metal_lc2_interrupt_vector_handler>:
metal_lc2_interrupt_vector_handler():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:224

/* The metal_lc2_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc2_interrupt_vector_handler(void) {
    800030a6:	7171                	addi	sp,sp,-176
    800030a8:	f506                	sd	ra,168(sp)
    800030aa:	f116                	sd	t0,160(sp)
    800030ac:	ed1a                	sd	t1,152(sp)
    800030ae:	e91e                	sd	t2,144(sp)
    800030b0:	e522                	sd	s0,136(sp)
    800030b2:	e12a                	sd	a0,128(sp)
    800030b4:	fcae                	sd	a1,120(sp)
    800030b6:	f8b2                	sd	a2,112(sp)
    800030b8:	f4b6                	sd	a3,104(sp)
    800030ba:	f0ba                	sd	a4,96(sp)
    800030bc:	ecbe                	sd	a5,88(sp)
    800030be:	e8c2                	sd	a6,80(sp)
    800030c0:	e4c6                	sd	a7,72(sp)
    800030c2:	e0f2                	sd	t3,64(sp)
    800030c4:	fc76                	sd	t4,56(sp)
    800030c6:	f87a                	sd	t5,48(sp)
    800030c8:	f47e                	sd	t6,40(sp)
    800030ca:	1900                	addi	s0,sp,176
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:225
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC2);
    800030cc:	8ffff0ef          	jal	ra,800029ca <__metal_myhart_id>
    800030d0:	87aa                	mv	a5,a0
    800030d2:	00004717          	auipc	a4,0x4
    800030d6:	49670713          	addi	a4,a4,1174 # 80007568 <__metal_cpu_table>
    800030da:	078e                	slli	a5,a5,0x3
    800030dc:	97ba                	add	a5,a5,a4
    800030de:	639c                	ld	a5,0(a5)
    800030e0:	f6f43423          	sd	a5,-152(s0)
    800030e4:	f6843783          	ld	a5,-152(s0)
    800030e8:	c78d                	beqz	a5,80003112 <metal_lc2_interrupt_vector_handler+0x6c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:225 (discriminator 1)
    800030ea:	f6843503          	ld	a0,-152(s0)
    800030ee:	853ff0ef          	jal	ra,80002940 <__metal_driver_cpu_interrupt_controller>
    800030f2:	f6a43023          	sd	a0,-160(s0)
    800030f6:	f6043783          	ld	a5,-160(s0)
    800030fa:	3687b783          	ld	a5,872(a5)
    800030fe:	f4f43c23          	sd	a5,-168(s0)
    80003102:	f6043783          	ld	a5,-160(s0)
    80003106:	3587b783          	ld	a5,856(a5)
    8000310a:	f5843583          	ld	a1,-168(s0)
    8000310e:	4549                	li	a0,18
    80003110:	9782                	jalr	a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:226
}
    80003112:	0001                	nop
    80003114:	70aa                	ld	ra,168(sp)
    80003116:	728a                	ld	t0,160(sp)
    80003118:	636a                	ld	t1,152(sp)
    8000311a:	63ca                	ld	t2,144(sp)
    8000311c:	642a                	ld	s0,136(sp)
    8000311e:	650a                	ld	a0,128(sp)
    80003120:	75e6                	ld	a1,120(sp)
    80003122:	7646                	ld	a2,112(sp)
    80003124:	76a6                	ld	a3,104(sp)
    80003126:	7706                	ld	a4,96(sp)
    80003128:	67e6                	ld	a5,88(sp)
    8000312a:	6846                	ld	a6,80(sp)
    8000312c:	68a6                	ld	a7,72(sp)
    8000312e:	6e06                	ld	t3,64(sp)
    80003130:	7ee2                	ld	t4,56(sp)
    80003132:	7f42                	ld	t5,48(sp)
    80003134:	7fa2                	ld	t6,40(sp)
    80003136:	614d                	addi	sp,sp,176
    80003138:	30200073          	mret

000000008000313c <metal_lc3_interrupt_vector_handler>:
metal_lc3_interrupt_vector_handler():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:229

/* The metal_lc3_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc3_interrupt_vector_handler(void) {
    8000313c:	7171                	addi	sp,sp,-176
    8000313e:	f506                	sd	ra,168(sp)
    80003140:	f116                	sd	t0,160(sp)
    80003142:	ed1a                	sd	t1,152(sp)
    80003144:	e91e                	sd	t2,144(sp)
    80003146:	e522                	sd	s0,136(sp)
    80003148:	e12a                	sd	a0,128(sp)
    8000314a:	fcae                	sd	a1,120(sp)
    8000314c:	f8b2                	sd	a2,112(sp)
    8000314e:	f4b6                	sd	a3,104(sp)
    80003150:	f0ba                	sd	a4,96(sp)
    80003152:	ecbe                	sd	a5,88(sp)
    80003154:	e8c2                	sd	a6,80(sp)
    80003156:	e4c6                	sd	a7,72(sp)
    80003158:	e0f2                	sd	t3,64(sp)
    8000315a:	fc76                	sd	t4,56(sp)
    8000315c:	f87a                	sd	t5,48(sp)
    8000315e:	f47e                	sd	t6,40(sp)
    80003160:	1900                	addi	s0,sp,176
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:230
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC3);
    80003162:	869ff0ef          	jal	ra,800029ca <__metal_myhart_id>
    80003166:	87aa                	mv	a5,a0
    80003168:	00004717          	auipc	a4,0x4
    8000316c:	40070713          	addi	a4,a4,1024 # 80007568 <__metal_cpu_table>
    80003170:	078e                	slli	a5,a5,0x3
    80003172:	97ba                	add	a5,a5,a4
    80003174:	639c                	ld	a5,0(a5)
    80003176:	f6f43423          	sd	a5,-152(s0)
    8000317a:	f6843783          	ld	a5,-152(s0)
    8000317e:	c78d                	beqz	a5,800031a8 <metal_lc3_interrupt_vector_handler+0x6c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:230 (discriminator 1)
    80003180:	f6843503          	ld	a0,-152(s0)
    80003184:	fbcff0ef          	jal	ra,80002940 <__metal_driver_cpu_interrupt_controller>
    80003188:	f6a43023          	sd	a0,-160(s0)
    8000318c:	f6043783          	ld	a5,-160(s0)
    80003190:	3887b783          	ld	a5,904(a5)
    80003194:	f4f43c23          	sd	a5,-168(s0)
    80003198:	f6043783          	ld	a5,-160(s0)
    8000319c:	3787b783          	ld	a5,888(a5)
    800031a0:	f5843583          	ld	a1,-168(s0)
    800031a4:	454d                	li	a0,19
    800031a6:	9782                	jalr	a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:231
}
    800031a8:	0001                	nop
    800031aa:	70aa                	ld	ra,168(sp)
    800031ac:	728a                	ld	t0,160(sp)
    800031ae:	636a                	ld	t1,152(sp)
    800031b0:	63ca                	ld	t2,144(sp)
    800031b2:	642a                	ld	s0,136(sp)
    800031b4:	650a                	ld	a0,128(sp)
    800031b6:	75e6                	ld	a1,120(sp)
    800031b8:	7646                	ld	a2,112(sp)
    800031ba:	76a6                	ld	a3,104(sp)
    800031bc:	7706                	ld	a4,96(sp)
    800031be:	67e6                	ld	a5,88(sp)
    800031c0:	6846                	ld	a6,80(sp)
    800031c2:	68a6                	ld	a7,72(sp)
    800031c4:	6e06                	ld	t3,64(sp)
    800031c6:	7ee2                	ld	t4,56(sp)
    800031c8:	7f42                	ld	t5,48(sp)
    800031ca:	7fa2                	ld	t6,40(sp)
    800031cc:	614d                	addi	sp,sp,176
    800031ce:	30200073          	mret

00000000800031d2 <metal_lc4_interrupt_vector_handler>:
metal_lc4_interrupt_vector_handler():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:234

/* The metal_lc4_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc4_interrupt_vector_handler(void) {
    800031d2:	7171                	addi	sp,sp,-176
    800031d4:	f506                	sd	ra,168(sp)
    800031d6:	f116                	sd	t0,160(sp)
    800031d8:	ed1a                	sd	t1,152(sp)
    800031da:	e91e                	sd	t2,144(sp)
    800031dc:	e522                	sd	s0,136(sp)
    800031de:	e12a                	sd	a0,128(sp)
    800031e0:	fcae                	sd	a1,120(sp)
    800031e2:	f8b2                	sd	a2,112(sp)
    800031e4:	f4b6                	sd	a3,104(sp)
    800031e6:	f0ba                	sd	a4,96(sp)
    800031e8:	ecbe                	sd	a5,88(sp)
    800031ea:	e8c2                	sd	a6,80(sp)
    800031ec:	e4c6                	sd	a7,72(sp)
    800031ee:	e0f2                	sd	t3,64(sp)
    800031f0:	fc76                	sd	t4,56(sp)
    800031f2:	f87a                	sd	t5,48(sp)
    800031f4:	f47e                	sd	t6,40(sp)
    800031f6:	1900                	addi	s0,sp,176
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:235
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC4);
    800031f8:	fd2ff0ef          	jal	ra,800029ca <__metal_myhart_id>
    800031fc:	87aa                	mv	a5,a0
    800031fe:	00004717          	auipc	a4,0x4
    80003202:	36a70713          	addi	a4,a4,874 # 80007568 <__metal_cpu_table>
    80003206:	078e                	slli	a5,a5,0x3
    80003208:	97ba                	add	a5,a5,a4
    8000320a:	639c                	ld	a5,0(a5)
    8000320c:	f6f43423          	sd	a5,-152(s0)
    80003210:	f6843783          	ld	a5,-152(s0)
    80003214:	c78d                	beqz	a5,8000323e <metal_lc4_interrupt_vector_handler+0x6c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:235 (discriminator 1)
    80003216:	f6843503          	ld	a0,-152(s0)
    8000321a:	f26ff0ef          	jal	ra,80002940 <__metal_driver_cpu_interrupt_controller>
    8000321e:	f6a43023          	sd	a0,-160(s0)
    80003222:	f6043783          	ld	a5,-160(s0)
    80003226:	3a87b783          	ld	a5,936(a5)
    8000322a:	f4f43c23          	sd	a5,-168(s0)
    8000322e:	f6043783          	ld	a5,-160(s0)
    80003232:	3987b783          	ld	a5,920(a5)
    80003236:	f5843583          	ld	a1,-168(s0)
    8000323a:	4551                	li	a0,20
    8000323c:	9782                	jalr	a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:236
}
    8000323e:	0001                	nop
    80003240:	70aa                	ld	ra,168(sp)
    80003242:	728a                	ld	t0,160(sp)
    80003244:	636a                	ld	t1,152(sp)
    80003246:	63ca                	ld	t2,144(sp)
    80003248:	642a                	ld	s0,136(sp)
    8000324a:	650a                	ld	a0,128(sp)
    8000324c:	75e6                	ld	a1,120(sp)
    8000324e:	7646                	ld	a2,112(sp)
    80003250:	76a6                	ld	a3,104(sp)
    80003252:	7706                	ld	a4,96(sp)
    80003254:	67e6                	ld	a5,88(sp)
    80003256:	6846                	ld	a6,80(sp)
    80003258:	68a6                	ld	a7,72(sp)
    8000325a:	6e06                	ld	t3,64(sp)
    8000325c:	7ee2                	ld	t4,56(sp)
    8000325e:	7f42                	ld	t5,48(sp)
    80003260:	7fa2                	ld	t6,40(sp)
    80003262:	614d                	addi	sp,sp,176
    80003264:	30200073          	mret

0000000080003268 <metal_lc5_interrupt_vector_handler>:
metal_lc5_interrupt_vector_handler():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:239

/* The metal_lc5_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc5_interrupt_vector_handler(void) {
    80003268:	7171                	addi	sp,sp,-176
    8000326a:	f506                	sd	ra,168(sp)
    8000326c:	f116                	sd	t0,160(sp)
    8000326e:	ed1a                	sd	t1,152(sp)
    80003270:	e91e                	sd	t2,144(sp)
    80003272:	e522                	sd	s0,136(sp)
    80003274:	e12a                	sd	a0,128(sp)
    80003276:	fcae                	sd	a1,120(sp)
    80003278:	f8b2                	sd	a2,112(sp)
    8000327a:	f4b6                	sd	a3,104(sp)
    8000327c:	f0ba                	sd	a4,96(sp)
    8000327e:	ecbe                	sd	a5,88(sp)
    80003280:	e8c2                	sd	a6,80(sp)
    80003282:	e4c6                	sd	a7,72(sp)
    80003284:	e0f2                	sd	t3,64(sp)
    80003286:	fc76                	sd	t4,56(sp)
    80003288:	f87a                	sd	t5,48(sp)
    8000328a:	f47e                	sd	t6,40(sp)
    8000328c:	1900                	addi	s0,sp,176
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:240
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC5);
    8000328e:	f3cff0ef          	jal	ra,800029ca <__metal_myhart_id>
    80003292:	87aa                	mv	a5,a0
    80003294:	00004717          	auipc	a4,0x4
    80003298:	2d470713          	addi	a4,a4,724 # 80007568 <__metal_cpu_table>
    8000329c:	078e                	slli	a5,a5,0x3
    8000329e:	97ba                	add	a5,a5,a4
    800032a0:	639c                	ld	a5,0(a5)
    800032a2:	f6f43423          	sd	a5,-152(s0)
    800032a6:	f6843783          	ld	a5,-152(s0)
    800032aa:	c78d                	beqz	a5,800032d4 <metal_lc5_interrupt_vector_handler+0x6c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:240 (discriminator 1)
    800032ac:	f6843503          	ld	a0,-152(s0)
    800032b0:	e90ff0ef          	jal	ra,80002940 <__metal_driver_cpu_interrupt_controller>
    800032b4:	f6a43023          	sd	a0,-160(s0)
    800032b8:	f6043783          	ld	a5,-160(s0)
    800032bc:	3c87b783          	ld	a5,968(a5)
    800032c0:	f4f43c23          	sd	a5,-168(s0)
    800032c4:	f6043783          	ld	a5,-160(s0)
    800032c8:	3b87b783          	ld	a5,952(a5)
    800032cc:	f5843583          	ld	a1,-168(s0)
    800032d0:	4555                	li	a0,21
    800032d2:	9782                	jalr	a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:241
}
    800032d4:	0001                	nop
    800032d6:	70aa                	ld	ra,168(sp)
    800032d8:	728a                	ld	t0,160(sp)
    800032da:	636a                	ld	t1,152(sp)
    800032dc:	63ca                	ld	t2,144(sp)
    800032de:	642a                	ld	s0,136(sp)
    800032e0:	650a                	ld	a0,128(sp)
    800032e2:	75e6                	ld	a1,120(sp)
    800032e4:	7646                	ld	a2,112(sp)
    800032e6:	76a6                	ld	a3,104(sp)
    800032e8:	7706                	ld	a4,96(sp)
    800032ea:	67e6                	ld	a5,88(sp)
    800032ec:	6846                	ld	a6,80(sp)
    800032ee:	68a6                	ld	a7,72(sp)
    800032f0:	6e06                	ld	t3,64(sp)
    800032f2:	7ee2                	ld	t4,56(sp)
    800032f4:	7f42                	ld	t5,48(sp)
    800032f6:	7fa2                	ld	t6,40(sp)
    800032f8:	614d                	addi	sp,sp,176
    800032fa:	30200073          	mret

00000000800032fe <metal_lc6_interrupt_vector_handler>:
metal_lc6_interrupt_vector_handler():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:244

/* The metal_lc6_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc6_interrupt_vector_handler(void) {
    800032fe:	7171                	addi	sp,sp,-176
    80003300:	f506                	sd	ra,168(sp)
    80003302:	f116                	sd	t0,160(sp)
    80003304:	ed1a                	sd	t1,152(sp)
    80003306:	e91e                	sd	t2,144(sp)
    80003308:	e522                	sd	s0,136(sp)
    8000330a:	e12a                	sd	a0,128(sp)
    8000330c:	fcae                	sd	a1,120(sp)
    8000330e:	f8b2                	sd	a2,112(sp)
    80003310:	f4b6                	sd	a3,104(sp)
    80003312:	f0ba                	sd	a4,96(sp)
    80003314:	ecbe                	sd	a5,88(sp)
    80003316:	e8c2                	sd	a6,80(sp)
    80003318:	e4c6                	sd	a7,72(sp)
    8000331a:	e0f2                	sd	t3,64(sp)
    8000331c:	fc76                	sd	t4,56(sp)
    8000331e:	f87a                	sd	t5,48(sp)
    80003320:	f47e                	sd	t6,40(sp)
    80003322:	1900                	addi	s0,sp,176
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:245
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC6);
    80003324:	ea6ff0ef          	jal	ra,800029ca <__metal_myhart_id>
    80003328:	87aa                	mv	a5,a0
    8000332a:	00004717          	auipc	a4,0x4
    8000332e:	23e70713          	addi	a4,a4,574 # 80007568 <__metal_cpu_table>
    80003332:	078e                	slli	a5,a5,0x3
    80003334:	97ba                	add	a5,a5,a4
    80003336:	639c                	ld	a5,0(a5)
    80003338:	f6f43423          	sd	a5,-152(s0)
    8000333c:	f6843783          	ld	a5,-152(s0)
    80003340:	c78d                	beqz	a5,8000336a <metal_lc6_interrupt_vector_handler+0x6c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:245 (discriminator 1)
    80003342:	f6843503          	ld	a0,-152(s0)
    80003346:	dfaff0ef          	jal	ra,80002940 <__metal_driver_cpu_interrupt_controller>
    8000334a:	f6a43023          	sd	a0,-160(s0)
    8000334e:	f6043783          	ld	a5,-160(s0)
    80003352:	3e87b783          	ld	a5,1000(a5)
    80003356:	f4f43c23          	sd	a5,-168(s0)
    8000335a:	f6043783          	ld	a5,-160(s0)
    8000335e:	3d87b783          	ld	a5,984(a5)
    80003362:	f5843583          	ld	a1,-168(s0)
    80003366:	4559                	li	a0,22
    80003368:	9782                	jalr	a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:246
}
    8000336a:	0001                	nop
    8000336c:	70aa                	ld	ra,168(sp)
    8000336e:	728a                	ld	t0,160(sp)
    80003370:	636a                	ld	t1,152(sp)
    80003372:	63ca                	ld	t2,144(sp)
    80003374:	642a                	ld	s0,136(sp)
    80003376:	650a                	ld	a0,128(sp)
    80003378:	75e6                	ld	a1,120(sp)
    8000337a:	7646                	ld	a2,112(sp)
    8000337c:	76a6                	ld	a3,104(sp)
    8000337e:	7706                	ld	a4,96(sp)
    80003380:	67e6                	ld	a5,88(sp)
    80003382:	6846                	ld	a6,80(sp)
    80003384:	68a6                	ld	a7,72(sp)
    80003386:	6e06                	ld	t3,64(sp)
    80003388:	7ee2                	ld	t4,56(sp)
    8000338a:	7f42                	ld	t5,48(sp)
    8000338c:	7fa2                	ld	t6,40(sp)
    8000338e:	614d                	addi	sp,sp,176
    80003390:	30200073          	mret

0000000080003394 <metal_lc7_interrupt_vector_handler>:
metal_lc7_interrupt_vector_handler():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:249

/* The metal_lc7_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc7_interrupt_vector_handler(void) {
    80003394:	7171                	addi	sp,sp,-176
    80003396:	f506                	sd	ra,168(sp)
    80003398:	f116                	sd	t0,160(sp)
    8000339a:	ed1a                	sd	t1,152(sp)
    8000339c:	e91e                	sd	t2,144(sp)
    8000339e:	e522                	sd	s0,136(sp)
    800033a0:	e12a                	sd	a0,128(sp)
    800033a2:	fcae                	sd	a1,120(sp)
    800033a4:	f8b2                	sd	a2,112(sp)
    800033a6:	f4b6                	sd	a3,104(sp)
    800033a8:	f0ba                	sd	a4,96(sp)
    800033aa:	ecbe                	sd	a5,88(sp)
    800033ac:	e8c2                	sd	a6,80(sp)
    800033ae:	e4c6                	sd	a7,72(sp)
    800033b0:	e0f2                	sd	t3,64(sp)
    800033b2:	fc76                	sd	t4,56(sp)
    800033b4:	f87a                	sd	t5,48(sp)
    800033b6:	f47e                	sd	t6,40(sp)
    800033b8:	1900                	addi	s0,sp,176
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:250
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC7);
    800033ba:	e10ff0ef          	jal	ra,800029ca <__metal_myhart_id>
    800033be:	87aa                	mv	a5,a0
    800033c0:	00004717          	auipc	a4,0x4
    800033c4:	1a870713          	addi	a4,a4,424 # 80007568 <__metal_cpu_table>
    800033c8:	078e                	slli	a5,a5,0x3
    800033ca:	97ba                	add	a5,a5,a4
    800033cc:	639c                	ld	a5,0(a5)
    800033ce:	f6f43423          	sd	a5,-152(s0)
    800033d2:	f6843783          	ld	a5,-152(s0)
    800033d6:	c78d                	beqz	a5,80003400 <metal_lc7_interrupt_vector_handler+0x6c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:250 (discriminator 1)
    800033d8:	f6843503          	ld	a0,-152(s0)
    800033dc:	d64ff0ef          	jal	ra,80002940 <__metal_driver_cpu_interrupt_controller>
    800033e0:	f6a43023          	sd	a0,-160(s0)
    800033e4:	f6043783          	ld	a5,-160(s0)
    800033e8:	4087b783          	ld	a5,1032(a5)
    800033ec:	f4f43c23          	sd	a5,-168(s0)
    800033f0:	f6043783          	ld	a5,-160(s0)
    800033f4:	3f87b783          	ld	a5,1016(a5)
    800033f8:	f5843583          	ld	a1,-168(s0)
    800033fc:	455d                	li	a0,23
    800033fe:	9782                	jalr	a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:251
}
    80003400:	0001                	nop
    80003402:	70aa                	ld	ra,168(sp)
    80003404:	728a                	ld	t0,160(sp)
    80003406:	636a                	ld	t1,152(sp)
    80003408:	63ca                	ld	t2,144(sp)
    8000340a:	642a                	ld	s0,136(sp)
    8000340c:	650a                	ld	a0,128(sp)
    8000340e:	75e6                	ld	a1,120(sp)
    80003410:	7646                	ld	a2,112(sp)
    80003412:	76a6                	ld	a3,104(sp)
    80003414:	7706                	ld	a4,96(sp)
    80003416:	67e6                	ld	a5,88(sp)
    80003418:	6846                	ld	a6,80(sp)
    8000341a:	68a6                	ld	a7,72(sp)
    8000341c:	6e06                	ld	t3,64(sp)
    8000341e:	7ee2                	ld	t4,56(sp)
    80003420:	7f42                	ld	t5,48(sp)
    80003422:	7fa2                	ld	t6,40(sp)
    80003424:	614d                	addi	sp,sp,176
    80003426:	30200073          	mret

000000008000342a <metal_lc8_interrupt_vector_handler>:
metal_lc8_interrupt_vector_handler():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:254

/* The metal_lc8_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc8_interrupt_vector_handler(void) {
    8000342a:	7171                	addi	sp,sp,-176
    8000342c:	f506                	sd	ra,168(sp)
    8000342e:	f116                	sd	t0,160(sp)
    80003430:	ed1a                	sd	t1,152(sp)
    80003432:	e91e                	sd	t2,144(sp)
    80003434:	e522                	sd	s0,136(sp)
    80003436:	e12a                	sd	a0,128(sp)
    80003438:	fcae                	sd	a1,120(sp)
    8000343a:	f8b2                	sd	a2,112(sp)
    8000343c:	f4b6                	sd	a3,104(sp)
    8000343e:	f0ba                	sd	a4,96(sp)
    80003440:	ecbe                	sd	a5,88(sp)
    80003442:	e8c2                	sd	a6,80(sp)
    80003444:	e4c6                	sd	a7,72(sp)
    80003446:	e0f2                	sd	t3,64(sp)
    80003448:	fc76                	sd	t4,56(sp)
    8000344a:	f87a                	sd	t5,48(sp)
    8000344c:	f47e                	sd	t6,40(sp)
    8000344e:	1900                	addi	s0,sp,176
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:255
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC8);
    80003450:	d7aff0ef          	jal	ra,800029ca <__metal_myhart_id>
    80003454:	87aa                	mv	a5,a0
    80003456:	00004717          	auipc	a4,0x4
    8000345a:	11270713          	addi	a4,a4,274 # 80007568 <__metal_cpu_table>
    8000345e:	078e                	slli	a5,a5,0x3
    80003460:	97ba                	add	a5,a5,a4
    80003462:	639c                	ld	a5,0(a5)
    80003464:	f6f43423          	sd	a5,-152(s0)
    80003468:	f6843783          	ld	a5,-152(s0)
    8000346c:	c78d                	beqz	a5,80003496 <metal_lc8_interrupt_vector_handler+0x6c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:255 (discriminator 1)
    8000346e:	f6843503          	ld	a0,-152(s0)
    80003472:	cceff0ef          	jal	ra,80002940 <__metal_driver_cpu_interrupt_controller>
    80003476:	f6a43023          	sd	a0,-160(s0)
    8000347a:	f6043783          	ld	a5,-160(s0)
    8000347e:	4287b783          	ld	a5,1064(a5)
    80003482:	f4f43c23          	sd	a5,-168(s0)
    80003486:	f6043783          	ld	a5,-160(s0)
    8000348a:	4187b783          	ld	a5,1048(a5)
    8000348e:	f5843583          	ld	a1,-168(s0)
    80003492:	4561                	li	a0,24
    80003494:	9782                	jalr	a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:256
}
    80003496:	0001                	nop
    80003498:	70aa                	ld	ra,168(sp)
    8000349a:	728a                	ld	t0,160(sp)
    8000349c:	636a                	ld	t1,152(sp)
    8000349e:	63ca                	ld	t2,144(sp)
    800034a0:	642a                	ld	s0,136(sp)
    800034a2:	650a                	ld	a0,128(sp)
    800034a4:	75e6                	ld	a1,120(sp)
    800034a6:	7646                	ld	a2,112(sp)
    800034a8:	76a6                	ld	a3,104(sp)
    800034aa:	7706                	ld	a4,96(sp)
    800034ac:	67e6                	ld	a5,88(sp)
    800034ae:	6846                	ld	a6,80(sp)
    800034b0:	68a6                	ld	a7,72(sp)
    800034b2:	6e06                	ld	t3,64(sp)
    800034b4:	7ee2                	ld	t4,56(sp)
    800034b6:	7f42                	ld	t5,48(sp)
    800034b8:	7fa2                	ld	t6,40(sp)
    800034ba:	614d                	addi	sp,sp,176
    800034bc:	30200073          	mret

00000000800034c0 <metal_lc9_interrupt_vector_handler>:
metal_lc9_interrupt_vector_handler():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:259

/* The metal_lc9_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc9_interrupt_vector_handler(void) {
    800034c0:	7171                	addi	sp,sp,-176
    800034c2:	f506                	sd	ra,168(sp)
    800034c4:	f116                	sd	t0,160(sp)
    800034c6:	ed1a                	sd	t1,152(sp)
    800034c8:	e91e                	sd	t2,144(sp)
    800034ca:	e522                	sd	s0,136(sp)
    800034cc:	e12a                	sd	a0,128(sp)
    800034ce:	fcae                	sd	a1,120(sp)
    800034d0:	f8b2                	sd	a2,112(sp)
    800034d2:	f4b6                	sd	a3,104(sp)
    800034d4:	f0ba                	sd	a4,96(sp)
    800034d6:	ecbe                	sd	a5,88(sp)
    800034d8:	e8c2                	sd	a6,80(sp)
    800034da:	e4c6                	sd	a7,72(sp)
    800034dc:	e0f2                	sd	t3,64(sp)
    800034de:	fc76                	sd	t4,56(sp)
    800034e0:	f87a                	sd	t5,48(sp)
    800034e2:	f47e                	sd	t6,40(sp)
    800034e4:	1900                	addi	s0,sp,176
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:260
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC9);
    800034e6:	ce4ff0ef          	jal	ra,800029ca <__metal_myhart_id>
    800034ea:	87aa                	mv	a5,a0
    800034ec:	00004717          	auipc	a4,0x4
    800034f0:	07c70713          	addi	a4,a4,124 # 80007568 <__metal_cpu_table>
    800034f4:	078e                	slli	a5,a5,0x3
    800034f6:	97ba                	add	a5,a5,a4
    800034f8:	639c                	ld	a5,0(a5)
    800034fa:	f6f43423          	sd	a5,-152(s0)
    800034fe:	f6843783          	ld	a5,-152(s0)
    80003502:	c78d                	beqz	a5,8000352c <metal_lc9_interrupt_vector_handler+0x6c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:260 (discriminator 1)
    80003504:	f6843503          	ld	a0,-152(s0)
    80003508:	c38ff0ef          	jal	ra,80002940 <__metal_driver_cpu_interrupt_controller>
    8000350c:	f6a43023          	sd	a0,-160(s0)
    80003510:	f6043783          	ld	a5,-160(s0)
    80003514:	4487b783          	ld	a5,1096(a5)
    80003518:	f4f43c23          	sd	a5,-168(s0)
    8000351c:	f6043783          	ld	a5,-160(s0)
    80003520:	4387b783          	ld	a5,1080(a5)
    80003524:	f5843583          	ld	a1,-168(s0)
    80003528:	4565                	li	a0,25
    8000352a:	9782                	jalr	a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:261
}
    8000352c:	0001                	nop
    8000352e:	70aa                	ld	ra,168(sp)
    80003530:	728a                	ld	t0,160(sp)
    80003532:	636a                	ld	t1,152(sp)
    80003534:	63ca                	ld	t2,144(sp)
    80003536:	642a                	ld	s0,136(sp)
    80003538:	650a                	ld	a0,128(sp)
    8000353a:	75e6                	ld	a1,120(sp)
    8000353c:	7646                	ld	a2,112(sp)
    8000353e:	76a6                	ld	a3,104(sp)
    80003540:	7706                	ld	a4,96(sp)
    80003542:	67e6                	ld	a5,88(sp)
    80003544:	6846                	ld	a6,80(sp)
    80003546:	68a6                	ld	a7,72(sp)
    80003548:	6e06                	ld	t3,64(sp)
    8000354a:	7ee2                	ld	t4,56(sp)
    8000354c:	7f42                	ld	t5,48(sp)
    8000354e:	7fa2                	ld	t6,40(sp)
    80003550:	614d                	addi	sp,sp,176
    80003552:	30200073          	mret

0000000080003556 <metal_lc10_interrupt_vector_handler>:
metal_lc10_interrupt_vector_handler():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:265

/* The metal_lc10_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt))
metal_lc10_interrupt_vector_handler(void) {
    80003556:	7171                	addi	sp,sp,-176
    80003558:	f506                	sd	ra,168(sp)
    8000355a:	f116                	sd	t0,160(sp)
    8000355c:	ed1a                	sd	t1,152(sp)
    8000355e:	e91e                	sd	t2,144(sp)
    80003560:	e522                	sd	s0,136(sp)
    80003562:	e12a                	sd	a0,128(sp)
    80003564:	fcae                	sd	a1,120(sp)
    80003566:	f8b2                	sd	a2,112(sp)
    80003568:	f4b6                	sd	a3,104(sp)
    8000356a:	f0ba                	sd	a4,96(sp)
    8000356c:	ecbe                	sd	a5,88(sp)
    8000356e:	e8c2                	sd	a6,80(sp)
    80003570:	e4c6                	sd	a7,72(sp)
    80003572:	e0f2                	sd	t3,64(sp)
    80003574:	fc76                	sd	t4,56(sp)
    80003576:	f87a                	sd	t5,48(sp)
    80003578:	f47e                	sd	t6,40(sp)
    8000357a:	1900                	addi	s0,sp,176
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:266
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC10);
    8000357c:	c4eff0ef          	jal	ra,800029ca <__metal_myhart_id>
    80003580:	87aa                	mv	a5,a0
    80003582:	00004717          	auipc	a4,0x4
    80003586:	fe670713          	addi	a4,a4,-26 # 80007568 <__metal_cpu_table>
    8000358a:	078e                	slli	a5,a5,0x3
    8000358c:	97ba                	add	a5,a5,a4
    8000358e:	639c                	ld	a5,0(a5)
    80003590:	f6f43423          	sd	a5,-152(s0)
    80003594:	f6843783          	ld	a5,-152(s0)
    80003598:	c78d                	beqz	a5,800035c2 <metal_lc10_interrupt_vector_handler+0x6c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:266 (discriminator 1)
    8000359a:	f6843503          	ld	a0,-152(s0)
    8000359e:	ba2ff0ef          	jal	ra,80002940 <__metal_driver_cpu_interrupt_controller>
    800035a2:	f6a43023          	sd	a0,-160(s0)
    800035a6:	f6043783          	ld	a5,-160(s0)
    800035aa:	4687b783          	ld	a5,1128(a5)
    800035ae:	f4f43c23          	sd	a5,-168(s0)
    800035b2:	f6043783          	ld	a5,-160(s0)
    800035b6:	4587b783          	ld	a5,1112(a5)
    800035ba:	f5843583          	ld	a1,-168(s0)
    800035be:	4569                	li	a0,26
    800035c0:	9782                	jalr	a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:267
}
    800035c2:	0001                	nop
    800035c4:	70aa                	ld	ra,168(sp)
    800035c6:	728a                	ld	t0,160(sp)
    800035c8:	636a                	ld	t1,152(sp)
    800035ca:	63ca                	ld	t2,144(sp)
    800035cc:	642a                	ld	s0,136(sp)
    800035ce:	650a                	ld	a0,128(sp)
    800035d0:	75e6                	ld	a1,120(sp)
    800035d2:	7646                	ld	a2,112(sp)
    800035d4:	76a6                	ld	a3,104(sp)
    800035d6:	7706                	ld	a4,96(sp)
    800035d8:	67e6                	ld	a5,88(sp)
    800035da:	6846                	ld	a6,80(sp)
    800035dc:	68a6                	ld	a7,72(sp)
    800035de:	6e06                	ld	t3,64(sp)
    800035e0:	7ee2                	ld	t4,56(sp)
    800035e2:	7f42                	ld	t5,48(sp)
    800035e4:	7fa2                	ld	t6,40(sp)
    800035e6:	614d                	addi	sp,sp,176
    800035e8:	30200073          	mret

00000000800035ec <metal_lc11_interrupt_vector_handler>:
metal_lc11_interrupt_vector_handler():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:271

/* The metal_lc11_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt))
metal_lc11_interrupt_vector_handler(void) {
    800035ec:	7171                	addi	sp,sp,-176
    800035ee:	f506                	sd	ra,168(sp)
    800035f0:	f116                	sd	t0,160(sp)
    800035f2:	ed1a                	sd	t1,152(sp)
    800035f4:	e91e                	sd	t2,144(sp)
    800035f6:	e522                	sd	s0,136(sp)
    800035f8:	e12a                	sd	a0,128(sp)
    800035fa:	fcae                	sd	a1,120(sp)
    800035fc:	f8b2                	sd	a2,112(sp)
    800035fe:	f4b6                	sd	a3,104(sp)
    80003600:	f0ba                	sd	a4,96(sp)
    80003602:	ecbe                	sd	a5,88(sp)
    80003604:	e8c2                	sd	a6,80(sp)
    80003606:	e4c6                	sd	a7,72(sp)
    80003608:	e0f2                	sd	t3,64(sp)
    8000360a:	fc76                	sd	t4,56(sp)
    8000360c:	f87a                	sd	t5,48(sp)
    8000360e:	f47e                	sd	t6,40(sp)
    80003610:	1900                	addi	s0,sp,176
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:272
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC11);
    80003612:	bb8ff0ef          	jal	ra,800029ca <__metal_myhart_id>
    80003616:	87aa                	mv	a5,a0
    80003618:	00004717          	auipc	a4,0x4
    8000361c:	f5070713          	addi	a4,a4,-176 # 80007568 <__metal_cpu_table>
    80003620:	078e                	slli	a5,a5,0x3
    80003622:	97ba                	add	a5,a5,a4
    80003624:	639c                	ld	a5,0(a5)
    80003626:	f6f43423          	sd	a5,-152(s0)
    8000362a:	f6843783          	ld	a5,-152(s0)
    8000362e:	c78d                	beqz	a5,80003658 <metal_lc11_interrupt_vector_handler+0x6c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:272 (discriminator 1)
    80003630:	f6843503          	ld	a0,-152(s0)
    80003634:	b0cff0ef          	jal	ra,80002940 <__metal_driver_cpu_interrupt_controller>
    80003638:	f6a43023          	sd	a0,-160(s0)
    8000363c:	f6043783          	ld	a5,-160(s0)
    80003640:	4887b783          	ld	a5,1160(a5)
    80003644:	f4f43c23          	sd	a5,-168(s0)
    80003648:	f6043783          	ld	a5,-160(s0)
    8000364c:	4787b783          	ld	a5,1144(a5)
    80003650:	f5843583          	ld	a1,-168(s0)
    80003654:	456d                	li	a0,27
    80003656:	9782                	jalr	a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:273
}
    80003658:	0001                	nop
    8000365a:	70aa                	ld	ra,168(sp)
    8000365c:	728a                	ld	t0,160(sp)
    8000365e:	636a                	ld	t1,152(sp)
    80003660:	63ca                	ld	t2,144(sp)
    80003662:	642a                	ld	s0,136(sp)
    80003664:	650a                	ld	a0,128(sp)
    80003666:	75e6                	ld	a1,120(sp)
    80003668:	7646                	ld	a2,112(sp)
    8000366a:	76a6                	ld	a3,104(sp)
    8000366c:	7706                	ld	a4,96(sp)
    8000366e:	67e6                	ld	a5,88(sp)
    80003670:	6846                	ld	a6,80(sp)
    80003672:	68a6                	ld	a7,72(sp)
    80003674:	6e06                	ld	t3,64(sp)
    80003676:	7ee2                	ld	t4,56(sp)
    80003678:	7f42                	ld	t5,48(sp)
    8000367a:	7fa2                	ld	t6,40(sp)
    8000367c:	614d                	addi	sp,sp,176
    8000367e:	30200073          	mret

0000000080003682 <metal_lc12_interrupt_vector_handler>:
metal_lc12_interrupt_vector_handler():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:277

/* The metal_lc12_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt))
metal_lc12_interrupt_vector_handler(void) {
    80003682:	7171                	addi	sp,sp,-176
    80003684:	f506                	sd	ra,168(sp)
    80003686:	f116                	sd	t0,160(sp)
    80003688:	ed1a                	sd	t1,152(sp)
    8000368a:	e91e                	sd	t2,144(sp)
    8000368c:	e522                	sd	s0,136(sp)
    8000368e:	e12a                	sd	a0,128(sp)
    80003690:	fcae                	sd	a1,120(sp)
    80003692:	f8b2                	sd	a2,112(sp)
    80003694:	f4b6                	sd	a3,104(sp)
    80003696:	f0ba                	sd	a4,96(sp)
    80003698:	ecbe                	sd	a5,88(sp)
    8000369a:	e8c2                	sd	a6,80(sp)
    8000369c:	e4c6                	sd	a7,72(sp)
    8000369e:	e0f2                	sd	t3,64(sp)
    800036a0:	fc76                	sd	t4,56(sp)
    800036a2:	f87a                	sd	t5,48(sp)
    800036a4:	f47e                	sd	t6,40(sp)
    800036a6:	1900                	addi	s0,sp,176
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:278
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC12);
    800036a8:	b22ff0ef          	jal	ra,800029ca <__metal_myhart_id>
    800036ac:	87aa                	mv	a5,a0
    800036ae:	00004717          	auipc	a4,0x4
    800036b2:	eba70713          	addi	a4,a4,-326 # 80007568 <__metal_cpu_table>
    800036b6:	078e                	slli	a5,a5,0x3
    800036b8:	97ba                	add	a5,a5,a4
    800036ba:	639c                	ld	a5,0(a5)
    800036bc:	f6f43423          	sd	a5,-152(s0)
    800036c0:	f6843783          	ld	a5,-152(s0)
    800036c4:	c78d                	beqz	a5,800036ee <metal_lc12_interrupt_vector_handler+0x6c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:278 (discriminator 1)
    800036c6:	f6843503          	ld	a0,-152(s0)
    800036ca:	a76ff0ef          	jal	ra,80002940 <__metal_driver_cpu_interrupt_controller>
    800036ce:	f6a43023          	sd	a0,-160(s0)
    800036d2:	f6043783          	ld	a5,-160(s0)
    800036d6:	4a87b783          	ld	a5,1192(a5)
    800036da:	f4f43c23          	sd	a5,-168(s0)
    800036de:	f6043783          	ld	a5,-160(s0)
    800036e2:	4987b783          	ld	a5,1176(a5)
    800036e6:	f5843583          	ld	a1,-168(s0)
    800036ea:	4571                	li	a0,28
    800036ec:	9782                	jalr	a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:279
}
    800036ee:	0001                	nop
    800036f0:	70aa                	ld	ra,168(sp)
    800036f2:	728a                	ld	t0,160(sp)
    800036f4:	636a                	ld	t1,152(sp)
    800036f6:	63ca                	ld	t2,144(sp)
    800036f8:	642a                	ld	s0,136(sp)
    800036fa:	650a                	ld	a0,128(sp)
    800036fc:	75e6                	ld	a1,120(sp)
    800036fe:	7646                	ld	a2,112(sp)
    80003700:	76a6                	ld	a3,104(sp)
    80003702:	7706                	ld	a4,96(sp)
    80003704:	67e6                	ld	a5,88(sp)
    80003706:	6846                	ld	a6,80(sp)
    80003708:	68a6                	ld	a7,72(sp)
    8000370a:	6e06                	ld	t3,64(sp)
    8000370c:	7ee2                	ld	t4,56(sp)
    8000370e:	7f42                	ld	t5,48(sp)
    80003710:	7fa2                	ld	t6,40(sp)
    80003712:	614d                	addi	sp,sp,176
    80003714:	30200073          	mret

0000000080003718 <metal_lc13_interrupt_vector_handler>:
metal_lc13_interrupt_vector_handler():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:283

/* The metal_lc13_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt))
metal_lc13_interrupt_vector_handler(void) {
    80003718:	7171                	addi	sp,sp,-176
    8000371a:	f506                	sd	ra,168(sp)
    8000371c:	f116                	sd	t0,160(sp)
    8000371e:	ed1a                	sd	t1,152(sp)
    80003720:	e91e                	sd	t2,144(sp)
    80003722:	e522                	sd	s0,136(sp)
    80003724:	e12a                	sd	a0,128(sp)
    80003726:	fcae                	sd	a1,120(sp)
    80003728:	f8b2                	sd	a2,112(sp)
    8000372a:	f4b6                	sd	a3,104(sp)
    8000372c:	f0ba                	sd	a4,96(sp)
    8000372e:	ecbe                	sd	a5,88(sp)
    80003730:	e8c2                	sd	a6,80(sp)
    80003732:	e4c6                	sd	a7,72(sp)
    80003734:	e0f2                	sd	t3,64(sp)
    80003736:	fc76                	sd	t4,56(sp)
    80003738:	f87a                	sd	t5,48(sp)
    8000373a:	f47e                	sd	t6,40(sp)
    8000373c:	1900                	addi	s0,sp,176
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:284
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC13);
    8000373e:	a8cff0ef          	jal	ra,800029ca <__metal_myhart_id>
    80003742:	87aa                	mv	a5,a0
    80003744:	00004717          	auipc	a4,0x4
    80003748:	e2470713          	addi	a4,a4,-476 # 80007568 <__metal_cpu_table>
    8000374c:	078e                	slli	a5,a5,0x3
    8000374e:	97ba                	add	a5,a5,a4
    80003750:	639c                	ld	a5,0(a5)
    80003752:	f6f43423          	sd	a5,-152(s0)
    80003756:	f6843783          	ld	a5,-152(s0)
    8000375a:	c78d                	beqz	a5,80003784 <metal_lc13_interrupt_vector_handler+0x6c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:284 (discriminator 1)
    8000375c:	f6843503          	ld	a0,-152(s0)
    80003760:	9e0ff0ef          	jal	ra,80002940 <__metal_driver_cpu_interrupt_controller>
    80003764:	f6a43023          	sd	a0,-160(s0)
    80003768:	f6043783          	ld	a5,-160(s0)
    8000376c:	4c87b783          	ld	a5,1224(a5)
    80003770:	f4f43c23          	sd	a5,-168(s0)
    80003774:	f6043783          	ld	a5,-160(s0)
    80003778:	4b87b783          	ld	a5,1208(a5)
    8000377c:	f5843583          	ld	a1,-168(s0)
    80003780:	4575                	li	a0,29
    80003782:	9782                	jalr	a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:285
}
    80003784:	0001                	nop
    80003786:	70aa                	ld	ra,168(sp)
    80003788:	728a                	ld	t0,160(sp)
    8000378a:	636a                	ld	t1,152(sp)
    8000378c:	63ca                	ld	t2,144(sp)
    8000378e:	642a                	ld	s0,136(sp)
    80003790:	650a                	ld	a0,128(sp)
    80003792:	75e6                	ld	a1,120(sp)
    80003794:	7646                	ld	a2,112(sp)
    80003796:	76a6                	ld	a3,104(sp)
    80003798:	7706                	ld	a4,96(sp)
    8000379a:	67e6                	ld	a5,88(sp)
    8000379c:	6846                	ld	a6,80(sp)
    8000379e:	68a6                	ld	a7,72(sp)
    800037a0:	6e06                	ld	t3,64(sp)
    800037a2:	7ee2                	ld	t4,56(sp)
    800037a4:	7f42                	ld	t5,48(sp)
    800037a6:	7fa2                	ld	t6,40(sp)
    800037a8:	614d                	addi	sp,sp,176
    800037aa:	30200073          	mret

00000000800037ae <metal_lc14_interrupt_vector_handler>:
metal_lc14_interrupt_vector_handler():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:289

/* The metal_lc14_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt))
metal_lc14_interrupt_vector_handler(void) {
    800037ae:	7171                	addi	sp,sp,-176
    800037b0:	f506                	sd	ra,168(sp)
    800037b2:	f116                	sd	t0,160(sp)
    800037b4:	ed1a                	sd	t1,152(sp)
    800037b6:	e91e                	sd	t2,144(sp)
    800037b8:	e522                	sd	s0,136(sp)
    800037ba:	e12a                	sd	a0,128(sp)
    800037bc:	fcae                	sd	a1,120(sp)
    800037be:	f8b2                	sd	a2,112(sp)
    800037c0:	f4b6                	sd	a3,104(sp)
    800037c2:	f0ba                	sd	a4,96(sp)
    800037c4:	ecbe                	sd	a5,88(sp)
    800037c6:	e8c2                	sd	a6,80(sp)
    800037c8:	e4c6                	sd	a7,72(sp)
    800037ca:	e0f2                	sd	t3,64(sp)
    800037cc:	fc76                	sd	t4,56(sp)
    800037ce:	f87a                	sd	t5,48(sp)
    800037d0:	f47e                	sd	t6,40(sp)
    800037d2:	1900                	addi	s0,sp,176
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:290
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC14);
    800037d4:	9f6ff0ef          	jal	ra,800029ca <__metal_myhart_id>
    800037d8:	87aa                	mv	a5,a0
    800037da:	00004717          	auipc	a4,0x4
    800037de:	d8e70713          	addi	a4,a4,-626 # 80007568 <__metal_cpu_table>
    800037e2:	078e                	slli	a5,a5,0x3
    800037e4:	97ba                	add	a5,a5,a4
    800037e6:	639c                	ld	a5,0(a5)
    800037e8:	f6f43423          	sd	a5,-152(s0)
    800037ec:	f6843783          	ld	a5,-152(s0)
    800037f0:	c78d                	beqz	a5,8000381a <metal_lc14_interrupt_vector_handler+0x6c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:290 (discriminator 1)
    800037f2:	f6843503          	ld	a0,-152(s0)
    800037f6:	94aff0ef          	jal	ra,80002940 <__metal_driver_cpu_interrupt_controller>
    800037fa:	f6a43023          	sd	a0,-160(s0)
    800037fe:	f6043783          	ld	a5,-160(s0)
    80003802:	4e87b783          	ld	a5,1256(a5)
    80003806:	f4f43c23          	sd	a5,-168(s0)
    8000380a:	f6043783          	ld	a5,-160(s0)
    8000380e:	4d87b783          	ld	a5,1240(a5)
    80003812:	f5843583          	ld	a1,-168(s0)
    80003816:	4579                	li	a0,30
    80003818:	9782                	jalr	a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:291
}
    8000381a:	0001                	nop
    8000381c:	70aa                	ld	ra,168(sp)
    8000381e:	728a                	ld	t0,160(sp)
    80003820:	636a                	ld	t1,152(sp)
    80003822:	63ca                	ld	t2,144(sp)
    80003824:	642a                	ld	s0,136(sp)
    80003826:	650a                	ld	a0,128(sp)
    80003828:	75e6                	ld	a1,120(sp)
    8000382a:	7646                	ld	a2,112(sp)
    8000382c:	76a6                	ld	a3,104(sp)
    8000382e:	7706                	ld	a4,96(sp)
    80003830:	67e6                	ld	a5,88(sp)
    80003832:	6846                	ld	a6,80(sp)
    80003834:	68a6                	ld	a7,72(sp)
    80003836:	6e06                	ld	t3,64(sp)
    80003838:	7ee2                	ld	t4,56(sp)
    8000383a:	7f42                	ld	t5,48(sp)
    8000383c:	7fa2                	ld	t6,40(sp)
    8000383e:	614d                	addi	sp,sp,176
    80003840:	30200073          	mret

0000000080003844 <metal_lc15_interrupt_vector_handler>:
metal_lc15_interrupt_vector_handler():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:295

/* The metal_lc15_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt))
metal_lc15_interrupt_vector_handler(void) {
    80003844:	7171                	addi	sp,sp,-176
    80003846:	f506                	sd	ra,168(sp)
    80003848:	f116                	sd	t0,160(sp)
    8000384a:	ed1a                	sd	t1,152(sp)
    8000384c:	e91e                	sd	t2,144(sp)
    8000384e:	e522                	sd	s0,136(sp)
    80003850:	e12a                	sd	a0,128(sp)
    80003852:	fcae                	sd	a1,120(sp)
    80003854:	f8b2                	sd	a2,112(sp)
    80003856:	f4b6                	sd	a3,104(sp)
    80003858:	f0ba                	sd	a4,96(sp)
    8000385a:	ecbe                	sd	a5,88(sp)
    8000385c:	e8c2                	sd	a6,80(sp)
    8000385e:	e4c6                	sd	a7,72(sp)
    80003860:	e0f2                	sd	t3,64(sp)
    80003862:	fc76                	sd	t4,56(sp)
    80003864:	f87a                	sd	t5,48(sp)
    80003866:	f47e                	sd	t6,40(sp)
    80003868:	1900                	addi	s0,sp,176
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:296
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC15);
    8000386a:	960ff0ef          	jal	ra,800029ca <__metal_myhart_id>
    8000386e:	87aa                	mv	a5,a0
    80003870:	00004717          	auipc	a4,0x4
    80003874:	cf870713          	addi	a4,a4,-776 # 80007568 <__metal_cpu_table>
    80003878:	078e                	slli	a5,a5,0x3
    8000387a:	97ba                	add	a5,a5,a4
    8000387c:	639c                	ld	a5,0(a5)
    8000387e:	f6f43423          	sd	a5,-152(s0)
    80003882:	f6843783          	ld	a5,-152(s0)
    80003886:	c78d                	beqz	a5,800038b0 <metal_lc15_interrupt_vector_handler+0x6c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:296 (discriminator 1)
    80003888:	f6843503          	ld	a0,-152(s0)
    8000388c:	8b4ff0ef          	jal	ra,80002940 <__metal_driver_cpu_interrupt_controller>
    80003890:	f6a43023          	sd	a0,-160(s0)
    80003894:	f6043783          	ld	a5,-160(s0)
    80003898:	5087b783          	ld	a5,1288(a5)
    8000389c:	f4f43c23          	sd	a5,-168(s0)
    800038a0:	f6043783          	ld	a5,-160(s0)
    800038a4:	4f87b783          	ld	a5,1272(a5)
    800038a8:	f5843583          	ld	a1,-168(s0)
    800038ac:	457d                	li	a0,31
    800038ae:	9782                	jalr	a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:297
}
    800038b0:	0001                	nop
    800038b2:	70aa                	ld	ra,168(sp)
    800038b4:	728a                	ld	t0,160(sp)
    800038b6:	636a                	ld	t1,152(sp)
    800038b8:	63ca                	ld	t2,144(sp)
    800038ba:	642a                	ld	s0,136(sp)
    800038bc:	650a                	ld	a0,128(sp)
    800038be:	75e6                	ld	a1,120(sp)
    800038c0:	7646                	ld	a2,112(sp)
    800038c2:	76a6                	ld	a3,104(sp)
    800038c4:	7706                	ld	a4,96(sp)
    800038c6:	67e6                	ld	a5,88(sp)
    800038c8:	6846                	ld	a6,80(sp)
    800038ca:	68a6                	ld	a7,72(sp)
    800038cc:	6e06                	ld	t3,64(sp)
    800038ce:	7ee2                	ld	t4,56(sp)
    800038d0:	7f42                	ld	t5,48(sp)
    800038d2:	7fa2                	ld	t6,40(sp)
    800038d4:	614d                	addi	sp,sp,176
    800038d6:	30200073          	mret

00000000800038da <__metal_controller_interrupt_vector_mode>:
__metal_controller_interrupt_vector_mode():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:299

metal_vector_mode __metal_controller_interrupt_vector_mode(void) {
    800038da:	1101                	addi	sp,sp,-32
    800038dc:	ec22                	sd	s0,24(sp)
    800038de:	1000                	addi	s0,sp,32
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:302
    uintptr_t val;

    __asm__ volatile("csrr %0, mtvec" : "=r"(val));
    800038e0:	305027f3          	csrr	a5,mtvec
    800038e4:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:303
    val &= METAL_MTVEC_MASK;
    800038e8:	fe843783          	ld	a5,-24(s0)
    800038ec:	03f7f793          	andi	a5,a5,63
    800038f0:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:305

    switch (val) {
    800038f4:	fe843703          	ld	a4,-24(s0)
    800038f8:	4789                	li	a5,2
    800038fa:	00f70d63          	beq	a4,a5,80003914 <__metal_controller_interrupt_vector_mode+0x3a>
    800038fe:	fe843703          	ld	a4,-24(s0)
    80003902:	478d                	li	a5,3
    80003904:	00f70a63          	beq	a4,a5,80003918 <__metal_controller_interrupt_vector_mode+0x3e>
    80003908:	fe843703          	ld	a4,-24(s0)
    8000390c:	4785                	li	a5,1
    8000390e:	00f70763          	beq	a4,a5,8000391c <__metal_controller_interrupt_vector_mode+0x42>
    80003912:	a039                	j	80003920 <__metal_controller_interrupt_vector_mode+0x46>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:307
    case METAL_MTVEC_CLIC:
        return METAL_SELECTIVE_VECTOR_MODE;
    80003914:	478d                	li	a5,3
    80003916:	a031                	j	80003922 <__metal_controller_interrupt_vector_mode+0x48>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:309
    case METAL_MTVEC_CLIC_VECTORED:
        return METAL_HARDWARE_VECTOR_MODE;
    80003918:	4791                	li	a5,4
    8000391a:	a021                	j	80003922 <__metal_controller_interrupt_vector_mode+0x48>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:311
    case METAL_MTVEC_VECTORED:
        return METAL_VECTOR_MODE;
    8000391c:	4785                	li	a5,1
    8000391e:	a011                	j	80003922 <__metal_controller_interrupt_vector_mode+0x48>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:313
    }
    return METAL_DIRECT_MODE;
    80003920:	4781                	li	a5,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:314
}
    80003922:	853e                	mv	a0,a5
    80003924:	6462                	ld	s0,24(sp)
    80003926:	6105                	addi	sp,sp,32
    80003928:	8082                	ret

000000008000392a <__metal_controller_interrupt_vector>:
__metal_controller_interrupt_vector():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:317

void __metal_controller_interrupt_vector(metal_vector_mode mode,
                                         void *vec_table) {
    8000392a:	7179                	addi	sp,sp,-48
    8000392c:	f422                	sd	s0,40(sp)
    8000392e:	1800                	addi	s0,sp,48
    80003930:	87aa                	mv	a5,a0
    80003932:	fcb43823          	sd	a1,-48(s0)
    80003936:	fcf42e23          	sw	a5,-36(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:320
    uintptr_t trap_entry, val;

    __asm__ volatile("csrr %0, mtvec" : "=r"(val));
    8000393a:	305027f3          	csrr	a5,mtvec
    8000393e:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:321
    val &= ~(METAL_MTVEC_CLIC_VECTORED | METAL_MTVEC_CLIC_RESERVED);
    80003942:	fe843783          	ld	a5,-24(s0)
    80003946:	fc07f793          	andi	a5,a5,-64
    8000394a:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:322
    trap_entry = (uintptr_t)vec_table;
    8000394e:	fd043783          	ld	a5,-48(s0)
    80003952:	fef43023          	sd	a5,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:324

    switch (mode) {
    80003956:	fdc42783          	lw	a5,-36(s0)
    8000395a:	0007871b          	sext.w	a4,a5
    8000395e:	4791                	li	a5,4
    80003960:	06e7e763          	bltu	a5,a4,800039ce <__metal_controller_interrupt_vector+0xa4>
    80003964:	fdc46783          	lwu	a5,-36(s0)
    80003968:	00279713          	slli	a4,a5,0x2
    8000396c:	ffffd797          	auipc	a5,0xffffd
    80003970:	bf478793          	addi	a5,a5,-1036 # 80000560 <__metal_driver_vtable_riscv_clint0+0xc8>
    80003974:	97ba                	add	a5,a5,a4
    80003976:	439c                	lw	a5,0(a5)
    80003978:	0007871b          	sext.w	a4,a5
    8000397c:	ffffd797          	auipc	a5,0xffffd
    80003980:	be478793          	addi	a5,a5,-1052 # 80000560 <__metal_driver_vtable_riscv_clint0+0xc8>
    80003984:	97ba                	add	a5,a5,a4
    80003986:	8782                	jr	a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:327
    case METAL_SELECTIVE_NONVECTOR_MODE:
    case METAL_SELECTIVE_VECTOR_MODE:
        __asm__ volatile("csrw 0x307, %0" ::"r"(trap_entry));
    80003988:	fe043783          	ld	a5,-32(s0)
    8000398c:	30779073          	csrw	mtvt,a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:328
        __asm__ volatile("csrw mtvec, %0" ::"r"(val | METAL_MTVEC_CLIC));
    80003990:	fe843783          	ld	a5,-24(s0)
    80003994:	0027e793          	ori	a5,a5,2
    80003998:	30579073          	csrw	mtvec,a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:329
        break;
    8000399c:	a80d                	j	800039ce <__metal_controller_interrupt_vector+0xa4>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:331
    case METAL_HARDWARE_VECTOR_MODE:
        __asm__ volatile("csrw 0x307, %0" ::"r"(trap_entry));
    8000399e:	fe043783          	ld	a5,-32(s0)
    800039a2:	30779073          	csrw	mtvt,a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:333
        __asm__ volatile(
            "csrw mtvec, %0" ::"r"(val | METAL_MTVEC_CLIC_VECTORED));
    800039a6:	fe843783          	ld	a5,-24(s0)
    800039aa:	0037e793          	ori	a5,a5,3
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:332
        __asm__ volatile(
    800039ae:	30579073          	csrw	mtvec,a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:334
        break;
    800039b2:	a831                	j	800039ce <__metal_controller_interrupt_vector+0xa4>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:337
    case METAL_VECTOR_MODE:
        __asm__ volatile(
            "csrw mtvec, %0" ::"r"(trap_entry | METAL_MTVEC_VECTORED));
    800039b4:	fe043783          	ld	a5,-32(s0)
    800039b8:	0017e793          	ori	a5,a5,1
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:336
        __asm__ volatile(
    800039bc:	30579073          	csrw	mtvec,a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:338
        break;
    800039c0:	a039                	j	800039ce <__metal_controller_interrupt_vector+0xa4>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:341
    case METAL_DIRECT_MODE:
        __asm__ volatile(
            "csrw mtvec, %0" ::"r"(trap_entry & ~METAL_MTVEC_CLIC_VECTORED));
    800039c2:	fe043783          	ld	a5,-32(s0)
    800039c6:	9bf1                	andi	a5,a5,-4
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:340
        __asm__ volatile(
    800039c8:	30579073          	csrw	mtvec,a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:342
        break;
    800039cc:	0001                	nop
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:344
    }
}
    800039ce:	0001                	nop
    800039d0:	7422                	ld	s0,40(sp)
    800039d2:	6145                	addi	sp,sp,48
    800039d4:	8082                	ret

00000000800039d6 <__metal_valid_interrupt_id>:
__metal_valid_interrupt_id():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:346

int __metal_valid_interrupt_id(int id) {
    800039d6:	1101                	addi	sp,sp,-32
    800039d8:	ec22                	sd	s0,24(sp)
    800039da:	1000                	addi	s0,sp,32
    800039dc:	87aa                	mv	a5,a0
    800039de:	fef42623          	sw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:347
    switch (id) {
    800039e2:	fec42783          	lw	a5,-20(s0)
    800039e6:	0007871b          	sext.w	a4,a5
    800039ea:	47ad                	li	a5,11
    800039ec:	04f70e63          	beq	a4,a5,80003a48 <__metal_valid_interrupt_id+0x72>
    800039f0:	fec42783          	lw	a5,-20(s0)
    800039f4:	0007871b          	sext.w	a4,a5
    800039f8:	47ad                	li	a5,11
    800039fa:	02e7c163          	blt	a5,a4,80003a1c <__metal_valid_interrupt_id+0x46>
    800039fe:	fec42783          	lw	a5,-20(s0)
    80003a02:	0007871b          	sext.w	a4,a5
    80003a06:	478d                	li	a5,3
    80003a08:	04f70063          	beq	a4,a5,80003a48 <__metal_valid_interrupt_id+0x72>
    80003a0c:	fec42783          	lw	a5,-20(s0)
    80003a10:	0007871b          	sext.w	a4,a5
    80003a14:	479d                	li	a5,7
    80003a16:	02f70963          	beq	a4,a5,80003a48 <__metal_valid_interrupt_id+0x72>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:370
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
    case METAL_INTERRUPT_ID_BEU:
        return 1;
    default:
        break;
    80003a1a:	a80d                	j	80003a4c <__metal_valid_interrupt_id+0x76>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:347
    switch (id) {
    80003a1c:	fec42783          	lw	a5,-20(s0)
    80003a20:	0007871b          	sext.w	a4,a5
    80003a24:	47c1                	li	a5,16
    80003a26:	02f74363          	blt	a4,a5,80003a4c <__metal_valid_interrupt_id+0x76>
    80003a2a:	fec42783          	lw	a5,-20(s0)
    80003a2e:	0007871b          	sext.w	a4,a5
    80003a32:	47fd                	li	a5,31
    80003a34:	00e7da63          	bge	a5,a4,80003a48 <__metal_valid_interrupt_id+0x72>
    80003a38:	fec42783          	lw	a5,-20(s0)
    80003a3c:	0007871b          	sext.w	a4,a5
    80003a40:	08000793          	li	a5,128
    80003a44:	00f71463          	bne	a4,a5,80003a4c <__metal_valid_interrupt_id+0x76>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:368
        return 1;
    80003a48:	4785                	li	a5,1
    80003a4a:	a019                	j	80003a50 <__metal_valid_interrupt_id+0x7a>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:370
        break;
    80003a4c:	0001                	nop
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:373
    }

    return 0;
    80003a4e:	4781                	li	a5,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:374
}
    80003a50:	853e                	mv	a0,a5
    80003a52:	6462                	ld	s0,24(sp)
    80003a54:	6105                	addi	sp,sp,32
    80003a56:	8082                	ret

0000000080003a58 <__metal_local_interrupt_enable>:
__metal_local_interrupt_enable():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:377

int __metal_local_interrupt_enable(struct metal_interrupt *controller,
                                   metal_interrupt_id_e id, int enable) {
    80003a58:	7179                	addi	sp,sp,-48
    80003a5a:	f406                	sd	ra,40(sp)
    80003a5c:	f022                	sd	s0,32(sp)
    80003a5e:	1800                	addi	s0,sp,48
    80003a60:	fca43c23          	sd	a0,-40(s0)
    80003a64:	87ae                	mv	a5,a1
    80003a66:	8732                	mv	a4,a2
    80003a68:	fcf42a23          	sw	a5,-44(s0)
    80003a6c:	87ba                	mv	a5,a4
    80003a6e:	fcf42823          	sw	a5,-48(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:378
    int rc = 0;
    80003a72:	fe042623          	sw	zero,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:380

    if (!controller) {
    80003a76:	fd843783          	ld	a5,-40(s0)
    80003a7a:	e399                	bnez	a5,80003a80 <__metal_local_interrupt_enable+0x28>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:381
        return -1;
    80003a7c:	57fd                	li	a5,-1
    80003a7e:	a07d                	j	80003b2c <__metal_local_interrupt_enable+0xd4>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:384
    }

    switch (id) {
    80003a80:	fd442783          	lw	a5,-44(s0)
    80003a84:	0007871b          	sext.w	a4,a5
    80003a88:	47fd                	li	a5,31
    80003a8a:	08e7ec63          	bltu	a5,a4,80003b22 <__metal_local_interrupt_enable+0xca>
    80003a8e:	fd446783          	lwu	a5,-44(s0)
    80003a92:	00279713          	slli	a4,a5,0x2
    80003a96:	ffffd797          	auipc	a5,0xffffd
    80003a9a:	ade78793          	addi	a5,a5,-1314 # 80000574 <__metal_driver_vtable_riscv_clint0+0xdc>
    80003a9e:	97ba                	add	a5,a5,a4
    80003aa0:	439c                	lw	a5,0(a5)
    80003aa2:	0007871b          	sext.w	a4,a5
    80003aa6:	ffffd797          	auipc	a5,0xffffd
    80003aaa:	ace78793          	addi	a5,a5,-1330 # 80000574 <__metal_driver_vtable_riscv_clint0+0xdc>
    80003aae:	97ba                	add	a5,a5,a4
    80003ab0:	8782                	jr	a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:386
    case METAL_INTERRUPT_ID_BASE:
        if (enable) {
    80003ab2:	fd042783          	lw	a5,-48(s0)
    80003ab6:	2781                	sext.w	a5,a5
    80003ab8:	c781                	beqz	a5,80003ac0 <__metal_local_interrupt_enable+0x68>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:387
            __metal_interrupt_global_enable();
    80003aba:	f2bfe0ef          	jal	ra,800029e4 <__metal_interrupt_global_enable>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:391
        } else {
            __metal_interrupt_global_disable();
        }
        break;
    80003abe:	a0ad                	j	80003b28 <__metal_local_interrupt_enable+0xd0>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:389
            __metal_interrupt_global_disable();
    80003ac0:	f3dfe0ef          	jal	ra,800029fc <__metal_interrupt_global_disable>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:391
        break;
    80003ac4:	a095                	j	80003b28 <__metal_local_interrupt_enable+0xd0>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:393
    case METAL_INTERRUPT_ID_SW:
        if (enable) {
    80003ac6:	fd042783          	lw	a5,-48(s0)
    80003aca:	2781                	sext.w	a5,a5
    80003acc:	c781                	beqz	a5,80003ad4 <__metal_local_interrupt_enable+0x7c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:394
            __metal_interrupt_software_enable();
    80003ace:	f47fe0ef          	jal	ra,80002a14 <__metal_interrupt_software_enable>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:398
        } else {
            __metal_interrupt_software_disable();
        }
        break;
    80003ad2:	a899                	j	80003b28 <__metal_local_interrupt_enable+0xd0>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:396
            __metal_interrupt_software_disable();
    80003ad4:	f59fe0ef          	jal	ra,80002a2c <__metal_interrupt_software_disable>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:398
        break;
    80003ad8:	a881                	j	80003b28 <__metal_local_interrupt_enable+0xd0>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:400
    case METAL_INTERRUPT_ID_TMR:
        if (enable) {
    80003ada:	fd042783          	lw	a5,-48(s0)
    80003ade:	2781                	sext.w	a5,a5
    80003ae0:	c781                	beqz	a5,80003ae8 <__metal_local_interrupt_enable+0x90>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:401
            __metal_interrupt_timer_enable();
    80003ae2:	f63fe0ef          	jal	ra,80002a44 <__metal_interrupt_timer_enable>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:405
        } else {
            __metal_interrupt_timer_disable();
        }
        break;
    80003ae6:	a089                	j	80003b28 <__metal_local_interrupt_enable+0xd0>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:403
            __metal_interrupt_timer_disable();
    80003ae8:	f77fe0ef          	jal	ra,80002a5e <__metal_interrupt_timer_disable>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:405
        break;
    80003aec:	a835                	j	80003b28 <__metal_local_interrupt_enable+0xd0>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:407
    case METAL_INTERRUPT_ID_EXT:
        if (enable) {
    80003aee:	fd042783          	lw	a5,-48(s0)
    80003af2:	2781                	sext.w	a5,a5
    80003af4:	c781                	beqz	a5,80003afc <__metal_local_interrupt_enable+0xa4>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:408
            __metal_interrupt_external_enable();
    80003af6:	f83fe0ef          	jal	ra,80002a78 <__metal_interrupt_external_enable>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:412
        } else {
            __metal_interrupt_external_disable();
        }
        break;
    80003afa:	a03d                	j	80003b28 <__metal_local_interrupt_enable+0xd0>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:410
            __metal_interrupt_external_disable();
    80003afc:	f99fe0ef          	jal	ra,80002a94 <__metal_interrupt_external_disable>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:412
        break;
    80003b00:	a025                	j	80003b28 <__metal_local_interrupt_enable+0xd0>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:429
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        if (enable) {
    80003b02:	fd042783          	lw	a5,-48(s0)
    80003b06:	2781                	sext.w	a5,a5
    80003b08:	c799                	beqz	a5,80003b16 <__metal_local_interrupt_enable+0xbe>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:430
            __metal_interrupt_local_enable(id);
    80003b0a:	fd442783          	lw	a5,-44(s0)
    80003b0e:	853e                	mv	a0,a5
    80003b10:	fa1fe0ef          	jal	ra,80002ab0 <__metal_interrupt_local_enable>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:434
        } else {
            __metal_interrupt_local_disable(id);
        }
        break;
    80003b14:	a811                	j	80003b28 <__metal_local_interrupt_enable+0xd0>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:432
            __metal_interrupt_local_disable(id);
    80003b16:	fd442783          	lw	a5,-44(s0)
    80003b1a:	853e                	mv	a0,a5
    80003b1c:	fc5fe0ef          	jal	ra,80002ae0 <__metal_interrupt_local_disable>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:434
        break;
    80003b20:	a021                	j	80003b28 <__metal_local_interrupt_enable+0xd0>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:436
    default:
        rc = -1;
    80003b22:	57fd                	li	a5,-1
    80003b24:	fef42623          	sw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:438
    }
    return rc;
    80003b28:	fec42783          	lw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:439
}
    80003b2c:	853e                	mv	a0,a5
    80003b2e:	70a2                	ld	ra,40(sp)
    80003b30:	7402                	ld	s0,32(sp)
    80003b32:	6145                	addi	sp,sp,48
    80003b34:	8082                	ret

0000000080003b36 <__metal_exception_register>:
__metal_exception_register():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:442

int __metal_exception_register(struct metal_interrupt *controller, int ecode,
                               metal_exception_handler_t isr) {
    80003b36:	7139                	addi	sp,sp,-64
    80003b38:	fc22                	sd	s0,56(sp)
    80003b3a:	0080                	addi	s0,sp,64
    80003b3c:	fca43c23          	sd	a0,-40(s0)
    80003b40:	87ae                	mv	a5,a1
    80003b42:	fcc43423          	sd	a2,-56(s0)
    80003b46:	fcf42a23          	sw	a5,-44(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:443
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
    80003b4a:	fd843783          	ld	a5,-40(s0)
    80003b4e:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:445

    if ((ecode < METAL_MAX_EXCEPTION_CODE) && isr) {
    80003b52:	fd442783          	lw	a5,-44(s0)
    80003b56:	0007871b          	sext.w	a4,a5
    80003b5a:	47ad                	li	a5,11
    80003b5c:	02e7c263          	blt	a5,a4,80003b80 <__metal_exception_register+0x4a>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:445 (discriminator 1)
    80003b60:	fc843783          	ld	a5,-56(s0)
    80003b64:	cf91                	beqz	a5,80003b80 <__metal_exception_register+0x4a>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:446
        intc->metal_exception_table[ecode] = isr;
    80003b66:	fe843703          	ld	a4,-24(s0)
    80003b6a:	fd442783          	lw	a5,-44(s0)
    80003b6e:	0a678793          	addi	a5,a5,166
    80003b72:	078e                	slli	a5,a5,0x3
    80003b74:	97ba                	add	a5,a5,a4
    80003b76:	fc843703          	ld	a4,-56(s0)
    80003b7a:	e398                	sd	a4,0(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:447
        return 0;
    80003b7c:	4781                	li	a5,0
    80003b7e:	a011                	j	80003b82 <__metal_exception_register+0x4c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:449
    }
    return -1;
    80003b80:	57fd                	li	a5,-1
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:450
}
    80003b82:	853e                	mv	a0,a5
    80003b84:	7462                	ld	s0,56(sp)
    80003b86:	6121                	addi	sp,sp,64
    80003b88:	8082                	ret

0000000080003b8a <__metal_driver_riscv_cpu_controller_interrupt_init>:
__metal_driver_riscv_cpu_controller_interrupt_init():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:454

extern void early_trap_vector(void);
void __metal_driver_riscv_cpu_controller_interrupt_init(
    struct metal_interrupt *controller) {
    80003b8a:	7139                	addi	sp,sp,-64
    80003b8c:	fc06                	sd	ra,56(sp)
    80003b8e:	f822                	sd	s0,48(sp)
    80003b90:	0080                	addi	s0,sp,64
    80003b92:	fca43423          	sd	a0,-56(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:455
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
    80003b96:	fc843783          	ld	a5,-56(s0)
    80003b9a:	fef43023          	sd	a5,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:457

    if (!intc->init_done) {
    80003b9e:	fe043783          	ld	a5,-32(s0)
    80003ba2:	479c                	lw	a5,8(a5)
    80003ba4:	efcd                	bnez	a5,80003c5e <__metal_driver_riscv_cpu_controller_interrupt_init+0xd4>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:459
        /* Default to use direct interrupt, setup sw cb table*/
        for (int i = 0; i < METAL_MAX_MI; i++) {
    80003ba6:	fe042623          	sw	zero,-20(s0)
    80003baa:	a081                	j	80003bea <__metal_driver_riscv_cpu_controller_interrupt_init+0x60>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:460 (discriminator 3)
            intc->metal_int_table[i].handler = NULL;
    80003bac:	fe043703          	ld	a4,-32(s0)
    80003bb0:	fec42783          	lw	a5,-20(s0)
    80003bb4:	0796                	slli	a5,a5,0x5
    80003bb6:	97ba                	add	a5,a5,a4
    80003bb8:	1007bc23          	sd	zero,280(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:461 (discriminator 3)
            intc->metal_int_table[i].sub_int = NULL;
    80003bbc:	fe043703          	ld	a4,-32(s0)
    80003bc0:	fec42783          	lw	a5,-20(s0)
    80003bc4:	07a5                	addi	a5,a5,9
    80003bc6:	0796                	slli	a5,a5,0x5
    80003bc8:	97ba                	add	a5,a5,a4
    80003bca:	0007b023          	sd	zero,0(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:462 (discriminator 3)
            intc->metal_int_table[i].exint_data = NULL;
    80003bce:	fe043703          	ld	a4,-32(s0)
    80003bd2:	fec42783          	lw	a5,-20(s0)
    80003bd6:	07a5                	addi	a5,a5,9
    80003bd8:	0796                	slli	a5,a5,0x5
    80003bda:	97ba                	add	a5,a5,a4
    80003bdc:	0007b423          	sd	zero,8(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:459 (discriminator 3)
        for (int i = 0; i < METAL_MAX_MI; i++) {
    80003be0:	fec42783          	lw	a5,-20(s0)
    80003be4:	2785                	addiw	a5,a5,1
    80003be6:	fef42623          	sw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:459 (discriminator 1)
    80003bea:	fec42783          	lw	a5,-20(s0)
    80003bee:	0007871b          	sext.w	a4,a5
    80003bf2:	47fd                	li	a5,31
    80003bf4:	fae7dce3          	bge	a5,a4,80003bac <__metal_driver_riscv_cpu_controller_interrupt_init+0x22>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:465
        }

        for (int i = 0; i < METAL_MAX_ME; i++) {
    80003bf8:	fe042423          	sw	zero,-24(s0)
    80003bfc:	a01d                	j	80003c22 <__metal_driver_riscv_cpu_controller_interrupt_init+0x98>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:466 (discriminator 3)
            intc->metal_exception_table[i] = __metal_default_exception_handler;
    80003bfe:	fe043703          	ld	a4,-32(s0)
    80003c02:	fe842783          	lw	a5,-24(s0)
    80003c06:	0a678793          	addi	a5,a5,166
    80003c0a:	078e                	slli	a5,a5,0x3
    80003c0c:	97ba                	add	a5,a5,a4
    80003c0e:	fffff717          	auipc	a4,0xfffff
    80003c12:	f0270713          	addi	a4,a4,-254 # 80002b10 <__metal_default_exception_handler>
    80003c16:	e398                	sd	a4,0(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:465 (discriminator 3)
        for (int i = 0; i < METAL_MAX_ME; i++) {
    80003c18:	fe842783          	lw	a5,-24(s0)
    80003c1c:	2785                	addiw	a5,a5,1
    80003c1e:	fef42423          	sw	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:465 (discriminator 1)
    80003c22:	fe842783          	lw	a5,-24(s0)
    80003c26:	0007871b          	sext.w	a4,a5
    80003c2a:	47ad                	li	a5,11
    80003c2c:	fce7d9e3          	bge	a5,a4,80003bfe <__metal_driver_riscv_cpu_controller_interrupt_init+0x74>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:475
         * Set the real trap handler if the value of mtvec is equal to
         * early_trap_vector. If mtvec is not equal to early_trap_vector,
         * that means user has own trap handler, then we don't overwrite it.
         */
        uintptr_t mtvec;
        __asm__ volatile("csrr %0, mtvec" : "=r"(mtvec));
    80003c30:	305027f3          	csrr	a5,mtvec
    80003c34:	fcf43c23          	sd	a5,-40(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:476
        if (mtvec == (uintptr_t)&early_trap_vector) {
    80003c38:	ffffc797          	auipc	a5,0xffffc
    80003c3c:	50c78793          	addi	a5,a5,1292 # 80000144 <early_trap_vector>
    80003c40:	fd843703          	ld	a4,-40(s0)
    80003c44:	00f71963          	bne	a4,a5,80003c56 <__metal_driver_riscv_cpu_controller_interrupt_init+0xcc>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:477
            __metal_controller_interrupt_vector(
    80003c48:	fffff597          	auipc	a1,0xfffff
    80003c4c:	13858593          	addi	a1,a1,312 # 80002d80 <__metal_exception_handler>
    80003c50:	4501                	li	a0,0
    80003c52:	cd9ff0ef          	jal	ra,8000392a <__metal_controller_interrupt_vector>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:481
                METAL_DIRECT_MODE,
                (void *)(uintptr_t)&__metal_exception_handler);
        }
        intc->init_done = 1;
    80003c56:	fe043783          	ld	a5,-32(s0)
    80003c5a:	4705                	li	a4,1
    80003c5c:	c798                	sw	a4,8(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:483
    }
}
    80003c5e:	0001                	nop
    80003c60:	70e2                	ld	ra,56(sp)
    80003c62:	7442                	ld	s0,48(sp)
    80003c64:	6121                	addi	sp,sp,64
    80003c66:	8082                	ret

0000000080003c68 <__metal_driver_riscv_cpu_controller_interrupt_register>:
__metal_driver_riscv_cpu_controller_interrupt_register():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:487

int __metal_driver_riscv_cpu_controller_interrupt_register(
    struct metal_interrupt *controller, int id, metal_interrupt_handler_t isr,
    void *priv) {
    80003c68:	7139                	addi	sp,sp,-64
    80003c6a:	fc06                	sd	ra,56(sp)
    80003c6c:	f822                	sd	s0,48(sp)
    80003c6e:	0080                	addi	s0,sp,64
    80003c70:	fca43c23          	sd	a0,-40(s0)
    80003c74:	87ae                	mv	a5,a1
    80003c76:	fcc43423          	sd	a2,-56(s0)
    80003c7a:	fcd43023          	sd	a3,-64(s0)
    80003c7e:	fcf42a23          	sw	a5,-44(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:488
    int rc = 0;
    80003c82:	fe042623          	sw	zero,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:489
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
    80003c86:	fd843783          	ld	a5,-40(s0)
    80003c8a:	fef43023          	sd	a5,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:491

    if (!__metal_valid_interrupt_id(id)) {
    80003c8e:	fd442783          	lw	a5,-44(s0)
    80003c92:	853e                	mv	a0,a5
    80003c94:	d43ff0ef          	jal	ra,800039d6 <__metal_valid_interrupt_id>
    80003c98:	87aa                	mv	a5,a0
    80003c9a:	e399                	bnez	a5,80003ca0 <__metal_driver_riscv_cpu_controller_interrupt_register+0x38>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:492
        return -11;
    80003c9c:	57d5                	li	a5,-11
    80003c9e:	aa51                	j	80003e32 <__metal_driver_riscv_cpu_controller_interrupt_register+0x1ca>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:494
    }
    if ((id == METAL_INTERRUPT_ID_BEU) &&
    80003ca0:	fd442783          	lw	a5,-44(s0)
    80003ca4:	0007871b          	sext.w	a4,a5
    80003ca8:	08000793          	li	a5,128
    80003cac:	00f71963          	bne	a4,a5,80003cbe <__metal_driver_riscv_cpu_controller_interrupt_register+0x56>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:495 (discriminator 1)
        (__metal_controller_interrupt_vector_mode() != METAL_DIRECT_MODE)) {
    80003cb0:	c2bff0ef          	jal	ra,800038da <__metal_controller_interrupt_vector_mode>
    80003cb4:	87aa                	mv	a5,a0
    80003cb6:	2781                	sext.w	a5,a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:494 (discriminator 1)
    if ((id == METAL_INTERRUPT_ID_BEU) &&
    80003cb8:	c399                	beqz	a5,80003cbe <__metal_driver_riscv_cpu_controller_interrupt_register+0x56>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:498
        /* Only allow registration of the bus error unit interrupt if
         * interrupt vectoring if off */
        return -13;
    80003cba:	57cd                	li	a5,-13
    80003cbc:	aa9d                	j	80003e32 <__metal_driver_riscv_cpu_controller_interrupt_register+0x1ca>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:501
    }

    if (isr) {
    80003cbe:	fc843783          	ld	a5,-56(s0)
    80003cc2:	cbb9                	beqz	a5,80003d18 <__metal_driver_riscv_cpu_controller_interrupt_register+0xb0>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:502
        if (id == METAL_INTERRUPT_ID_BEU) {
    80003cc4:	fd442783          	lw	a5,-44(s0)
    80003cc8:	0007871b          	sext.w	a4,a5
    80003ccc:	08000793          	li	a5,128
    80003cd0:	00f71f63          	bne	a4,a5,80003cee <__metal_driver_riscv_cpu_controller_interrupt_register+0x86>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:503
            intc->metal_int_beu.handler = isr;
    80003cd4:	fe043783          	ld	a5,-32(s0)
    80003cd8:	fc843703          	ld	a4,-56(s0)
    80003cdc:	50e7bc23          	sd	a4,1304(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:504
            intc->metal_int_beu.exint_data = priv;
    80003ce0:	fe043783          	ld	a5,-32(s0)
    80003ce4:	fc043703          	ld	a4,-64(s0)
    80003ce8:	52e7b423          	sd	a4,1320(a5)
    80003cec:	a289                	j	80003e2e <__metal_driver_riscv_cpu_controller_interrupt_register+0x1c6>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:506
        } else {
            intc->metal_int_table[id].handler = isr;
    80003cee:	fe043703          	ld	a4,-32(s0)
    80003cf2:	fd442783          	lw	a5,-44(s0)
    80003cf6:	0796                	slli	a5,a5,0x5
    80003cf8:	97ba                	add	a5,a5,a4
    80003cfa:	fc843703          	ld	a4,-56(s0)
    80003cfe:	10e7bc23          	sd	a4,280(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:507
            intc->metal_int_table[id].exint_data = priv;
    80003d02:	fe043703          	ld	a4,-32(s0)
    80003d06:	fd442783          	lw	a5,-44(s0)
    80003d0a:	07a5                	addi	a5,a5,9
    80003d0c:	0796                	slli	a5,a5,0x5
    80003d0e:	97ba                	add	a5,a5,a4
    80003d10:	fc043703          	ld	a4,-64(s0)
    80003d14:	e798                	sd	a4,8(a5)
    80003d16:	aa21                	j	80003e2e <__metal_driver_riscv_cpu_controller_interrupt_register+0x1c6>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:510
        }
    } else {
        switch (id) {
    80003d18:	fd442783          	lw	a5,-44(s0)
    80003d1c:	0007871b          	sext.w	a4,a5
    80003d20:	47ad                	li	a5,11
    80003d22:	0cf70c63          	beq	a4,a5,80003dfa <__metal_driver_riscv_cpu_controller_interrupt_register+0x192>
    80003d26:	fd442783          	lw	a5,-44(s0)
    80003d2a:	0007871b          	sext.w	a4,a5
    80003d2e:	47ad                	li	a5,11
    80003d30:	02e7c163          	blt	a5,a4,80003d52 <__metal_driver_riscv_cpu_controller_interrupt_register+0xea>
    80003d34:	fd442783          	lw	a5,-44(s0)
    80003d38:	0007871b          	sext.w	a4,a5
    80003d3c:	478d                	li	a5,3
    80003d3e:	04f70163          	beq	a4,a5,80003d80 <__metal_driver_riscv_cpu_controller_interrupt_register+0x118>
    80003d42:	fd442783          	lw	a5,-44(s0)
    80003d46:	0007871b          	sext.w	a4,a5
    80003d4a:	479d                	li	a5,7
    80003d4c:	06f70163          	beq	a4,a5,80003dae <__metal_driver_riscv_cpu_controller_interrupt_register+0x146>
    80003d50:	a8e1                	j	80003e28 <__metal_driver_riscv_cpu_controller_interrupt_register+0x1c0>
    80003d52:	fd442783          	lw	a5,-44(s0)
    80003d56:	0007871b          	sext.w	a4,a5
    80003d5a:	47c1                	li	a5,16
    80003d5c:	0cf74663          	blt	a4,a5,80003e28 <__metal_driver_riscv_cpu_controller_interrupt_register+0x1c0>
    80003d60:	fd442783          	lw	a5,-44(s0)
    80003d64:	0007871b          	sext.w	a4,a5
    80003d68:	47fd                	li	a5,31
    80003d6a:	08e7d863          	bge	a5,a4,80003dfa <__metal_driver_riscv_cpu_controller_interrupt_register+0x192>
    80003d6e:	fd442783          	lw	a5,-44(s0)
    80003d72:	0007871b          	sext.w	a4,a5
    80003d76:	08000793          	li	a5,128
    80003d7a:	06f70163          	beq	a4,a5,80003ddc <__metal_driver_riscv_cpu_controller_interrupt_register+0x174>
    80003d7e:	a06d                	j	80003e28 <__metal_driver_riscv_cpu_controller_interrupt_register+0x1c0>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:512
        case METAL_INTERRUPT_ID_SW:
            intc->metal_int_table[id].handler = __metal_default_sw_handler;
    80003d80:	fe043703          	ld	a4,-32(s0)
    80003d84:	fd442783          	lw	a5,-44(s0)
    80003d88:	0796                	slli	a5,a5,0x5
    80003d8a:	97ba                	add	a5,a5,a4
    80003d8c:	fffff717          	auipc	a4,0xfffff
    80003d90:	e7c70713          	addi	a4,a4,-388 # 80002c08 <__metal_default_sw_handler>
    80003d94:	10e7bc23          	sd	a4,280(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:513
            intc->metal_int_table[id].sub_int = priv;
    80003d98:	fe043703          	ld	a4,-32(s0)
    80003d9c:	fd442783          	lw	a5,-44(s0)
    80003da0:	07a5                	addi	a5,a5,9
    80003da2:	0796                	slli	a5,a5,0x5
    80003da4:	97ba                	add	a5,a5,a4
    80003da6:	fc043703          	ld	a4,-64(s0)
    80003daa:	e398                	sd	a4,0(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:514
            break;
    80003dac:	a049                	j	80003e2e <__metal_driver_riscv_cpu_controller_interrupt_register+0x1c6>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:516
        case METAL_INTERRUPT_ID_TMR:
            intc->metal_int_table[id].handler = __metal_default_timer_handler;
    80003dae:	fe043703          	ld	a4,-32(s0)
    80003db2:	fd442783          	lw	a5,-44(s0)
    80003db6:	0796                	slli	a5,a5,0x5
    80003db8:	97ba                	add	a5,a5,a4
    80003dba:	fffff717          	auipc	a4,0xfffff
    80003dbe:	f6c70713          	addi	a4,a4,-148 # 80002d26 <__metal_default_timer_handler>
    80003dc2:	10e7bc23          	sd	a4,280(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:517
            intc->metal_int_table[id].sub_int = priv;
    80003dc6:	fe043703          	ld	a4,-32(s0)
    80003dca:	fd442783          	lw	a5,-44(s0)
    80003dce:	07a5                	addi	a5,a5,9
    80003dd0:	0796                	slli	a5,a5,0x5
    80003dd2:	97ba                	add	a5,a5,a4
    80003dd4:	fc043703          	ld	a4,-64(s0)
    80003dd8:	e398                	sd	a4,0(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:518
            break;
    80003dda:	a891                	j	80003e2e <__metal_driver_riscv_cpu_controller_interrupt_register+0x1c6>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        case METAL_INTERRUPT_ID_BEU:
            intc->metal_int_beu.handler = __metal_default_beu_handler;
    80003ddc:	fe043783          	ld	a5,-32(s0)
    80003de0:	fffff717          	auipc	a4,0xfffff
    80003de4:	f2e70713          	addi	a4,a4,-210 # 80002d0e <__metal_default_beu_handler>
    80003de8:	50e7bc23          	sd	a4,1304(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:521
            intc->metal_int_beu.exint_data = priv;
    80003dec:	fe043783          	ld	a5,-32(s0)
    80003df0:	fc043703          	ld	a4,-64(s0)
    80003df4:	52e7b423          	sd	a4,1320(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:522
            break;
    80003df8:	a81d                	j	80003e2e <__metal_driver_riscv_cpu_controller_interrupt_register+0x1c6>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:540
        case METAL_INTERRUPT_ID_LC11:
        case METAL_INTERRUPT_ID_LC12:
        case METAL_INTERRUPT_ID_LC13:
        case METAL_INTERRUPT_ID_LC14:
        case METAL_INTERRUPT_ID_LC15:
            intc->metal_int_table[id].handler =
    80003dfa:	fe043703          	ld	a4,-32(s0)
    80003dfe:	fd442783          	lw	a5,-44(s0)
    80003e02:	0796                	slli	a5,a5,0x5
    80003e04:	97ba                	add	a5,a5,a4
    80003e06:	fffff717          	auipc	a4,0xfffff
    80003e0a:	d2470713          	addi	a4,a4,-732 # 80002b2a <__metal_default_interrupt_handler>
    80003e0e:	10e7bc23          	sd	a4,280(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:542
                __metal_default_interrupt_handler;
            intc->metal_int_table[id].sub_int = priv;
    80003e12:	fe043703          	ld	a4,-32(s0)
    80003e16:	fd442783          	lw	a5,-44(s0)
    80003e1a:	07a5                	addi	a5,a5,9
    80003e1c:	0796                	slli	a5,a5,0x5
    80003e1e:	97ba                	add	a5,a5,a4
    80003e20:	fc043703          	ld	a4,-64(s0)
    80003e24:	e398                	sd	a4,0(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:543
            break;
    80003e26:	a021                	j	80003e2e <__metal_driver_riscv_cpu_controller_interrupt_register+0x1c6>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:545
        default:
            rc = -12;
    80003e28:	57d1                	li	a5,-12
    80003e2a:	fef42623          	sw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:548
        }
    }
    return rc;
    80003e2e:	fec42783          	lw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:549
}
    80003e32:	853e                	mv	a0,a5
    80003e34:	70e2                	ld	ra,56(sp)
    80003e36:	7442                	ld	s0,48(sp)
    80003e38:	6121                	addi	sp,sp,64
    80003e3a:	8082                	ret

0000000080003e3c <__metal_driver_riscv_cpu_controller_interrupt_enable>:
__metal_driver_riscv_cpu_controller_interrupt_enable():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:552

int __metal_driver_riscv_cpu_controller_interrupt_enable(
    struct metal_interrupt *controller, int id) {
    80003e3c:	1101                	addi	sp,sp,-32
    80003e3e:	ec06                	sd	ra,24(sp)
    80003e40:	e822                	sd	s0,16(sp)
    80003e42:	1000                	addi	s0,sp,32
    80003e44:	fea43423          	sd	a0,-24(s0)
    80003e48:	87ae                	mv	a5,a1
    80003e4a:	fef42223          	sw	a5,-28(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:553
    return __metal_local_interrupt_enable(controller, id, METAL_ENABLE);
    80003e4e:	fe442783          	lw	a5,-28(s0)
    80003e52:	4605                	li	a2,1
    80003e54:	85be                	mv	a1,a5
    80003e56:	fe843503          	ld	a0,-24(s0)
    80003e5a:	bffff0ef          	jal	ra,80003a58 <__metal_local_interrupt_enable>
    80003e5e:	87aa                	mv	a5,a0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:554
}
    80003e60:	853e                	mv	a0,a5
    80003e62:	60e2                	ld	ra,24(sp)
    80003e64:	6442                	ld	s0,16(sp)
    80003e66:	6105                	addi	sp,sp,32
    80003e68:	8082                	ret

0000000080003e6a <__metal_driver_riscv_cpu_controller_interrupt_disable>:
__metal_driver_riscv_cpu_controller_interrupt_disable():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:557

int __metal_driver_riscv_cpu_controller_interrupt_disable(
    struct metal_interrupt *controller, int id) {
    80003e6a:	1101                	addi	sp,sp,-32
    80003e6c:	ec06                	sd	ra,24(sp)
    80003e6e:	e822                	sd	s0,16(sp)
    80003e70:	1000                	addi	s0,sp,32
    80003e72:	fea43423          	sd	a0,-24(s0)
    80003e76:	87ae                	mv	a5,a1
    80003e78:	fef42223          	sw	a5,-28(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:558
    return __metal_local_interrupt_enable(controller, id, METAL_DISABLE);
    80003e7c:	fe442783          	lw	a5,-28(s0)
    80003e80:	4601                	li	a2,0
    80003e82:	85be                	mv	a1,a5
    80003e84:	fe843503          	ld	a0,-24(s0)
    80003e88:	bd1ff0ef          	jal	ra,80003a58 <__metal_local_interrupt_enable>
    80003e8c:	87aa                	mv	a5,a0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:559
}
    80003e8e:	853e                	mv	a0,a5
    80003e90:	60e2                	ld	ra,24(sp)
    80003e92:	6442                	ld	s0,16(sp)
    80003e94:	6105                	addi	sp,sp,32
    80003e96:	8082                	ret

0000000080003e98 <__metal_driver_riscv_cpu_controller_get_vector_mode>:
__metal_driver_riscv_cpu_controller_get_vector_mode():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:591
    }
    return -1;
}

metal_vector_mode __metal_driver_riscv_cpu_controller_get_vector_mode(
    struct metal_interrupt *controller) {
    80003e98:	1101                	addi	sp,sp,-32
    80003e9a:	ec06                	sd	ra,24(sp)
    80003e9c:	e822                	sd	s0,16(sp)
    80003e9e:	1000                	addi	s0,sp,32
    80003ea0:	fea43423          	sd	a0,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:592
    return __metal_controller_interrupt_vector_mode();
    80003ea4:	a37ff0ef          	jal	ra,800038da <__metal_controller_interrupt_vector_mode>
    80003ea8:	87aa                	mv	a5,a0
    80003eaa:	2781                	sext.w	a5,a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:593
}
    80003eac:	853e                	mv	a0,a5
    80003eae:	60e2                	ld	ra,24(sp)
    80003eb0:	6442                	ld	s0,16(sp)
    80003eb2:	6105                	addi	sp,sp,32
    80003eb4:	8082                	ret

0000000080003eb6 <__metal_driver_riscv_cpu_controller_set_vector_mode>:
__metal_driver_riscv_cpu_controller_set_vector_mode():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:596

int __metal_driver_riscv_cpu_controller_set_vector_mode(
    struct metal_interrupt *controller, metal_vector_mode mode) {
    80003eb6:	1101                	addi	sp,sp,-32
    80003eb8:	ec06                	sd	ra,24(sp)
    80003eba:	e822                	sd	s0,16(sp)
    80003ebc:	1000                	addi	s0,sp,32
    80003ebe:	fea43423          	sd	a0,-24(s0)
    80003ec2:	87ae                	mv	a5,a1
    80003ec4:	fef42223          	sw	a5,-28(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598

    if (mode == METAL_DIRECT_MODE) {
    80003ec8:	fe442783          	lw	a5,-28(s0)
    80003ecc:	2781                	sext.w	a5,a5
    80003ece:	ef81                	bnez	a5,80003ee6 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x30>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:599
        __metal_controller_interrupt_vector(
    80003ed0:	fe442783          	lw	a5,-28(s0)
    80003ed4:	fffff597          	auipc	a1,0xfffff
    80003ed8:	eac58593          	addi	a1,a1,-340 # 80002d80 <__metal_exception_handler>
    80003edc:	853e                	mv	a0,a5
    80003ede:	a4dff0ef          	jal	ra,8000392a <__metal_controller_interrupt_vector>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:601
            mode, (void *)(uintptr_t)&__metal_exception_handler);
        return 0;
    80003ee2:	4781                	li	a5,0
    80003ee4:	a025                	j	80003f0c <__metal_driver_riscv_cpu_controller_set_vector_mode+0x56>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:603
    }
    if (mode == METAL_VECTOR_MODE) {
    80003ee6:	fe442783          	lw	a5,-28(s0)
    80003eea:	0007871b          	sext.w	a4,a5
    80003eee:	4785                	li	a5,1
    80003ef0:	00f71d63          	bne	a4,a5,80003f0a <__metal_driver_riscv_cpu_controller_set_vector_mode+0x54>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:604
        __metal_controller_interrupt_vector(
    80003ef4:	fe442783          	lw	a5,-28(s0)
    80003ef8:	00002597          	auipc	a1,0x2
    80003efc:	20858593          	addi	a1,a1,520 # 80006100 <__metal_vector_table>
    80003f00:	853e                	mv	a0,a5
    80003f02:	a29ff0ef          	jal	ra,8000392a <__metal_controller_interrupt_vector>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:606
            mode, (void *)(uintptr_t)__metal_vector_table);
        return 0;
    80003f06:	4781                	li	a5,0
    80003f08:	a011                	j	80003f0c <__metal_driver_riscv_cpu_controller_set_vector_mode+0x56>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:608
    }
    return -1;
    80003f0a:	57fd                	li	a5,-1
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:609
}
    80003f0c:	853e                	mv	a0,a5
    80003f0e:	60e2                	ld	ra,24(sp)
    80003f10:	6442                	ld	s0,16(sp)
    80003f12:	6105                	addi	sp,sp,32
    80003f14:	8082                	ret

0000000080003f16 <__metal_driver_riscv_cpu_controller_command_request>:
__metal_driver_riscv_cpu_controller_command_request():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:612

int __metal_driver_riscv_cpu_controller_command_request(
    struct metal_interrupt *controller, int cmd, void *data) {
    80003f16:	7179                	addi	sp,sp,-48
    80003f18:	f422                	sd	s0,40(sp)
    80003f1a:	1800                	addi	s0,sp,48
    80003f1c:	fea43423          	sd	a0,-24(s0)
    80003f20:	87ae                	mv	a5,a1
    80003f22:	fcc43c23          	sd	a2,-40(s0)
    80003f26:	fef42223          	sw	a5,-28(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:615
    /* NOP for now, unless local interrupt lines the like of clic, clint, plic
     */
    return 0;
    80003f2a:	4781                	li	a5,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616
}
    80003f2c:	853e                	mv	a0,a5
    80003f2e:	7422                	ld	s0,40(sp)
    80003f30:	6145                	addi	sp,sp,48
    80003f32:	8082                	ret

0000000080003f34 <__metal_driver_cpu_mcycle_get>:
__metal_driver_cpu_mcycle_get():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:620

/* CPU driver !!! */

unsigned long long __metal_driver_cpu_mcycle_get(struct metal_cpu *cpu) {
    80003f34:	7179                	addi	sp,sp,-48
    80003f36:	f422                	sd	s0,40(sp)
    80003f38:	1800                	addi	s0,sp,48
    80003f3a:	fca43c23          	sd	a0,-40(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:621
    unsigned long long val = 0;
    80003f3e:	fe043423          	sd	zero,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:636
         * so we must retry. */
    } while (hi != hi1);

    val = ((unsigned long long)hi << 32) | lo;
#else
    __asm__ volatile("csrr %0, mcycle" : "=r"(val));
    80003f42:	b00027f3          	csrr	a5,mcycle
    80003f46:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:639
#endif

    return val;
    80003f4a:	fe843783          	ld	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:640
}
    80003f4e:	853e                	mv	a0,a5
    80003f50:	7422                	ld	s0,40(sp)
    80003f52:	6145                	addi	sp,sp,48
    80003f54:	8082                	ret

0000000080003f56 <__metal_driver_cpu_timebase_get>:
__metal_driver_cpu_timebase_get():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:642

unsigned long long __metal_driver_cpu_timebase_get(struct metal_cpu *cpu) {
    80003f56:	7179                	addi	sp,sp,-48
    80003f58:	f406                	sd	ra,40(sp)
    80003f5a:	f022                	sd	s0,32(sp)
    80003f5c:	1800                	addi	s0,sp,48
    80003f5e:	fca43c23          	sd	a0,-40(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:644
    int timebase;
    if (!cpu) {
    80003f62:	fd843783          	ld	a5,-40(s0)
    80003f66:	e399                	bnez	a5,80003f6c <__metal_driver_cpu_timebase_get+0x16>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:645
        return 0;
    80003f68:	4781                	li	a5,0
    80003f6a:	a811                	j	80003f7e <__metal_driver_cpu_timebase_get+0x28>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:648
    }

    timebase = __metal_driver_cpu_timebase((struct metal_cpu *)cpu);
    80003f6c:	fd843503          	ld	a0,-40(s0)
    80003f70:	9a9fe0ef          	jal	ra,80002918 <__metal_driver_cpu_timebase>
    80003f74:	87aa                	mv	a5,a0
    80003f76:	fef42623          	sw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:649
    return timebase;
    80003f7a:	fec42783          	lw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:650
}
    80003f7e:	853e                	mv	a0,a5
    80003f80:	70a2                	ld	ra,40(sp)
    80003f82:	7402                	ld	s0,32(sp)
    80003f84:	6145                	addi	sp,sp,48
    80003f86:	8082                	ret

0000000080003f88 <__metal_driver_cpu_mtime_get>:
__metal_driver_cpu_mtime_get():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:652

unsigned long long __metal_driver_cpu_mtime_get(struct metal_cpu *cpu) {
    80003f88:	7139                	addi	sp,sp,-64
    80003f8a:	fc06                	sd	ra,56(sp)
    80003f8c:	f822                	sd	s0,48(sp)
    80003f8e:	0080                	addi	s0,sp,64
    80003f90:	fca43423          	sd	a0,-56(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:653
    unsigned long long time = 0;
    80003f94:	fc043c23          	sd	zero,-40(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:657
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller(cpu);
    80003f98:	fc843503          	ld	a0,-56(s0)
    80003f9c:	9a5fe0ef          	jal	ra,80002940 <__metal_driver_cpu_interrupt_controller>
    80003fa0:	fea43423          	sd	a0,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:659

    if (intc) {
    80003fa4:	fe843783          	ld	a5,-24(s0)
    80003fa8:	c78d                	beqz	a5,80003fd2 <__metal_driver_cpu_mtime_get+0x4a>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:660
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
    80003faa:	fe843783          	ld	a5,-24(s0)
    80003fae:	2007b783          	ld	a5,512(a5)
    80003fb2:	fef43023          	sd	a5,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:661
        if (tmr_intc) {
    80003fb6:	fe043783          	ld	a5,-32(s0)
    80003fba:	cf81                	beqz	a5,80003fd2 <__metal_driver_cpu_mtime_get+0x4a>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:662
            tmr_intc->vtable->command_request(tmr_intc, METAL_TIMER_MTIME_GET,
    80003fbc:	fe043783          	ld	a5,-32(s0)
    80003fc0:	639c                	ld	a5,0(a5)
    80003fc2:	6fd8                	ld	a4,152(a5)
    80003fc4:	fd840793          	addi	a5,s0,-40
    80003fc8:	863e                	mv	a2,a5
    80003fca:	4585                	li	a1,1
    80003fcc:	fe043503          	ld	a0,-32(s0)
    80003fd0:	9702                	jalr	a4
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:666
                                              &time);
        }
    }
    return time;
    80003fd2:	fd843783          	ld	a5,-40(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:667
}
    80003fd6:	853e                	mv	a0,a5
    80003fd8:	70e2                	ld	ra,56(sp)
    80003fda:	7442                	ld	s0,48(sp)
    80003fdc:	6121                	addi	sp,sp,64
    80003fde:	8082                	ret

0000000080003fe0 <__metal_driver_cpu_mtimecmp_set>:
__metal_driver_cpu_mtimecmp_set():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:670

int __metal_driver_cpu_mtimecmp_set(struct metal_cpu *cpu,
                                    unsigned long long time) {
    80003fe0:	715d                	addi	sp,sp,-80
    80003fe2:	e486                	sd	ra,72(sp)
    80003fe4:	e0a2                	sd	s0,64(sp)
    80003fe6:	fc26                	sd	s1,56(sp)
    80003fe8:	0880                	addi	s0,sp,80
    80003fea:	faa43c23          	sd	a0,-72(s0)
    80003fee:	fab43823          	sd	a1,-80(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:671
    int rc = -1;
    80003ff2:	57fd                	li	a5,-1
    80003ff4:	fcf42e23          	sw	a5,-36(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:675
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller(cpu);
    80003ff8:	fb843503          	ld	a0,-72(s0)
    80003ffc:	945fe0ef          	jal	ra,80002940 <__metal_driver_cpu_interrupt_controller>
    80004000:	fca43823          	sd	a0,-48(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:677

    if (intc) {
    80004004:	fd043783          	ld	a5,-48(s0)
    80004008:	cf85                	beqz	a5,80004040 <__metal_driver_cpu_mtimecmp_set+0x60>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:678
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
    8000400a:	fd043783          	ld	a5,-48(s0)
    8000400e:	2007b783          	ld	a5,512(a5)
    80004012:	fcf43423          	sd	a5,-56(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:679
        if (tmr_intc) {
    80004016:	fc843783          	ld	a5,-56(s0)
    8000401a:	c39d                	beqz	a5,80004040 <__metal_driver_cpu_mtimecmp_set+0x60>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:680
            rc = tmr_intc->vtable->mtimecmp_set(
    8000401c:	fc843783          	ld	a5,-56(s0)
    80004020:	639c                	ld	a5,0(a5)
    80004022:	73c4                	ld	s1,160(a5)
    80004024:	fb843503          	ld	a0,-72(s0)
    80004028:	8c9fe0ef          	jal	ra,800028f0 <__metal_driver_cpu_hartid>
    8000402c:	87aa                	mv	a5,a0
    8000402e:	fb043603          	ld	a2,-80(s0)
    80004032:	85be                	mv	a1,a5
    80004034:	fc843503          	ld	a0,-56(s0)
    80004038:	9482                	jalr	s1
    8000403a:	87aa                	mv	a5,a0
    8000403c:	fcf42e23          	sw	a5,-36(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:684
                tmr_intc, __metal_driver_cpu_hartid(cpu), time);
        }
    }
    return rc;
    80004040:	fdc42783          	lw	a5,-36(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:685
}
    80004044:	853e                	mv	a0,a5
    80004046:	60a6                	ld	ra,72(sp)
    80004048:	6406                	ld	s0,64(sp)
    8000404a:	74e2                	ld	s1,56(sp)
    8000404c:	6161                	addi	sp,sp,80
    8000404e:	8082                	ret

0000000080004050 <__metal_driver_cpu_timer_controller_interrupt>:
__metal_driver_cpu_timer_controller_interrupt():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:688

struct metal_interrupt *
__metal_driver_cpu_timer_controller_interrupt(struct metal_cpu *cpu) {
    80004050:	1101                	addi	sp,sp,-32
    80004052:	ec22                	sd	s0,24(sp)
    80004054:	1000                	addi	s0,sp,32
    80004056:	fea43423          	sd	a0,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:690
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
    8000405a:	00003797          	auipc	a5,0x3
    8000405e:	90678793          	addi	a5,a5,-1786 # 80006960 <__metal_dt_clint_2000000>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:699
#else
#pragma message("There is no interrupt controller for Timer interrupt")
    return NULL;
#endif
#endif
}
    80004062:	853e                	mv	a0,a5
    80004064:	6462                	ld	s0,24(sp)
    80004066:	6105                	addi	sp,sp,32
    80004068:	8082                	ret

000000008000406a <__metal_driver_cpu_get_timer_interrupt_id>:
__metal_driver_cpu_get_timer_interrupt_id():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:701

int __metal_driver_cpu_get_timer_interrupt_id(struct metal_cpu *cpu) {
    8000406a:	1101                	addi	sp,sp,-32
    8000406c:	ec22                	sd	s0,24(sp)
    8000406e:	1000                	addi	s0,sp,32
    80004070:	fea43423          	sd	a0,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:702
    return METAL_INTERRUPT_ID_TMR;
    80004074:	479d                	li	a5,7
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:703
}
    80004076:	853e                	mv	a0,a5
    80004078:	6462                	ld	s0,24(sp)
    8000407a:	6105                	addi	sp,sp,32
    8000407c:	8082                	ret

000000008000407e <__metal_driver_cpu_sw_controller_interrupt>:
__metal_driver_cpu_sw_controller_interrupt():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:706

struct metal_interrupt *
__metal_driver_cpu_sw_controller_interrupt(struct metal_cpu *cpu) {
    8000407e:	1101                	addi	sp,sp,-32
    80004080:	ec22                	sd	s0,24(sp)
    80004082:	1000                	addi	s0,sp,32
    80004084:	fea43423          	sd	a0,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:708
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
    80004088:	00003797          	auipc	a5,0x3
    8000408c:	8d878793          	addi	a5,a5,-1832 # 80006960 <__metal_dt_clint_2000000>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:717
#else
#pragma message("There is no interrupt controller for Software interrupt")
    return NULL;
#endif
#endif
}
    80004090:	853e                	mv	a0,a5
    80004092:	6462                	ld	s0,24(sp)
    80004094:	6105                	addi	sp,sp,32
    80004096:	8082                	ret

0000000080004098 <__metal_driver_cpu_get_sw_interrupt_id>:
__metal_driver_cpu_get_sw_interrupt_id():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:719

int __metal_driver_cpu_get_sw_interrupt_id(struct metal_cpu *cpu) {
    80004098:	1101                	addi	sp,sp,-32
    8000409a:	ec22                	sd	s0,24(sp)
    8000409c:	1000                	addi	s0,sp,32
    8000409e:	fea43423          	sd	a0,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:720
    return METAL_INTERRUPT_ID_SW;
    800040a2:	478d                	li	a5,3
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:721
}
    800040a4:	853e                	mv	a0,a5
    800040a6:	6462                	ld	s0,24(sp)
    800040a8:	6105                	addi	sp,sp,32
    800040aa:	8082                	ret

00000000800040ac <__metal_driver_cpu_set_sw_ipi>:
__metal_driver_cpu_set_sw_ipi():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:723

int __metal_driver_cpu_set_sw_ipi(struct metal_cpu *cpu, int hartid) {
    800040ac:	7139                	addi	sp,sp,-64
    800040ae:	fc06                	sd	ra,56(sp)
    800040b0:	f822                	sd	s0,48(sp)
    800040b2:	0080                	addi	s0,sp,64
    800040b4:	fca43423          	sd	a0,-56(s0)
    800040b8:	87ae                	mv	a5,a1
    800040ba:	fcf42223          	sw	a5,-60(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:724
    int rc = -1;
    800040be:	57fd                	li	a5,-1
    800040c0:	fef42623          	sw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:728
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller(cpu);
    800040c4:	fc843503          	ld	a0,-56(s0)
    800040c8:	879fe0ef          	jal	ra,80002940 <__metal_driver_cpu_interrupt_controller>
    800040cc:	fea43023          	sd	a0,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:730

    if (intc) {
    800040d0:	fe043783          	ld	a5,-32(s0)
    800040d4:	cb85                	beqz	a5,80004104 <__metal_driver_cpu_set_sw_ipi+0x58>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:731
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
    800040d6:	fe043783          	ld	a5,-32(s0)
    800040da:	1807b783          	ld	a5,384(a5)
    800040de:	fcf43c23          	sd	a5,-40(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:732
        if (sw_intc) {
    800040e2:	fd843783          	ld	a5,-40(s0)
    800040e6:	cf99                	beqz	a5,80004104 <__metal_driver_cpu_set_sw_ipi+0x58>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:733
            rc = sw_intc->vtable->command_request(
    800040e8:	fd843783          	ld	a5,-40(s0)
    800040ec:	639c                	ld	a5,0(a5)
    800040ee:	6fd8                	ld	a4,152(a5)
    800040f0:	fc440793          	addi	a5,s0,-60
    800040f4:	863e                	mv	a2,a5
    800040f6:	458d                	li	a1,3
    800040f8:	fd843503          	ld	a0,-40(s0)
    800040fc:	9702                	jalr	a4
    800040fe:	87aa                	mv	a5,a0
    80004100:	fef42623          	sw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:737
                sw_intc, METAL_SOFTWARE_IPI_SET, &hartid);
        }
    }
    return rc;
    80004104:	fec42783          	lw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:738
}
    80004108:	853e                	mv	a0,a5
    8000410a:	70e2                	ld	ra,56(sp)
    8000410c:	7442                	ld	s0,48(sp)
    8000410e:	6121                	addi	sp,sp,64
    80004110:	8082                	ret

0000000080004112 <__metal_driver_cpu_clear_sw_ipi>:
__metal_driver_cpu_clear_sw_ipi():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:740

int __metal_driver_cpu_clear_sw_ipi(struct metal_cpu *cpu, int hartid) {
    80004112:	7139                	addi	sp,sp,-64
    80004114:	fc06                	sd	ra,56(sp)
    80004116:	f822                	sd	s0,48(sp)
    80004118:	0080                	addi	s0,sp,64
    8000411a:	fca43423          	sd	a0,-56(s0)
    8000411e:	87ae                	mv	a5,a1
    80004120:	fcf42223          	sw	a5,-60(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:741
    int rc = -1;
    80004124:	57fd                	li	a5,-1
    80004126:	fef42623          	sw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:745
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller(cpu);
    8000412a:	fc843503          	ld	a0,-56(s0)
    8000412e:	813fe0ef          	jal	ra,80002940 <__metal_driver_cpu_interrupt_controller>
    80004132:	fea43023          	sd	a0,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:747

    if (intc) {
    80004136:	fe043783          	ld	a5,-32(s0)
    8000413a:	cb85                	beqz	a5,8000416a <__metal_driver_cpu_clear_sw_ipi+0x58>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:748
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
    8000413c:	fe043783          	ld	a5,-32(s0)
    80004140:	1807b783          	ld	a5,384(a5)
    80004144:	fcf43c23          	sd	a5,-40(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:749
        if (sw_intc) {
    80004148:	fd843783          	ld	a5,-40(s0)
    8000414c:	cf99                	beqz	a5,8000416a <__metal_driver_cpu_clear_sw_ipi+0x58>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:750
            rc = sw_intc->vtable->command_request(
    8000414e:	fd843783          	ld	a5,-40(s0)
    80004152:	639c                	ld	a5,0(a5)
    80004154:	6fd8                	ld	a4,152(a5)
    80004156:	fc440793          	addi	a5,s0,-60
    8000415a:	863e                	mv	a2,a5
    8000415c:	4589                	li	a1,2
    8000415e:	fd843503          	ld	a0,-40(s0)
    80004162:	9702                	jalr	a4
    80004164:	87aa                	mv	a5,a0
    80004166:	fef42623          	sw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:754
                sw_intc, METAL_SOFTWARE_IPI_CLEAR, &hartid);
        }
    }
    return rc;
    8000416a:	fec42783          	lw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:755
}
    8000416e:	853e                	mv	a0,a5
    80004170:	70e2                	ld	ra,56(sp)
    80004172:	7442                	ld	s0,48(sp)
    80004174:	6121                	addi	sp,sp,64
    80004176:	8082                	ret

0000000080004178 <__metal_driver_cpu_get_msip>:
__metal_driver_cpu_get_msip():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:757

int __metal_driver_cpu_get_msip(struct metal_cpu *cpu, int hartid) {
    80004178:	7139                	addi	sp,sp,-64
    8000417a:	fc06                	sd	ra,56(sp)
    8000417c:	f822                	sd	s0,48(sp)
    8000417e:	0080                	addi	s0,sp,64
    80004180:	fca43423          	sd	a0,-56(s0)
    80004184:	87ae                	mv	a5,a1
    80004186:	fcf42223          	sw	a5,-60(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:758
    int rc = 0;
    8000418a:	fe042623          	sw	zero,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:762
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller(cpu);
    8000418e:	fc843503          	ld	a0,-56(s0)
    80004192:	faefe0ef          	jal	ra,80002940 <__metal_driver_cpu_interrupt_controller>
    80004196:	fea43023          	sd	a0,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:764

    if (intc) {
    8000419a:	fe043783          	ld	a5,-32(s0)
    8000419e:	cb85                	beqz	a5,800041ce <__metal_driver_cpu_get_msip+0x56>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:765
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
    800041a0:	fe043783          	ld	a5,-32(s0)
    800041a4:	1807b783          	ld	a5,384(a5)
    800041a8:	fcf43c23          	sd	a5,-40(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:766
        if (sw_intc) {
    800041ac:	fd843783          	ld	a5,-40(s0)
    800041b0:	cf99                	beqz	a5,800041ce <__metal_driver_cpu_get_msip+0x56>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:767
            rc = sw_intc->vtable->command_request(
    800041b2:	fd843783          	ld	a5,-40(s0)
    800041b6:	639c                	ld	a5,0(a5)
    800041b8:	6fd8                	ld	a4,152(a5)
    800041ba:	fc440793          	addi	a5,s0,-60
    800041be:	863e                	mv	a2,a5
    800041c0:	4591                	li	a1,4
    800041c2:	fd843503          	ld	a0,-40(s0)
    800041c6:	9702                	jalr	a4
    800041c8:	87aa                	mv	a5,a0
    800041ca:	fef42623          	sw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:771
                sw_intc, METAL_SOFTWARE_MSIP_GET, &hartid);
        }
    }
    return rc;
    800041ce:	fec42783          	lw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:772
}
    800041d2:	853e                	mv	a0,a5
    800041d4:	70e2                	ld	ra,56(sp)
    800041d6:	7442                	ld	s0,48(sp)
    800041d8:	6121                	addi	sp,sp,64
    800041da:	8082                	ret

00000000800041dc <__metal_driver_cpu_controller_interrupt>:
__metal_driver_cpu_controller_interrupt():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:775

struct metal_interrupt *
__metal_driver_cpu_controller_interrupt(struct metal_cpu *cpu) {
    800041dc:	1101                	addi	sp,sp,-32
    800041de:	ec06                	sd	ra,24(sp)
    800041e0:	e822                	sd	s0,16(sp)
    800041e2:	1000                	addi	s0,sp,32
    800041e4:	fea43423          	sd	a0,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:776
    return __metal_driver_cpu_interrupt_controller(cpu);
    800041e8:	fe843503          	ld	a0,-24(s0)
    800041ec:	f54fe0ef          	jal	ra,80002940 <__metal_driver_cpu_interrupt_controller>
    800041f0:	87aa                	mv	a5,a0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:777
}
    800041f2:	853e                	mv	a0,a5
    800041f4:	60e2                	ld	ra,24(sp)
    800041f6:	6442                	ld	s0,16(sp)
    800041f8:	6105                	addi	sp,sp,32
    800041fa:	8082                	ret

00000000800041fc <__metal_driver_cpu_exception_register>:
__metal_driver_cpu_exception_register():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:798
    }
    return -1;
}

int __metal_driver_cpu_exception_register(struct metal_cpu *cpu, int ecode,
                                          metal_exception_handler_t isr) {
    800041fc:	7139                	addi	sp,sp,-64
    800041fe:	fc06                	sd	ra,56(sp)
    80004200:	f822                	sd	s0,48(sp)
    80004202:	0080                	addi	s0,sp,64
    80004204:	fca43c23          	sd	a0,-40(s0)
    80004208:	87ae                	mv	a5,a1
    8000420a:	fcc43423          	sd	a2,-56(s0)
    8000420e:	fcf42a23          	sw	a5,-44(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:801
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller(cpu);
    80004212:	fd843503          	ld	a0,-40(s0)
    80004216:	f2afe0ef          	jal	ra,80002940 <__metal_driver_cpu_interrupt_controller>
    8000421a:	fea43423          	sd	a0,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:803

    if (intc) {
    8000421e:	fe843783          	ld	a5,-24(s0)
    80004222:	cf81                	beqz	a5,8000423a <__metal_driver_cpu_exception_register+0x3e>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:804
        return __metal_exception_register((struct metal_interrupt *)intc, ecode,
    80004224:	fd442783          	lw	a5,-44(s0)
    80004228:	fc843603          	ld	a2,-56(s0)
    8000422c:	85be                	mv	a1,a5
    8000422e:	fe843503          	ld	a0,-24(s0)
    80004232:	905ff0ef          	jal	ra,80003b36 <__metal_exception_register>
    80004236:	87aa                	mv	a5,a0
    80004238:	a011                	j	8000423c <__metal_driver_cpu_exception_register+0x40>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:807
                                          isr);
    }
    return -1;
    8000423a:	57fd                	li	a5,-1
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:808
}
    8000423c:	853e                	mv	a0,a5
    8000423e:	70e2                	ld	ra,56(sp)
    80004240:	7442                	ld	s0,48(sp)
    80004242:	6121                	addi	sp,sp,64
    80004244:	8082                	ret

0000000080004246 <__metal_driver_cpu_get_instruction_length>:
__metal_driver_cpu_get_instruction_length():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:811

int __metal_driver_cpu_get_instruction_length(struct metal_cpu *cpu,
                                              uintptr_t epc) {
    80004246:	1101                	addi	sp,sp,-32
    80004248:	ec22                	sd	s0,24(sp)
    8000424a:	1000                	addi	s0,sp,32
    8000424c:	fea43423          	sd	a0,-24(s0)
    80004250:	feb43023          	sd	a1,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:817
    /**
     * Per ISA compressed instruction has last two bits of opcode set.
     * The encoding '00' '01' '10' are used for compressed instruction.
     * Only enconding '11' isn't regarded as compressed instruction (>16b).
     */
    return ((*(unsigned short *)epc & METAL_INSN_LENGTH_MASK) ==
    80004254:	fe043783          	ld	a5,-32(s0)
    80004258:	0007d783          	lhu	a5,0(a5)
    8000425c:	2781                	sext.w	a5,a5
    8000425e:	8b8d                	andi	a5,a5,3
    80004260:	2781                	sext.w	a5,a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:820
            METAL_INSN_NOT_COMPRESSED)
               ? 4
               : 2;
    80004262:	873e                	mv	a4,a5
    80004264:	478d                	li	a5,3
    80004266:	00f71463          	bne	a4,a5,8000426e <__metal_driver_cpu_get_instruction_length+0x28>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:820 (discriminator 1)
    8000426a:	4791                	li	a5,4
    8000426c:	a011                	j	80004270 <__metal_driver_cpu_get_instruction_length+0x2a>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:820 (discriminator 2)
    8000426e:	4789                	li	a5,2
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:821 (discriminator 4)
}
    80004270:	853e                	mv	a0,a5
    80004272:	6462                	ld	s0,24(sp)
    80004274:	6105                	addi	sp,sp,32
    80004276:	8082                	ret

0000000080004278 <__metal_driver_cpu_get_exception_pc>:
__metal_driver_cpu_get_exception_pc():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:823

uintptr_t __metal_driver_cpu_get_exception_pc(struct metal_cpu *cpu) {
    80004278:	7179                	addi	sp,sp,-48
    8000427a:	f422                	sd	s0,40(sp)
    8000427c:	1800                	addi	s0,sp,48
    8000427e:	fca43c23          	sd	a0,-40(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:825
    uintptr_t mepc;
    __asm__ volatile("csrr %0, mepc" : "=r"(mepc));
    80004282:	341027f3          	csrr	a5,mepc
    80004286:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:826
    return mepc;
    8000428a:	fe843783          	ld	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:827
}
    8000428e:	853e                	mv	a0,a5
    80004290:	7422                	ld	s0,40(sp)
    80004292:	6145                	addi	sp,sp,48
    80004294:	8082                	ret

0000000080004296 <__metal_driver_cpu_set_exception_pc>:
__metal_driver_cpu_set_exception_pc():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:829

int __metal_driver_cpu_set_exception_pc(struct metal_cpu *cpu, uintptr_t mepc) {
    80004296:	1101                	addi	sp,sp,-32
    80004298:	ec22                	sd	s0,24(sp)
    8000429a:	1000                	addi	s0,sp,32
    8000429c:	fea43423          	sd	a0,-24(s0)
    800042a0:	feb43023          	sd	a1,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:830
    __asm__ volatile("csrw mepc, %0" ::"r"(mepc));
    800042a4:	fe043783          	ld	a5,-32(s0)
    800042a8:	34179073          	csrw	mepc,a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:831
    return 0;
    800042ac:	4781                	li	a5,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:832
}
    800042ae:	853e                	mv	a0,a5
    800042b0:	6462                	ld	s0,24(sp)
    800042b2:	6105                	addi	sp,sp,32
    800042b4:	8082                	ret

00000000800042b6 <__metal_driver_cpu_get_buserror>:
__metal_driver_cpu_get_buserror():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:834

struct metal_buserror *__metal_driver_cpu_get_buserror(struct metal_cpu *cpu) {
    800042b6:	1101                	addi	sp,sp,-32
    800042b8:	ec06                	sd	ra,24(sp)
    800042ba:	e822                	sd	s0,16(sp)
    800042bc:	1000                	addi	s0,sp,32
    800042be:	fea43423          	sd	a0,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:835
    return __metal_driver_cpu_buserror(cpu);
    800042c2:	fe843503          	ld	a0,-24(s0)
    800042c6:	ea8fe0ef          	jal	ra,8000296e <__metal_driver_cpu_buserror>
    800042ca:	87aa                	mv	a5,a0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:836
}
    800042cc:	853e                	mv	a0,a5
    800042ce:	60e2                	ld	ra,24(sp)
    800042d0:	6442                	ld	s0,16(sp)
    800042d2:	6105                	addi	sp,sp,32
    800042d4:	8082                	ret

00000000800042d6 <__metal_driver_sifive_plic0_control_base>:
__metal_driver_sifive_plic0_control_base():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:262



/* --------------------- sifive_plic0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_plic0_control_base(struct metal_interrupt *controller)
{
    800042d6:	1101                	addi	sp,sp,-32
    800042d8:	ec22                	sd	s0,24(sp)
    800042da:	1000                	addi	s0,sp,32
    800042dc:	fea43423          	sd	a0,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:263
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
    800042e0:	fe843703          	ld	a4,-24(s0)
    800042e4:	00003797          	auipc	a5,0x3
    800042e8:	c2c78793          	addi	a5,a5,-980 # 80006f10 <__metal_dt_interrupt_controller_c000000>
    800042ec:	00f71563          	bne	a4,a5,800042f6 <__metal_driver_sifive_plic0_control_base+0x20>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:264
		return METAL_RISCV_PLIC0_C000000_BASE_ADDRESS;
    800042f0:	0c0007b7          	lui	a5,0xc000
    800042f4:	a011                	j	800042f8 <__metal_driver_sifive_plic0_control_base+0x22>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:267
	}
	else {
		return 0;
    800042f6:	4781                	li	a5,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:269
	}
}
    800042f8:	853e                	mv	a0,a5
    800042fa:	6462                	ld	s0,24(sp)
    800042fc:	6105                	addi	sp,sp,32
    800042fe:	8082                	ret

0000000080004300 <__metal_driver_sifive_plic0_num_interrupts>:
__metal_driver_sifive_plic0_num_interrupts():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:282
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_plic0_num_interrupts(struct metal_interrupt *controller)
{
    80004300:	1101                	addi	sp,sp,-32
    80004302:	ec22                	sd	s0,24(sp)
    80004304:	1000                	addi	s0,sp,32
    80004306:	fea43423          	sd	a0,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:283
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
    8000430a:	fe843703          	ld	a4,-24(s0)
    8000430e:	00003797          	auipc	a5,0x3
    80004312:	c0278793          	addi	a5,a5,-1022 # 80006f10 <__metal_dt_interrupt_controller_c000000>
    80004316:	00f71563          	bne	a4,a5,80004320 <__metal_driver_sifive_plic0_num_interrupts+0x20>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:284
		return METAL_RISCV_PLIC0_C000000_RISCV_NDEV;
    8000431a:	02500793          	li	a5,37
    8000431e:	a011                	j	80004322 <__metal_driver_sifive_plic0_num_interrupts+0x22>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:287
	}
	else {
		return 0;
    80004320:	4781                	li	a5,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:289
	}
}
    80004322:	853e                	mv	a0,a5
    80004324:	6462                	ld	s0,24(sp)
    80004326:	6105                	addi	sp,sp,32
    80004328:	8082                	ret

000000008000432a <__metal_driver_sifive_plic0_max_priority>:
__metal_driver_sifive_plic0_max_priority():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:292

static __inline__ int __metal_driver_sifive_plic0_max_priority(struct metal_interrupt *controller)
{
    8000432a:	1101                	addi	sp,sp,-32
    8000432c:	ec22                	sd	s0,24(sp)
    8000432e:	1000                	addi	s0,sp,32
    80004330:	fea43423          	sd	a0,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:293
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
    80004334:	fe843703          	ld	a4,-24(s0)
    80004338:	00003797          	auipc	a5,0x3
    8000433c:	bd878793          	addi	a5,a5,-1064 # 80006f10 <__metal_dt_interrupt_controller_c000000>
    80004340:	00f71463          	bne	a4,a5,80004348 <__metal_driver_sifive_plic0_max_priority+0x1e>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:294
		return METAL_RISCV_PLIC0_C000000_RISCV_MAX_PRIORITY;
    80004344:	479d                	li	a5,7
    80004346:	a011                	j	8000434a <__metal_driver_sifive_plic0_max_priority+0x20>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:297
	}
	else {
		return 0;
    80004348:	4781                	li	a5,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:299
	}
}
    8000434a:	853e                	mv	a0,a5
    8000434c:	6462                	ld	s0,24(sp)
    8000434e:	6105                	addi	sp,sp,32
    80004350:	8082                	ret

0000000080004352 <__metal_driver_sifive_plic0_interrupt_parents>:
__metal_driver_sifive_plic0_interrupt_parents():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:302

static __inline__ struct metal_interrupt * __metal_driver_sifive_plic0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
    80004352:	1101                	addi	sp,sp,-32
    80004354:	ec22                	sd	s0,24(sp)
    80004356:	1000                	addi	s0,sp,32
    80004358:	fea43423          	sd	a0,-24(s0)
    8000435c:	87ae                	mv	a5,a1
    8000435e:	fef42223          	sw	a5,-28(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:303
	if (idx == 0) {
    80004362:	fe442783          	lw	a5,-28(s0)
    80004366:	2781                	sext.w	a5,a5
    80004368:	e791                	bnez	a5,80004374 <__metal_driver_sifive_plic0_interrupt_parents+0x22>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:304
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
    8000436a:	00002797          	auipc	a5,0x2
    8000436e:	61678793          	addi	a5,a5,1558 # 80006980 <__metal_dt_cpu_0_interrupt_controller>
    80004372:	a831                	j	8000438e <__metal_driver_sifive_plic0_interrupt_parents+0x3c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:306
	}
	else if (idx == 1) {
    80004374:	fe442783          	lw	a5,-28(s0)
    80004378:	0007871b          	sext.w	a4,a5
    8000437c:	4785                	li	a5,1
    8000437e:	00f71763          	bne	a4,a5,8000438c <__metal_driver_sifive_plic0_interrupt_parents+0x3a>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:307
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
    80004382:	00002797          	auipc	a5,0x2
    80004386:	5fe78793          	addi	a5,a5,1534 # 80006980 <__metal_dt_cpu_0_interrupt_controller>
    8000438a:	a011                	j	8000438e <__metal_driver_sifive_plic0_interrupt_parents+0x3c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:310
	}
	else {
		return NULL;
    8000438c:	4781                	li	a5,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:312
	}
}
    8000438e:	853e                	mv	a0,a5
    80004390:	6462                	ld	s0,24(sp)
    80004392:	6105                	addi	sp,sp,32
    80004394:	8082                	ret

0000000080004396 <__metal_driver_sifive_plic0_interrupt_lines>:
__metal_driver_sifive_plic0_interrupt_lines():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:315

static __inline__ int __metal_driver_sifive_plic0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
    80004396:	1101                	addi	sp,sp,-32
    80004398:	ec22                	sd	s0,24(sp)
    8000439a:	1000                	addi	s0,sp,32
    8000439c:	fea43423          	sd	a0,-24(s0)
    800043a0:	87ae                	mv	a5,a1
    800043a2:	fef42223          	sw	a5,-28(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:316
	if (idx == 0) {
    800043a6:	fe442783          	lw	a5,-28(s0)
    800043aa:	2781                	sext.w	a5,a5
    800043ac:	e399                	bnez	a5,800043b2 <__metal_driver_sifive_plic0_interrupt_lines+0x1c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:317
		return 11;
    800043ae:	47ad                	li	a5,11
    800043b0:	a819                	j	800043c6 <__metal_driver_sifive_plic0_interrupt_lines+0x30>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:319
	}
	else if (idx == 1) {
    800043b2:	fe442783          	lw	a5,-28(s0)
    800043b6:	0007871b          	sext.w	a4,a5
    800043ba:	4785                	li	a5,1
    800043bc:	00f71463          	bne	a4,a5,800043c4 <__metal_driver_sifive_plic0_interrupt_lines+0x2e>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:320
		return 9;
    800043c0:	47a5                	li	a5,9
    800043c2:	a011                	j	800043c6 <__metal_driver_sifive_plic0_interrupt_lines+0x30>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:323
	}
	else {
		return 0;
    800043c4:	4781                	li	a5,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:325
	}
}
    800043c6:	853e                	mv	a0,a5
    800043c8:	6462                	ld	s0,24(sp)
    800043ca:	6105                	addi	sp,sp,32
    800043cc:	8082                	ret

00000000800043ce <__metal_driver_sifive_plic0_context_ids>:
__metal_driver_sifive_plic0_context_ids():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:328

static __inline__ int __metal_driver_sifive_plic0_context_ids(int hartid)
{
    800043ce:	1101                	addi	sp,sp,-32
    800043d0:	ec22                	sd	s0,24(sp)
    800043d2:	1000                	addi	s0,sp,32
    800043d4:	87aa                	mv	a5,a0
    800043d6:	fef42623          	sw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:329
	if (hartid == 0) {
    800043da:	fec42783          	lw	a5,-20(s0)
    800043de:	2781                	sext.w	a5,a5
    800043e0:	e399                	bnez	a5,800043e6 <__metal_driver_sifive_plic0_context_ids+0x18>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:330
		return 0;
    800043e2:	4781                	li	a5,0
    800043e4:	a011                	j	800043e8 <__metal_driver_sifive_plic0_context_ids+0x1a>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:333
	}
	else {
		return -1;
    800043e6:	57fd                	li	a5,-1
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:335
	}
}
    800043e8:	853e                	mv	a0,a5
    800043ea:	6462                	ld	s0,24(sp)
    800043ec:	6105                	addi	sp,sp,32
    800043ee:	8082                	ret

00000000800043f0 <__metal_plic0_claim_interrupt>:
__metal_plic0_claim_interrupt():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:18
#include <metal/machine.h>
#include <metal/shutdown.h>

unsigned int
__metal_plic0_claim_interrupt(struct __metal_driver_riscv_plic0 *plic,
                              int context_id) {
    800043f0:	7179                	addi	sp,sp,-48
    800043f2:	f406                	sd	ra,40(sp)
    800043f4:	f022                	sd	s0,32(sp)
    800043f6:	1800                	addi	s0,sp,48
    800043f8:	fca43c23          	sd	a0,-40(s0)
    800043fc:	87ae                	mv	a5,a1
    800043fe:	fcf42a23          	sw	a5,-44(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:19
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(
    80004402:	fd843503          	ld	a0,-40(s0)
    80004406:	ed1ff0ef          	jal	ra,800042d6 <__metal_driver_sifive_plic0_control_base>
    8000440a:	fea43423          	sd	a0,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:21
        (struct metal_interrupt *)plic);
    return __METAL_ACCESS_ONCE(
    8000440e:	fd442783          	lw	a5,-44(s0)
    80004412:	00c79713          	slli	a4,a5,0xc
    80004416:	fe843783          	ld	a5,-24(s0)
    8000441a:	973e                	add	a4,a4,a5
    8000441c:	002007b7          	lui	a5,0x200
    80004420:	0791                	addi	a5,a5,4
    80004422:	97ba                	add	a5,a5,a4
    80004424:	439c                	lw	a5,0(a5)
    80004426:	2781                	sext.w	a5,a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:25
        (__metal_io_u32 *)(control_base + METAL_RISCV_PLIC0_CONTEXT_BASE +
                           (context_id * METAL_RISCV_PLIC0_CONTEXT_PER_HART) +
                           METAL_RISCV_PLIC0_CONTEXT_CLAIM));
}
    80004428:	853e                	mv	a0,a5
    8000442a:	70a2                	ld	ra,40(sp)
    8000442c:	7402                	ld	s0,32(sp)
    8000442e:	6145                	addi	sp,sp,48
    80004430:	8082                	ret

0000000080004432 <__metal_plic0_complete_interrupt>:
__metal_plic0_complete_interrupt():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:28

void __metal_plic0_complete_interrupt(struct __metal_driver_riscv_plic0 *plic,
                                      int context_id, unsigned int id) {
    80004432:	7179                	addi	sp,sp,-48
    80004434:	f406                	sd	ra,40(sp)
    80004436:	f022                	sd	s0,32(sp)
    80004438:	1800                	addi	s0,sp,48
    8000443a:	fca43c23          	sd	a0,-40(s0)
    8000443e:	87ae                	mv	a5,a1
    80004440:	8732                	mv	a4,a2
    80004442:	fcf42a23          	sw	a5,-44(s0)
    80004446:	87ba                	mv	a5,a4
    80004448:	fcf42823          	sw	a5,-48(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:29
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(
    8000444c:	fd843503          	ld	a0,-40(s0)
    80004450:	e87ff0ef          	jal	ra,800042d6 <__metal_driver_sifive_plic0_control_base>
    80004454:	fea43423          	sd	a0,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:31
        (struct metal_interrupt *)plic);
    __METAL_ACCESS_ONCE(
    80004458:	fd442783          	lw	a5,-44(s0)
    8000445c:	00c79713          	slli	a4,a5,0xc
    80004460:	fe843783          	ld	a5,-24(s0)
    80004464:	973e                	add	a4,a4,a5
    80004466:	002007b7          	lui	a5,0x200
    8000446a:	0791                	addi	a5,a5,4
    8000446c:	97ba                	add	a5,a5,a4
    8000446e:	873e                	mv	a4,a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:34
        (__metal_io_u32 *)(control_base + METAL_RISCV_PLIC0_CONTEXT_BASE +
                           (context_id * METAL_RISCV_PLIC0_CONTEXT_PER_HART) +
                           METAL_RISCV_PLIC0_CONTEXT_CLAIM)) = id;
    80004470:	fd042783          	lw	a5,-48(s0)
    80004474:	c31c                	sw	a5,0(a4)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:35
}
    80004476:	0001                	nop
    80004478:	70a2                	ld	ra,40(sp)
    8000447a:	7402                	ld	s0,32(sp)
    8000447c:	6145                	addi	sp,sp,48
    8000447e:	8082                	ret

0000000080004480 <__metal_plic0_set_threshold>:
__metal_plic0_set_threshold():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:38

int __metal_plic0_set_threshold(struct metal_interrupt *controller,
                                int context_id, unsigned int threshold) {
    80004480:	7179                	addi	sp,sp,-48
    80004482:	f406                	sd	ra,40(sp)
    80004484:	f022                	sd	s0,32(sp)
    80004486:	1800                	addi	s0,sp,48
    80004488:	fca43c23          	sd	a0,-40(s0)
    8000448c:	87ae                	mv	a5,a1
    8000448e:	8732                	mv	a4,a2
    80004490:	fcf42a23          	sw	a5,-44(s0)
    80004494:	87ba                	mv	a5,a4
    80004496:	fcf42823          	sw	a5,-48(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:40
    unsigned long control_base =
        __metal_driver_sifive_plic0_control_base(controller);
    8000449a:	fd843503          	ld	a0,-40(s0)
    8000449e:	e39ff0ef          	jal	ra,800042d6 <__metal_driver_sifive_plic0_control_base>
    800044a2:	fea43423          	sd	a0,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:41
    __METAL_ACCESS_ONCE(
    800044a6:	fd442783          	lw	a5,-44(s0)
    800044aa:	00c79713          	slli	a4,a5,0xc
    800044ae:	fe843783          	ld	a5,-24(s0)
    800044b2:	973e                	add	a4,a4,a5
    800044b4:	002007b7          	lui	a5,0x200
    800044b8:	97ba                	add	a5,a5,a4
    800044ba:	873e                	mv	a4,a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:44
        (__metal_io_u32 *)(control_base + METAL_RISCV_PLIC0_CONTEXT_BASE +
                           (context_id * METAL_RISCV_PLIC0_CONTEXT_PER_HART) +
                           METAL_RISCV_PLIC0_CONTEXT_THRESHOLD)) = threshold;
    800044bc:	fd042783          	lw	a5,-48(s0)
    800044c0:	c31c                	sw	a5,0(a4)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:45
    return 0;
    800044c2:	4781                	li	a5,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:46
}
    800044c4:	853e                	mv	a0,a5
    800044c6:	70a2                	ld	ra,40(sp)
    800044c8:	7402                	ld	s0,32(sp)
    800044ca:	6145                	addi	sp,sp,48
    800044cc:	8082                	ret

00000000800044ce <__metal_plic0_get_threshold>:
__metal_plic0_get_threshold():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:49

unsigned int __metal_plic0_get_threshold(struct metal_interrupt *controller,
                                         int context_id) {
    800044ce:	7179                	addi	sp,sp,-48
    800044d0:	f406                	sd	ra,40(sp)
    800044d2:	f022                	sd	s0,32(sp)
    800044d4:	1800                	addi	s0,sp,48
    800044d6:	fca43c23          	sd	a0,-40(s0)
    800044da:	87ae                	mv	a5,a1
    800044dc:	fcf42a23          	sw	a5,-44(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:51
    unsigned long control_base =
        __metal_driver_sifive_plic0_control_base(controller);
    800044e0:	fd843503          	ld	a0,-40(s0)
    800044e4:	df3ff0ef          	jal	ra,800042d6 <__metal_driver_sifive_plic0_control_base>
    800044e8:	fea43423          	sd	a0,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:52
    return __METAL_ACCESS_ONCE(
    800044ec:	fd442783          	lw	a5,-44(s0)
    800044f0:	00c79713          	slli	a4,a5,0xc
    800044f4:	fe843783          	ld	a5,-24(s0)
    800044f8:	973e                	add	a4,a4,a5
    800044fa:	002007b7          	lui	a5,0x200
    800044fe:	97ba                	add	a5,a5,a4
    80004500:	439c                	lw	a5,0(a5)
    80004502:	2781                	sext.w	a5,a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:56
        (__metal_io_u32 *)(control_base + METAL_RISCV_PLIC0_CONTEXT_BASE +
                           (context_id * METAL_RISCV_PLIC0_CONTEXT_PER_HART) +
                           METAL_RISCV_PLIC0_CONTEXT_THRESHOLD));
}
    80004504:	853e                	mv	a0,a5
    80004506:	70a2                	ld	ra,40(sp)
    80004508:	7402                	ld	s0,32(sp)
    8000450a:	6145                	addi	sp,sp,48
    8000450c:	8082                	ret

000000008000450e <__metal_driver_riscv_plic0_set_priority>:
__metal_driver_riscv_plic0_set_priority():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:59

int __metal_driver_riscv_plic0_set_priority(struct metal_interrupt *controller,
                                            int id, unsigned int priority) {
    8000450e:	7179                	addi	sp,sp,-48
    80004510:	f406                	sd	ra,40(sp)
    80004512:	f022                	sd	s0,32(sp)
    80004514:	1800                	addi	s0,sp,48
    80004516:	fca43c23          	sd	a0,-40(s0)
    8000451a:	87ae                	mv	a5,a1
    8000451c:	8732                	mv	a4,a2
    8000451e:	fcf42a23          	sw	a5,-44(s0)
    80004522:	87ba                	mv	a5,a4
    80004524:	fcf42823          	sw	a5,-48(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:60
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(
    80004528:	fd843503          	ld	a0,-40(s0)
    8000452c:	dabff0ef          	jal	ra,800042d6 <__metal_driver_sifive_plic0_control_base>
    80004530:	fea43423          	sd	a0,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:62
        (struct metal_interrupt *)controller);
    unsigned int max_priority = __metal_driver_sifive_plic0_max_priority(
    80004534:	fd843503          	ld	a0,-40(s0)
    80004538:	df3ff0ef          	jal	ra,8000432a <__metal_driver_sifive_plic0_max_priority>
    8000453c:	87aa                	mv	a5,a0
    8000453e:	fef42223          	sw	a5,-28(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:64
        (struct metal_interrupt *)controller);
    if ((max_priority) && (priority < max_priority)) {
    80004542:	fe442783          	lw	a5,-28(s0)
    80004546:	2781                	sext.w	a5,a5
    80004548:	cb85                	beqz	a5,80004578 <__metal_driver_riscv_plic0_set_priority+0x6a>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:64 (discriminator 1)
    8000454a:	fd042703          	lw	a4,-48(s0)
    8000454e:	fe442783          	lw	a5,-28(s0)
    80004552:	2701                	sext.w	a4,a4
    80004554:	2781                	sext.w	a5,a5
    80004556:	02f77163          	bgeu	a4,a5,80004578 <__metal_driver_riscv_plic0_set_priority+0x6a>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:65
        __METAL_ACCESS_ONCE(
    8000455a:	fd442783          	lw	a5,-44(s0)
    8000455e:	0027979b          	slliw	a5,a5,0x2
    80004562:	2781                	sext.w	a5,a5
    80004564:	873e                	mv	a4,a5
    80004566:	fe843783          	ld	a5,-24(s0)
    8000456a:	97ba                	add	a5,a5,a4
    8000456c:	873e                	mv	a4,a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:67
            (__metal_io_u32 *)(control_base + METAL_RISCV_PLIC0_PRIORITY_BASE +
                               (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT))) =
    8000456e:	fd042783          	lw	a5,-48(s0)
    80004572:	c31c                	sw	a5,0(a4)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:69
            priority;
        return 0;
    80004574:	4781                	li	a5,0
    80004576:	a011                	j	8000457a <__metal_driver_riscv_plic0_set_priority+0x6c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:71
    }
    return -1;
    80004578:	57fd                	li	a5,-1
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:72
}
    8000457a:	853e                	mv	a0,a5
    8000457c:	70a2                	ld	ra,40(sp)
    8000457e:	7402                	ld	s0,32(sp)
    80004580:	6145                	addi	sp,sp,48
    80004582:	8082                	ret

0000000080004584 <__metal_driver_riscv_plic0_get_priority>:
__metal_driver_riscv_plic0_get_priority():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:76

unsigned int
__metal_driver_riscv_plic0_get_priority(struct metal_interrupt *controller,
                                        int id) {
    80004584:	7179                	addi	sp,sp,-48
    80004586:	f406                	sd	ra,40(sp)
    80004588:	f022                	sd	s0,32(sp)
    8000458a:	1800                	addi	s0,sp,48
    8000458c:	fca43c23          	sd	a0,-40(s0)
    80004590:	87ae                	mv	a5,a1
    80004592:	fcf42a23          	sw	a5,-44(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78
    unsigned long control_base =
        __metal_driver_sifive_plic0_control_base(controller);
    80004596:	fd843503          	ld	a0,-40(s0)
    8000459a:	d3dff0ef          	jal	ra,800042d6 <__metal_driver_sifive_plic0_control_base>
    8000459e:	fea43423          	sd	a0,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:80

    return __METAL_ACCESS_ONCE(
    800045a2:	fd442783          	lw	a5,-44(s0)
    800045a6:	0027979b          	slliw	a5,a5,0x2
    800045aa:	2781                	sext.w	a5,a5
    800045ac:	873e                	mv	a4,a5
    800045ae:	fe843783          	ld	a5,-24(s0)
    800045b2:	97ba                	add	a5,a5,a4
    800045b4:	439c                	lw	a5,0(a5)
    800045b6:	2781                	sext.w	a5,a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:83
        (__metal_io_u32 *)(control_base + METAL_RISCV_PLIC0_PRIORITY_BASE +
                           (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT)));
}
    800045b8:	853e                	mv	a0,a5
    800045ba:	70a2                	ld	ra,40(sp)
    800045bc:	7402                	ld	s0,32(sp)
    800045be:	6145                	addi	sp,sp,48
    800045c0:	8082                	ret

00000000800045c2 <__metal_plic0_enable>:
__metal_plic0_enable():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:86

int __metal_plic0_enable(struct __metal_driver_riscv_plic0 *plic,
                         int context_id, int id, int enable) {
    800045c2:	7139                	addi	sp,sp,-64
    800045c4:	fc06                	sd	ra,56(sp)
    800045c6:	f822                	sd	s0,48(sp)
    800045c8:	0080                	addi	s0,sp,64
    800045ca:	fca43c23          	sd	a0,-40(s0)
    800045ce:	87ae                	mv	a5,a1
    800045d0:	8736                	mv	a4,a3
    800045d2:	fcf42a23          	sw	a5,-44(s0)
    800045d6:	87b2                	mv	a5,a2
    800045d8:	fcf42823          	sw	a5,-48(s0)
    800045dc:	87ba                	mv	a5,a4
    800045de:	fcf42623          	sw	a5,-52(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:88
    unsigned int current;
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(
    800045e2:	fd843503          	ld	a0,-40(s0)
    800045e6:	cf1ff0ef          	jal	ra,800042d6 <__metal_driver_sifive_plic0_control_base>
    800045ea:	fea43423          	sd	a0,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91
        (struct metal_interrupt *)plic);

    current = __METAL_ACCESS_ONCE(
    800045ee:	fd442783          	lw	a5,-44(s0)
    800045f2:	00779713          	slli	a4,a5,0x7
    800045f6:	fe843783          	ld	a5,-24(s0)
    800045fa:	97ba                	add	a5,a5,a4
    800045fc:	fd042703          	lw	a4,-48(s0)
    80004600:	4057571b          	sraiw	a4,a4,0x5
    80004604:	2701                	sext.w	a4,a4
    80004606:	0027171b          	slliw	a4,a4,0x2
    8000460a:	2701                	sext.w	a4,a4
    8000460c:	973e                	add	a4,a4,a5
    8000460e:	6789                	lui	a5,0x2
    80004610:	97ba                	add	a5,a5,a4
    80004612:	439c                	lw	a5,0(a5)
    80004614:	fef42223          	sw	a5,-28(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:100
    __METAL_ACCESS_ONCE(
        (__metal_io_u32 *)(control_base + METAL_RISCV_PLIC0_ENABLE_BASE +
                           (context_id * METAL_RISCV_PLIC0_ENABLE_PER_HART) +
                           ((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
        enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
               : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
    80004618:	fcc42783          	lw	a5,-52(s0)
    8000461c:	2781                	sext.w	a5,a5
    8000461e:	c385                	beqz	a5,8000463e <__metal_plic0_enable+0x7c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:99 (discriminator 1)
        enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
    80004620:	fd042783          	lw	a5,-48(s0)
    80004624:	8bfd                	andi	a5,a5,31
    80004626:	2781                	sext.w	a5,a5
    80004628:	4705                	li	a4,1
    8000462a:	00f717bb          	sllw	a5,a4,a5
    8000462e:	2781                	sext.w	a5,a5
    80004630:	0007871b          	sext.w	a4,a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:100 (discriminator 1)
               : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
    80004634:	fe442783          	lw	a5,-28(s0)
    80004638:	8fd9                	or	a5,a5,a4
    8000463a:	2781                	sext.w	a5,a5
    8000463c:	a015                	j	80004660 <__metal_plic0_enable+0x9e>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:100 (discriminator 2)
    8000463e:	fd042783          	lw	a5,-48(s0)
    80004642:	8bfd                	andi	a5,a5,31
    80004644:	2781                	sext.w	a5,a5
    80004646:	4705                	li	a4,1
    80004648:	00f717bb          	sllw	a5,a4,a5
    8000464c:	2781                	sext.w	a5,a5
    8000464e:	fff7c793          	not	a5,a5
    80004652:	2781                	sext.w	a5,a5
    80004654:	0007871b          	sext.w	a4,a5
    80004658:	fe442783          	lw	a5,-28(s0)
    8000465c:	8ff9                	and	a5,a5,a4
    8000465e:	2781                	sext.w	a5,a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:95
    __METAL_ACCESS_ONCE(
    80004660:	fd442703          	lw	a4,-44(s0)
    80004664:	00771693          	slli	a3,a4,0x7
    80004668:	fe843703          	ld	a4,-24(s0)
    8000466c:	9736                	add	a4,a4,a3
    8000466e:	fd042683          	lw	a3,-48(s0)
    80004672:	4056d69b          	sraiw	a3,a3,0x5
    80004676:	2681                	sext.w	a3,a3
    80004678:	0026969b          	slliw	a3,a3,0x2
    8000467c:	2681                	sext.w	a3,a3
    8000467e:	96ba                	add	a3,a3,a4
    80004680:	6709                	lui	a4,0x2
    80004682:	9736                	add	a4,a4,a3
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:98
                           ((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
    80004684:	c31c                	sw	a5,0(a4)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:102

    return 0;
    80004686:	4781                	li	a5,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:103
}
    80004688:	853e                	mv	a0,a5
    8000468a:	70e2                	ld	ra,56(sp)
    8000468c:	7442                	ld	s0,48(sp)
    8000468e:	6121                	addi	sp,sp,64
    80004690:	8082                	ret

0000000080004692 <__metal_plic0_default_handler>:
__metal_plic0_default_handler():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:105

void __metal_plic0_default_handler(int id, void *priv) { metal_shutdown(300); }
    80004692:	1101                	addi	sp,sp,-32
    80004694:	ec06                	sd	ra,24(sp)
    80004696:	e822                	sd	s0,16(sp)
    80004698:	1000                	addi	s0,sp,32
    8000469a:	87aa                	mv	a5,a0
    8000469c:	feb43023          	sd	a1,-32(s0)
    800046a0:	fef42623          	sw	a5,-20(s0)
    800046a4:	12c00513          	li	a0,300
    800046a8:	09d010ef          	jal	ra,80005f44 <metal_shutdown>

00000000800046ac <__metal_plic0_handler>:
__metal_plic0_handler():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107

void __metal_plic0_handler(int id, void *priv) {
    800046ac:	7139                	addi	sp,sp,-64
    800046ae:	fc06                	sd	ra,56(sp)
    800046b0:	f822                	sd	s0,48(sp)
    800046b2:	0080                	addi	s0,sp,64
    800046b4:	87aa                	mv	a5,a0
    800046b6:	fcb43023          	sd	a1,-64(s0)
    800046ba:	fcf42623          	sw	a5,-52(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:108
    struct __metal_driver_riscv_plic0 *plic = priv;
    800046be:	fc043783          	ld	a5,-64(s0)
    800046c2:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:110
    int contextid =
        __metal_driver_sifive_plic0_context_ids(__metal_myhart_id());
    800046c6:	b04fe0ef          	jal	ra,800029ca <__metal_myhart_id>
    800046ca:	87aa                	mv	a5,a0
    800046cc:	2781                	sext.w	a5,a5
    800046ce:	853e                	mv	a0,a5
    800046d0:	cffff0ef          	jal	ra,800043ce <__metal_driver_sifive_plic0_context_ids>
    800046d4:	87aa                	mv	a5,a0
    800046d6:	fef42223          	sw	a5,-28(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:111
    unsigned int idx = __metal_plic0_claim_interrupt(plic, contextid);
    800046da:	fe442783          	lw	a5,-28(s0)
    800046de:	85be                	mv	a1,a5
    800046e0:	fe843503          	ld	a0,-24(s0)
    800046e4:	d0dff0ef          	jal	ra,800043f0 <__metal_plic0_claim_interrupt>
    800046e8:	87aa                	mv	a5,a0
    800046ea:	fef42023          	sw	a5,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:112
    unsigned int num_interrupts = __metal_driver_sifive_plic0_num_interrupts(
    800046ee:	fe843503          	ld	a0,-24(s0)
    800046f2:	c0fff0ef          	jal	ra,80004300 <__metal_driver_sifive_plic0_num_interrupts>
    800046f6:	87aa                	mv	a5,a0
    800046f8:	fcf42e23          	sw	a5,-36(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115
        (struct metal_interrupt *)plic);

    if ((idx < num_interrupts) && (plic->metal_exint_table[idx])) {
    800046fc:	fe042703          	lw	a4,-32(s0)
    80004700:	fdc42783          	lw	a5,-36(s0)
    80004704:	2701                	sext.w	a4,a4
    80004706:	2781                	sext.w	a5,a5
    80004708:	04f77063          	bgeu	a4,a5,80004748 <__metal_plic0_handler+0x9c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 1)
    8000470c:	fe843703          	ld	a4,-24(s0)
    80004710:	fe046783          	lwu	a5,-32(s0)
    80004714:	0789                	addi	a5,a5,2
    80004716:	078e                	slli	a5,a5,0x3
    80004718:	97ba                	add	a5,a5,a4
    8000471a:	639c                	ld	a5,0(a5)
    8000471c:	c795                	beqz	a5,80004748 <__metal_plic0_handler+0x9c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:116
        plic->metal_exint_table[idx](idx,
    8000471e:	fe843703          	ld	a4,-24(s0)
    80004722:	fe046783          	lwu	a5,-32(s0)
    80004726:	0789                	addi	a5,a5,2
    80004728:	078e                	slli	a5,a5,0x3
    8000472a:	97ba                	add	a5,a5,a4
    8000472c:	6390                	ld	a2,0(a5)
    8000472e:	fe042683          	lw	a3,-32(s0)
    80004732:	fe843703          	ld	a4,-24(s0)
    80004736:	fe046783          	lwu	a5,-32(s0)
    8000473a:	07a9                	addi	a5,a5,10
    8000473c:	0796                	slli	a5,a5,0x5
    8000473e:	97ba                	add	a5,a5,a4
    80004740:	6b9c                	ld	a5,16(a5)
    80004742:	85be                	mv	a1,a5
    80004744:	8536                	mv	a0,a3
    80004746:	9602                	jalr	a2
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:120
                                     plic->metal_exdata_table[idx].exint_data);
    }

    __metal_plic0_complete_interrupt(plic, contextid, idx);
    80004748:	fe042703          	lw	a4,-32(s0)
    8000474c:	fe442783          	lw	a5,-28(s0)
    80004750:	863a                	mv	a2,a4
    80004752:	85be                	mv	a1,a5
    80004754:	fe843503          	ld	a0,-24(s0)
    80004758:	cdbff0ef          	jal	ra,80004432 <__metal_plic0_complete_interrupt>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:121
}
    8000475c:	0001                	nop
    8000475e:	70e2                	ld	ra,56(sp)
    80004760:	7442                	ld	s0,48(sp)
    80004762:	6121                	addi	sp,sp,64
    80004764:	8082                	ret

0000000080004766 <__metal_driver_riscv_plic0_init>:
__metal_driver_riscv_plic0_init():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:123

void __metal_driver_riscv_plic0_init(struct metal_interrupt *controller) {
    80004766:	715d                	addi	sp,sp,-80
    80004768:	e486                	sd	ra,72(sp)
    8000476a:	e0a2                	sd	s0,64(sp)
    8000476c:	0880                	addi	s0,sp,80
    8000476e:	faa43c23          	sd	a0,-72(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:124
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
    80004772:	fb843783          	ld	a5,-72(s0)
    80004776:	fef43023          	sd	a5,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:126

    if (!plic->init_done) {
    8000477a:	fe043783          	ld	a5,-32(s0)
    8000477e:	479c                	lw	a5,8(a5)
    80004780:	14079b63          	bnez	a5,800048d6 <__metal_driver_riscv_plic0_init+0x170>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:130
        int num_interrupts, line;
        struct metal_interrupt *intc;

        for (int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
    80004784:	fe042623          	sw	zero,-20(s0)
    80004788:	aa25                	j	800048c0 <__metal_driver_riscv_plic0_init+0x15a>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:132
            num_interrupts =
                __metal_driver_sifive_plic0_num_interrupts(controller);
    8000478a:	fb843503          	ld	a0,-72(s0)
    8000478e:	b73ff0ef          	jal	ra,80004300 <__metal_driver_sifive_plic0_num_interrupts>
    80004792:	87aa                	mv	a5,a0
    80004794:	fcf42e23          	sw	a5,-36(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:133
            intc = __metal_driver_sifive_plic0_interrupt_parents(controller,
    80004798:	fec42783          	lw	a5,-20(s0)
    8000479c:	85be                	mv	a1,a5
    8000479e:	fb843503          	ld	a0,-72(s0)
    800047a2:	bb1ff0ef          	jal	ra,80004352 <__metal_driver_sifive_plic0_interrupt_parents>
    800047a6:	fca43823          	sd	a0,-48(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:136
                                                                 parent);
            line =
                __metal_driver_sifive_plic0_interrupt_lines(controller, parent);
    800047aa:	fec42783          	lw	a5,-20(s0)
    800047ae:	85be                	mv	a1,a5
    800047b0:	fb843503          	ld	a0,-72(s0)
    800047b4:	be3ff0ef          	jal	ra,80004396 <__metal_driver_sifive_plic0_interrupt_lines>
    800047b8:	87aa                	mv	a5,a0
    800047ba:	fcf42623          	sw	a5,-52(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:139

            /* Initialize ist parent controller, aka cpu_intc. */
            intc->vtable->interrupt_init(intc);
    800047be:	fd043783          	ld	a5,-48(s0)
    800047c2:	639c                	ld	a5,0(a5)
    800047c4:	639c                	ld	a5,0(a5)
    800047c6:	fd043503          	ld	a0,-48(s0)
    800047ca:	9782                	jalr	a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:141

            for (int i = 0; i < PLIC0_MAX_INTERRUPTS; i++) {
    800047cc:	fe042423          	sw	zero,-24(s0)
    800047d0:	a8a5                	j	80004848 <__metal_driver_riscv_plic0_init+0xe2>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:142
                __metal_plic0_enable(plic, parent, i, METAL_DISABLE);
    800047d2:	fe842703          	lw	a4,-24(s0)
    800047d6:	fec42783          	lw	a5,-20(s0)
    800047da:	4681                	li	a3,0
    800047dc:	863a                	mv	a2,a4
    800047de:	85be                	mv	a1,a5
    800047e0:	fe043503          	ld	a0,-32(s0)
    800047e4:	ddfff0ef          	jal	ra,800045c2 <__metal_plic0_enable>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:143
                if (i < num_interrupts) {
    800047e8:	fe842703          	lw	a4,-24(s0)
    800047ec:	fdc42783          	lw	a5,-36(s0)
    800047f0:	2701                	sext.w	a4,a4
    800047f2:	2781                	sext.w	a5,a5
    800047f4:	04f75563          	bge	a4,a5,8000483e <__metal_driver_riscv_plic0_init+0xd8>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:144
                    __metal_driver_riscv_plic0_set_priority(controller, i, 0);
    800047f8:	fe842783          	lw	a5,-24(s0)
    800047fc:	4601                	li	a2,0
    800047fe:	85be                	mv	a1,a5
    80004800:	fb843503          	ld	a0,-72(s0)
    80004804:	d0bff0ef          	jal	ra,8000450e <__metal_driver_riscv_plic0_set_priority>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:145
                    plic->metal_exint_table[i] = NULL;
    80004808:	fe043703          	ld	a4,-32(s0)
    8000480c:	fe842783          	lw	a5,-24(s0)
    80004810:	0789                	addi	a5,a5,2
    80004812:	078e                	slli	a5,a5,0x3
    80004814:	97ba                	add	a5,a5,a4
    80004816:	0007b023          	sd	zero,0(a5) # 2000 <__heap_size+0x1800>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:146
                    plic->metal_exdata_table[i].sub_int = NULL;
    8000481a:	fe043703          	ld	a4,-32(s0)
    8000481e:	fe842783          	lw	a5,-24(s0)
    80004822:	07a9                	addi	a5,a5,10
    80004824:	0796                	slli	a5,a5,0x5
    80004826:	97ba                	add	a5,a5,a4
    80004828:	0007b423          	sd	zero,8(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:147
                    plic->metal_exdata_table[i].exint_data = NULL;
    8000482c:	fe043703          	ld	a4,-32(s0)
    80004830:	fe842783          	lw	a5,-24(s0)
    80004834:	07a9                	addi	a5,a5,10
    80004836:	0796                	slli	a5,a5,0x5
    80004838:	97ba                	add	a5,a5,a4
    8000483a:	0007b823          	sd	zero,16(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:141 (discriminator 2)
            for (int i = 0; i < PLIC0_MAX_INTERRUPTS; i++) {
    8000483e:	fe842783          	lw	a5,-24(s0)
    80004842:	2785                	addiw	a5,a5,1
    80004844:	fef42423          	sw	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:141 (discriminator 1)
    80004848:	fe842783          	lw	a5,-24(s0)
    8000484c:	0007871b          	sext.w	a4,a5
    80004850:	3ff00793          	li	a5,1023
    80004854:	f6e7dfe3          	bge	a5,a4,800047d2 <__metal_driver_riscv_plic0_init+0x6c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:151 (discriminator 2)
                }
            }

            __metal_plic0_set_threshold(controller, parent, 0);
    80004858:	fec42783          	lw	a5,-20(s0)
    8000485c:	4601                	li	a2,0
    8000485e:	85be                	mv	a1,a5
    80004860:	fb843503          	ld	a0,-72(s0)
    80004864:	c1dff0ef          	jal	ra,80004480 <__metal_plic0_set_threshold>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:154 (discriminator 2)

            /* Register plic (ext) interrupt with with parent controller */
            intc->vtable->interrupt_register(intc, line, NULL, plic);
    80004868:	fd043783          	ld	a5,-48(s0)
    8000486c:	639c                	ld	a5,0(a5)
    8000486e:	7f98                	ld	a4,56(a5)
    80004870:	fcc42783          	lw	a5,-52(s0)
    80004874:	fe043683          	ld	a3,-32(s0)
    80004878:	4601                	li	a2,0
    8000487a:	85be                	mv	a1,a5
    8000487c:	fd043503          	ld	a0,-48(s0)
    80004880:	9702                	jalr	a4
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:156 (discriminator 2)
            /* Register plic handler for dispatching its device interrupts */
            intc->vtable->interrupt_register(intc, line, __metal_plic0_handler,
    80004882:	fd043783          	ld	a5,-48(s0)
    80004886:	639c                	ld	a5,0(a5)
    80004888:	7f98                	ld	a4,56(a5)
    8000488a:	fcc42783          	lw	a5,-52(s0)
    8000488e:	fe043683          	ld	a3,-32(s0)
    80004892:	00000617          	auipc	a2,0x0
    80004896:	e1a60613          	addi	a2,a2,-486 # 800046ac <__metal_plic0_handler>
    8000489a:	85be                	mv	a1,a5
    8000489c:	fd043503          	ld	a0,-48(s0)
    800048a0:	9702                	jalr	a4
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:159 (discriminator 2)
                                             plic);
            /* Enable plic (ext) interrupt with with parent controller */
            intc->vtable->interrupt_enable(intc, line);
    800048a2:	fd043783          	ld	a5,-48(s0)
    800048a6:	639c                	ld	a5,0(a5)
    800048a8:	67b8                	ld	a4,72(a5)
    800048aa:	fcc42783          	lw	a5,-52(s0)
    800048ae:	85be                	mv	a1,a5
    800048b0:	fd043503          	ld	a0,-48(s0)
    800048b4:	9702                	jalr	a4
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:130 (discriminator 2)
        for (int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
    800048b6:	fec42783          	lw	a5,-20(s0)
    800048ba:	2785                	addiw	a5,a5,1
    800048bc:	fef42623          	sw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:130 (discriminator 1)
    800048c0:	fec42783          	lw	a5,-20(s0)
    800048c4:	0007871b          	sext.w	a4,a5
    800048c8:	4785                	li	a5,1
    800048ca:	ece7d0e3          	bge	a5,a4,8000478a <__metal_driver_riscv_plic0_init+0x24>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:161
        }
        plic->init_done = 1;
    800048ce:	fe043783          	ld	a5,-32(s0)
    800048d2:	4705                	li	a4,1
    800048d4:	c798                	sw	a4,8(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:163
    }
}
    800048d6:	0001                	nop
    800048d8:	60a6                	ld	ra,72(sp)
    800048da:	6406                	ld	s0,64(sp)
    800048dc:	6161                	addi	sp,sp,80
    800048de:	8082                	ret

00000000800048e0 <__metal_driver_riscv_plic0_register>:
__metal_driver_riscv_plic0_register():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:167

int __metal_driver_riscv_plic0_register(struct metal_interrupt *controller,
                                        int id, metal_interrupt_handler_t isr,
                                        void *priv) {
    800048e0:	7139                	addi	sp,sp,-64
    800048e2:	fc06                	sd	ra,56(sp)
    800048e4:	f822                	sd	s0,48(sp)
    800048e6:	0080                	addi	s0,sp,64
    800048e8:	fca43c23          	sd	a0,-40(s0)
    800048ec:	87ae                	mv	a5,a1
    800048ee:	fcc43423          	sd	a2,-56(s0)
    800048f2:	fcd43023          	sd	a3,-64(s0)
    800048f6:	fcf42a23          	sw	a5,-44(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:168
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
    800048fa:	fd843783          	ld	a5,-40(s0)
    800048fe:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:170

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
    80004902:	fd843503          	ld	a0,-40(s0)
    80004906:	9fbff0ef          	jal	ra,80004300 <__metal_driver_sifive_plic0_num_interrupts>
    8000490a:	87aa                	mv	a5,a0
    8000490c:	873e                	mv	a4,a5
    8000490e:	fd442783          	lw	a5,-44(s0)
    80004912:	2781                	sext.w	a5,a5
    80004914:	00e7c463          	blt	a5,a4,8000491c <__metal_driver_riscv_plic0_register+0x3c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:171
        return -1;
    80004918:	57fd                	li	a5,-1
    8000491a:	a041                	j	8000499a <__metal_driver_riscv_plic0_register+0xba>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:174
    }

    if (isr) {
    8000491c:	fc843783          	ld	a5,-56(s0)
    80004920:	cf95                	beqz	a5,8000495c <__metal_driver_riscv_plic0_register+0x7c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:175
        __metal_driver_riscv_plic0_set_priority(controller, id, 2);
    80004922:	fd442783          	lw	a5,-44(s0)
    80004926:	4609                	li	a2,2
    80004928:	85be                	mv	a1,a5
    8000492a:	fd843503          	ld	a0,-40(s0)
    8000492e:	be1ff0ef          	jal	ra,8000450e <__metal_driver_riscv_plic0_set_priority>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:176
        plic->metal_exint_table[id] = isr;
    80004932:	fe843703          	ld	a4,-24(s0)
    80004936:	fd442783          	lw	a5,-44(s0)
    8000493a:	0789                	addi	a5,a5,2
    8000493c:	078e                	slli	a5,a5,0x3
    8000493e:	97ba                	add	a5,a5,a4
    80004940:	fc843703          	ld	a4,-56(s0)
    80004944:	e398                	sd	a4,0(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:177
        plic->metal_exdata_table[id].exint_data = priv;
    80004946:	fe843703          	ld	a4,-24(s0)
    8000494a:	fd442783          	lw	a5,-44(s0)
    8000494e:	07a9                	addi	a5,a5,10
    80004950:	0796                	slli	a5,a5,0x5
    80004952:	97ba                	add	a5,a5,a4
    80004954:	fc043703          	ld	a4,-64(s0)
    80004958:	eb98                	sd	a4,16(a5)
    8000495a:	a83d                	j	80004998 <__metal_driver_riscv_plic0_register+0xb8>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:179
    } else {
        __metal_driver_riscv_plic0_set_priority(controller, id, 1);
    8000495c:	fd442783          	lw	a5,-44(s0)
    80004960:	4605                	li	a2,1
    80004962:	85be                	mv	a1,a5
    80004964:	fd843503          	ld	a0,-40(s0)
    80004968:	ba7ff0ef          	jal	ra,8000450e <__metal_driver_riscv_plic0_set_priority>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:180
        plic->metal_exint_table[id] = __metal_plic0_default_handler;
    8000496c:	fe843703          	ld	a4,-24(s0)
    80004970:	fd442783          	lw	a5,-44(s0)
    80004974:	0789                	addi	a5,a5,2
    80004976:	078e                	slli	a5,a5,0x3
    80004978:	97ba                	add	a5,a5,a4
    8000497a:	00000717          	auipc	a4,0x0
    8000497e:	d1870713          	addi	a4,a4,-744 # 80004692 <__metal_plic0_default_handler>
    80004982:	e398                	sd	a4,0(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:181
        plic->metal_exdata_table[id].sub_int = priv;
    80004984:	fe843703          	ld	a4,-24(s0)
    80004988:	fd442783          	lw	a5,-44(s0)
    8000498c:	07a9                	addi	a5,a5,10
    8000498e:	0796                	slli	a5,a5,0x5
    80004990:	97ba                	add	a5,a5,a4
    80004992:	fc043703          	ld	a4,-64(s0)
    80004996:	e798                	sd	a4,8(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:184
    }

    return 0;
    80004998:	4781                	li	a5,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:185
}
    8000499a:	853e                	mv	a0,a5
    8000499c:	70e2                	ld	ra,56(sp)
    8000499e:	7442                	ld	s0,48(sp)
    800049a0:	6121                	addi	sp,sp,64
    800049a2:	8082                	ret

00000000800049a4 <__metal_driver_riscv_plic0_enable>:
__metal_driver_riscv_plic0_enable():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:188

int __metal_driver_riscv_plic0_enable(struct metal_interrupt *controller,
                                      int id) {
    800049a4:	7179                	addi	sp,sp,-48
    800049a6:	f406                	sd	ra,40(sp)
    800049a8:	f022                	sd	s0,32(sp)
    800049aa:	1800                	addi	s0,sp,48
    800049ac:	fca43c23          	sd	a0,-40(s0)
    800049b0:	87ae                	mv	a5,a1
    800049b2:	fcf42a23          	sw	a5,-44(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:189
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
    800049b6:	fd843783          	ld	a5,-40(s0)
    800049ba:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:191

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
    800049be:	fd843503          	ld	a0,-40(s0)
    800049c2:	93fff0ef          	jal	ra,80004300 <__metal_driver_sifive_plic0_num_interrupts>
    800049c6:	87aa                	mv	a5,a0
    800049c8:	873e                	mv	a4,a5
    800049ca:	fd442783          	lw	a5,-44(s0)
    800049ce:	2781                	sext.w	a5,a5
    800049d0:	00e7c463          	blt	a5,a4,800049d8 <__metal_driver_riscv_plic0_enable+0x34>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:192
        return -1;
    800049d4:	57fd                	li	a5,-1
    800049d6:	a839                	j	800049f4 <__metal_driver_riscv_plic0_enable+0x50>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:195
    }

    __metal_plic0_enable(plic, __metal_myhart_id(), id, METAL_ENABLE);
    800049d8:	ff3fd0ef          	jal	ra,800029ca <__metal_myhart_id>
    800049dc:	87aa                	mv	a5,a0
    800049de:	2781                	sext.w	a5,a5
    800049e0:	fd442703          	lw	a4,-44(s0)
    800049e4:	4685                	li	a3,1
    800049e6:	863a                	mv	a2,a4
    800049e8:	85be                	mv	a1,a5
    800049ea:	fe843503          	ld	a0,-24(s0)
    800049ee:	bd5ff0ef          	jal	ra,800045c2 <__metal_plic0_enable>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:196
    return 0;
    800049f2:	4781                	li	a5,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:197
}
    800049f4:	853e                	mv	a0,a5
    800049f6:	70a2                	ld	ra,40(sp)
    800049f8:	7402                	ld	s0,32(sp)
    800049fa:	6145                	addi	sp,sp,48
    800049fc:	8082                	ret

00000000800049fe <__metal_driver_riscv_plic0_disable>:
__metal_driver_riscv_plic0_disable():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:200

int __metal_driver_riscv_plic0_disable(struct metal_interrupt *controller,
                                       int id) {
    800049fe:	7179                	addi	sp,sp,-48
    80004a00:	f406                	sd	ra,40(sp)
    80004a02:	f022                	sd	s0,32(sp)
    80004a04:	1800                	addi	s0,sp,48
    80004a06:	fca43c23          	sd	a0,-40(s0)
    80004a0a:	87ae                	mv	a5,a1
    80004a0c:	fcf42a23          	sw	a5,-44(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:201
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
    80004a10:	fd843783          	ld	a5,-40(s0)
    80004a14:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:203

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
    80004a18:	fd843503          	ld	a0,-40(s0)
    80004a1c:	8e5ff0ef          	jal	ra,80004300 <__metal_driver_sifive_plic0_num_interrupts>
    80004a20:	87aa                	mv	a5,a0
    80004a22:	873e                	mv	a4,a5
    80004a24:	fd442783          	lw	a5,-44(s0)
    80004a28:	2781                	sext.w	a5,a5
    80004a2a:	00e7c463          	blt	a5,a4,80004a32 <__metal_driver_riscv_plic0_disable+0x34>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:204
        return -1;
    80004a2e:	57fd                	li	a5,-1
    80004a30:	a839                	j	80004a4e <__metal_driver_riscv_plic0_disable+0x50>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:206
    }
    __metal_plic0_enable(plic, __metal_myhart_id(), id, METAL_DISABLE);
    80004a32:	f99fd0ef          	jal	ra,800029ca <__metal_myhart_id>
    80004a36:	87aa                	mv	a5,a0
    80004a38:	2781                	sext.w	a5,a5
    80004a3a:	fd442703          	lw	a4,-44(s0)
    80004a3e:	4681                	li	a3,0
    80004a40:	863a                	mv	a2,a4
    80004a42:	85be                	mv	a1,a5
    80004a44:	fe843503          	ld	a0,-24(s0)
    80004a48:	b7bff0ef          	jal	ra,800045c2 <__metal_plic0_enable>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:207
    return 0;
    80004a4c:	4781                	li	a5,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:208
}
    80004a4e:	853e                	mv	a0,a5
    80004a50:	70a2                	ld	ra,40(sp)
    80004a52:	7402                	ld	s0,32(sp)
    80004a54:	6145                	addi	sp,sp,48
    80004a56:	8082                	ret

0000000080004a58 <__metal_driver_riscv_plic0_set_threshold>:
__metal_driver_riscv_plic0_set_threshold():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:211

int __metal_driver_riscv_plic0_set_threshold(struct metal_interrupt *controller,
                                             unsigned int threshold) {
    80004a58:	1101                	addi	sp,sp,-32
    80004a5a:	ec06                	sd	ra,24(sp)
    80004a5c:	e822                	sd	s0,16(sp)
    80004a5e:	1000                	addi	s0,sp,32
    80004a60:	fea43423          	sd	a0,-24(s0)
    80004a64:	87ae                	mv	a5,a1
    80004a66:	fef42223          	sw	a5,-28(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:212
    return __metal_plic0_set_threshold(controller, __metal_myhart_id(),
    80004a6a:	f61fd0ef          	jal	ra,800029ca <__metal_myhart_id>
    80004a6e:	87aa                	mv	a5,a0
    80004a70:	2781                	sext.w	a5,a5
    80004a72:	fe442703          	lw	a4,-28(s0)
    80004a76:	863a                	mv	a2,a4
    80004a78:	85be                	mv	a1,a5
    80004a7a:	fe843503          	ld	a0,-24(s0)
    80004a7e:	a03ff0ef          	jal	ra,80004480 <__metal_plic0_set_threshold>
    80004a82:	87aa                	mv	a5,a0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:214
                                       threshold);
}
    80004a84:	853e                	mv	a0,a5
    80004a86:	60e2                	ld	ra,24(sp)
    80004a88:	6442                	ld	s0,16(sp)
    80004a8a:	6105                	addi	sp,sp,32
    80004a8c:	8082                	ret

0000000080004a8e <__metal_driver_riscv_plic0_get_threshold>:
__metal_driver_riscv_plic0_get_threshold():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:217

unsigned int
__metal_driver_riscv_plic0_get_threshold(struct metal_interrupt *controller) {
    80004a8e:	1101                	addi	sp,sp,-32
    80004a90:	ec06                	sd	ra,24(sp)
    80004a92:	e822                	sd	s0,16(sp)
    80004a94:	1000                	addi	s0,sp,32
    80004a96:	fea43423          	sd	a0,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:218
    return __metal_plic0_get_threshold(controller, __metal_myhart_id());
    80004a9a:	f31fd0ef          	jal	ra,800029ca <__metal_myhart_id>
    80004a9e:	87aa                	mv	a5,a0
    80004aa0:	2781                	sext.w	a5,a5
    80004aa2:	85be                	mv	a1,a5
    80004aa4:	fe843503          	ld	a0,-24(s0)
    80004aa8:	a27ff0ef          	jal	ra,800044ce <__metal_plic0_get_threshold>
    80004aac:	87aa                	mv	a5,a0
    80004aae:	2781                	sext.w	a5,a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:219
}
    80004ab0:	853e                	mv	a0,a5
    80004ab2:	60e2                	ld	ra,24(sp)
    80004ab4:	6442                	ld	s0,16(sp)
    80004ab6:	6105                	addi	sp,sp,32
    80004ab8:	8082                	ret

0000000080004aba <__metal_driver_riscv_plic0_affinity_enable>:
__metal_driver_riscv_plic0_affinity_enable():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:223

metal_affinity
__metal_driver_riscv_plic0_affinity_enable(struct metal_interrupt *controller,
                                           metal_affinity bitmask, int id) {
    80004aba:	715d                	addi	sp,sp,-80
    80004abc:	e486                	sd	ra,72(sp)
    80004abe:	e0a2                	sd	s0,64(sp)
    80004ac0:	0880                	addi	s0,sp,80
    80004ac2:	fca43423          	sd	a0,-56(s0)
    80004ac6:	fcb43023          	sd	a1,-64(s0)
    80004aca:	87b2                	mv	a5,a2
    80004acc:	faf42e23          	sw	a5,-68(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:224
    metal_affinity ret = {0};
    80004ad0:	fc043c23          	sd	zero,-40(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:227
    int context;

    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
    80004ad4:	fc843783          	ld	a5,-56(s0)
    80004ad8:	fef43023          	sd	a5,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:229

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
    80004adc:	fc843503          	ld	a0,-56(s0)
    80004ae0:	821ff0ef          	jal	ra,80004300 <__metal_driver_sifive_plic0_num_interrupts>
    80004ae4:	87aa                	mv	a5,a0
    80004ae6:	873e                	mv	a4,a5
    80004ae8:	fbc42783          	lw	a5,-68(s0)
    80004aec:	2781                	sext.w	a5,a5
    80004aee:	00e7c863          	blt	a5,a4,80004afe <__metal_driver_riscv_plic0_affinity_enable+0x44>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:230
        metal_affinity_set_val(ret, -1);
    80004af2:	57fd                	li	a5,-1
    80004af4:	fcf43c23          	sd	a5,-40(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:231
        return ret;
    80004af8:	fd843783          	ld	a5,-40(s0)
    80004afc:	a08d                	j	80004b5e <__metal_driver_riscv_plic0_affinity_enable+0xa4>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:234
    }

    for_each_metal_affinity(context, bitmask) {
    80004afe:	fe042623          	sw	zero,-20(s0)
    80004b02:	a889                	j	80004b54 <__metal_driver_riscv_plic0_affinity_enable+0x9a>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:235
        if (context != 0)
    80004b04:	fec42783          	lw	a5,-20(s0)
    80004b08:	2781                	sext.w	a5,a5
    80004b0a:	cb9d                	beqz	a5,80004b40 <__metal_driver_riscv_plic0_affinity_enable+0x86>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:236
            metal_affinity_set_bit(
    80004b0c:	fbc42703          	lw	a4,-68(s0)
    80004b10:	fec42783          	lw	a5,-20(s0)
    80004b14:	4685                	li	a3,1
    80004b16:	863a                	mv	a2,a4
    80004b18:	85be                	mv	a1,a5
    80004b1a:	fe043503          	ld	a0,-32(s0)
    80004b1e:	aa5ff0ef          	jal	ra,800045c2 <__metal_plic0_enable>
    80004b22:	87aa                	mv	a5,a0
    80004b24:	8b85                	andi	a5,a5,1
    80004b26:	0007871b          	sext.w	a4,a5
    80004b2a:	fec42783          	lw	a5,-20(s0)
    80004b2e:	00f717bb          	sllw	a5,a4,a5
    80004b32:	0007871b          	sext.w	a4,a5
    80004b36:	fd843783          	ld	a5,-40(s0)
    80004b3a:	8fd9                	or	a5,a5,a4
    80004b3c:	fcf43c23          	sd	a5,-40(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:234 (discriminator 2)
    for_each_metal_affinity(context, bitmask) {
    80004b40:	fec42783          	lw	a5,-20(s0)
    80004b44:	2785                	addiw	a5,a5,1
    80004b46:	fef42623          	sw	a5,-20(s0)
    80004b4a:	fc043783          	ld	a5,-64(s0)
    80004b4e:	8385                	srli	a5,a5,0x1
    80004b50:	fcf43023          	sd	a5,-64(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:234 (discriminator 1)
    80004b54:	fc043783          	ld	a5,-64(s0)
    80004b58:	f7d5                	bnez	a5,80004b04 <__metal_driver_riscv_plic0_affinity_enable+0x4a>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:241
                ret, context,
                __metal_plic0_enable(plic, context, id, METAL_ENABLE));
    }

    return ret;
    80004b5a:	fd843783          	ld	a5,-40(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:242 (discriminator 1)
}
    80004b5e:	853e                	mv	a0,a5
    80004b60:	60a6                	ld	ra,72(sp)
    80004b62:	6406                	ld	s0,64(sp)
    80004b64:	6161                	addi	sp,sp,80
    80004b66:	8082                	ret

0000000080004b68 <__metal_driver_riscv_plic0_affinity_disable>:
__metal_driver_riscv_plic0_affinity_disable():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:246

metal_affinity
__metal_driver_riscv_plic0_affinity_disable(struct metal_interrupt *controller,
                                            metal_affinity bitmask, int id) {
    80004b68:	715d                	addi	sp,sp,-80
    80004b6a:	e486                	sd	ra,72(sp)
    80004b6c:	e0a2                	sd	s0,64(sp)
    80004b6e:	0880                	addi	s0,sp,80
    80004b70:	fca43423          	sd	a0,-56(s0)
    80004b74:	fcb43023          	sd	a1,-64(s0)
    80004b78:	87b2                	mv	a5,a2
    80004b7a:	faf42e23          	sw	a5,-68(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:247
    metal_affinity ret = {0};
    80004b7e:	fc043c23          	sd	zero,-40(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:250
    int context;

    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
    80004b82:	fc843783          	ld	a5,-56(s0)
    80004b86:	fef43023          	sd	a5,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:252

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
    80004b8a:	fc843503          	ld	a0,-56(s0)
    80004b8e:	f72ff0ef          	jal	ra,80004300 <__metal_driver_sifive_plic0_num_interrupts>
    80004b92:	87aa                	mv	a5,a0
    80004b94:	873e                	mv	a4,a5
    80004b96:	fbc42783          	lw	a5,-68(s0)
    80004b9a:	2781                	sext.w	a5,a5
    80004b9c:	00e7c863          	blt	a5,a4,80004bac <__metal_driver_riscv_plic0_affinity_disable+0x44>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:253
        metal_affinity_set_val(ret, -1);
    80004ba0:	57fd                	li	a5,-1
    80004ba2:	fcf43c23          	sd	a5,-40(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:254
        return ret;
    80004ba6:	fd843783          	ld	a5,-40(s0)
    80004baa:	a08d                	j	80004c0c <__metal_driver_riscv_plic0_affinity_disable+0xa4>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:257
    }

    for_each_metal_affinity(context, bitmask) {
    80004bac:	fe042623          	sw	zero,-20(s0)
    80004bb0:	a889                	j	80004c02 <__metal_driver_riscv_plic0_affinity_disable+0x9a>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:258
        if (context != 0)
    80004bb2:	fec42783          	lw	a5,-20(s0)
    80004bb6:	2781                	sext.w	a5,a5
    80004bb8:	cb9d                	beqz	a5,80004bee <__metal_driver_riscv_plic0_affinity_disable+0x86>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:259
            metal_affinity_set_bit(
    80004bba:	fbc42703          	lw	a4,-68(s0)
    80004bbe:	fec42783          	lw	a5,-20(s0)
    80004bc2:	4681                	li	a3,0
    80004bc4:	863a                	mv	a2,a4
    80004bc6:	85be                	mv	a1,a5
    80004bc8:	fe043503          	ld	a0,-32(s0)
    80004bcc:	9f7ff0ef          	jal	ra,800045c2 <__metal_plic0_enable>
    80004bd0:	87aa                	mv	a5,a0
    80004bd2:	8b85                	andi	a5,a5,1
    80004bd4:	0007871b          	sext.w	a4,a5
    80004bd8:	fec42783          	lw	a5,-20(s0)
    80004bdc:	00f717bb          	sllw	a5,a4,a5
    80004be0:	0007871b          	sext.w	a4,a5
    80004be4:	fd843783          	ld	a5,-40(s0)
    80004be8:	8fd9                	or	a5,a5,a4
    80004bea:	fcf43c23          	sd	a5,-40(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:257 (discriminator 2)
    for_each_metal_affinity(context, bitmask) {
    80004bee:	fec42783          	lw	a5,-20(s0)
    80004bf2:	2785                	addiw	a5,a5,1
    80004bf4:	fef42623          	sw	a5,-20(s0)
    80004bf8:	fc043783          	ld	a5,-64(s0)
    80004bfc:	8385                	srli	a5,a5,0x1
    80004bfe:	fcf43023          	sd	a5,-64(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:257 (discriminator 1)
    80004c02:	fc043783          	ld	a5,-64(s0)
    80004c06:	f7d5                	bnez	a5,80004bb2 <__metal_driver_riscv_plic0_affinity_disable+0x4a>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:264
                ret, context,
                __metal_plic0_enable(plic, context, id, METAL_DISABLE));
    }

    return ret;
    80004c08:	fd843783          	ld	a5,-40(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:265 (discriminator 1)
}
    80004c0c:	853e                	mv	a0,a5
    80004c0e:	60a6                	ld	ra,72(sp)
    80004c10:	6406                	ld	s0,64(sp)
    80004c12:	6161                	addi	sp,sp,80
    80004c14:	8082                	ret

0000000080004c16 <__metal_driver_riscv_plic0_affinity_set_threshold>:
__metal_driver_riscv_plic0_affinity_set_threshold():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:269

metal_affinity __metal_driver_riscv_plic0_affinity_set_threshold(
    struct metal_interrupt *controller, metal_affinity bitmask,
    unsigned int threshold) {
    80004c16:	7139                	addi	sp,sp,-64
    80004c18:	fc06                	sd	ra,56(sp)
    80004c1a:	f822                	sd	s0,48(sp)
    80004c1c:	0080                	addi	s0,sp,64
    80004c1e:	fca43c23          	sd	a0,-40(s0)
    80004c22:	fcb43823          	sd	a1,-48(s0)
    80004c26:	87b2                	mv	a5,a2
    80004c28:	fcf42623          	sw	a5,-52(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:270
    metal_affinity ret = {0};
    80004c2c:	fe043023          	sd	zero,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:273
    int context;

    for_each_metal_affinity(context, bitmask) {
    80004c30:	fe042623          	sw	zero,-20(s0)
    80004c34:	a881                	j	80004c84 <__metal_driver_riscv_plic0_affinity_set_threshold+0x6e>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:274
        if (context != 0)
    80004c36:	fec42783          	lw	a5,-20(s0)
    80004c3a:	2781                	sext.w	a5,a5
    80004c3c:	cb95                	beqz	a5,80004c70 <__metal_driver_riscv_plic0_affinity_set_threshold+0x5a>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:275
            metal_affinity_set_bit(
    80004c3e:	fcc42703          	lw	a4,-52(s0)
    80004c42:	fec42783          	lw	a5,-20(s0)
    80004c46:	863a                	mv	a2,a4
    80004c48:	85be                	mv	a1,a5
    80004c4a:	fd843503          	ld	a0,-40(s0)
    80004c4e:	833ff0ef          	jal	ra,80004480 <__metal_plic0_set_threshold>
    80004c52:	87aa                	mv	a5,a0
    80004c54:	8b85                	andi	a5,a5,1
    80004c56:	0007871b          	sext.w	a4,a5
    80004c5a:	fec42783          	lw	a5,-20(s0)
    80004c5e:	00f717bb          	sllw	a5,a4,a5
    80004c62:	0007871b          	sext.w	a4,a5
    80004c66:	fe043783          	ld	a5,-32(s0)
    80004c6a:	8fd9                	or	a5,a5,a4
    80004c6c:	fef43023          	sd	a5,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:273 (discriminator 2)
    for_each_metal_affinity(context, bitmask) {
    80004c70:	fec42783          	lw	a5,-20(s0)
    80004c74:	2785                	addiw	a5,a5,1
    80004c76:	fef42623          	sw	a5,-20(s0)
    80004c7a:	fd043783          	ld	a5,-48(s0)
    80004c7e:	8385                	srli	a5,a5,0x1
    80004c80:	fcf43823          	sd	a5,-48(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:273 (discriminator 1)
    80004c84:	fd043783          	ld	a5,-48(s0)
    80004c88:	f7dd                	bnez	a5,80004c36 <__metal_driver_riscv_plic0_affinity_set_threshold+0x20>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:280
                ret, context,
                __metal_plic0_set_threshold(controller, context, threshold));
    }

    return ret;
    80004c8a:	fe043783          	ld	a5,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:281
}
    80004c8e:	853e                	mv	a0,a5
    80004c90:	70e2                	ld	ra,56(sp)
    80004c92:	7442                	ld	s0,48(sp)
    80004c94:	6121                	addi	sp,sp,64
    80004c96:	8082                	ret

0000000080004c98 <__metal_driver_riscv_plic0_affinity_get_threshold>:
__metal_driver_riscv_plic0_affinity_get_threshold():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:284

unsigned int __metal_driver_riscv_plic0_affinity_get_threshold(
    struct metal_interrupt *controller, int context_id) {
    80004c98:	1101                	addi	sp,sp,-32
    80004c9a:	ec06                	sd	ra,24(sp)
    80004c9c:	e822                	sd	s0,16(sp)
    80004c9e:	1000                	addi	s0,sp,32
    80004ca0:	fea43423          	sd	a0,-24(s0)
    80004ca4:	87ae                	mv	a5,a1
    80004ca6:	fef42223          	sw	a5,-28(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:285
    __metal_plic0_get_threshold(controller, context_id);
    80004caa:	fe442783          	lw	a5,-28(s0)
    80004cae:	85be                	mv	a1,a5
    80004cb0:	fe843503          	ld	a0,-24(s0)
    80004cb4:	81bff0ef          	jal	ra,800044ce <__metal_plic0_get_threshold>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:286
    return 0;
    80004cb8:	4781                	li	a5,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:287
}
    80004cba:	853e                	mv	a0,a5
    80004cbc:	60e2                	ld	ra,24(sp)
    80004cbe:	6442                	ld	s0,16(sp)
    80004cc0:	6105                	addi	sp,sp,32
    80004cc2:	8082                	ret

0000000080004cc4 <__metal_driver_sifive_i2c0_control_base>:
__metal_driver_sifive_i2c0_control_base():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:508
/* --------------------- sifive_gpio_switch ------------ */


/* --------------------- sifive_i2c0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_i2c0_control_base(struct metal_i2c *i2c)
{
    80004cc4:	1101                	addi	sp,sp,-32
    80004cc6:	ec22                	sd	s0,24(sp)
    80004cc8:	1000                	addi	s0,sp,32
    80004cca:	fea43423          	sd	a0,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:509
	if ((uintptr_t)i2c == (uintptr_t)&__metal_dt_i2c_10015000) {
    80004cce:	fe843703          	ld	a4,-24(s0)
    80004cd2:	00003797          	auipc	a5,0x3
    80004cd6:	81678793          	addi	a5,a5,-2026 # 800074e8 <__metal_dt_i2c_10015000>
    80004cda:	00f71563          	bne	a4,a5,80004ce4 <__metal_driver_sifive_i2c0_control_base+0x20>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:510
		return METAL_SIFIVE_I2C0_10015000_BASE_ADDRESS;
    80004cde:	100157b7          	lui	a5,0x10015
    80004ce2:	a011                	j	80004ce6 <__metal_driver_sifive_i2c0_control_base+0x22>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:513
	}
	else {
		return 0;
    80004ce4:	4781                	li	a5,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:515
	}
}
    80004ce6:	853e                	mv	a0,a5
    80004ce8:	6462                	ld	s0,24(sp)
    80004cea:	6105                	addi	sp,sp,32
    80004cec:	8082                	ret

0000000080004cee <__metal_driver_sifive_i2c0_clock>:
__metal_driver_sifive_i2c0_clock():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:528
		return 0;
	}
}

static __inline__ struct metal_clock * __metal_driver_sifive_i2c0_clock(struct metal_i2c *i2c)
{
    80004cee:	1101                	addi	sp,sp,-32
    80004cf0:	ec22                	sd	s0,24(sp)
    80004cf2:	1000                	addi	s0,sp,32
    80004cf4:	fea43423          	sd	a0,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:529
	if ((uintptr_t)i2c == (uintptr_t)&__metal_dt_i2c_10015000) {
    80004cf8:	fe843703          	ld	a4,-24(s0)
    80004cfc:	00002797          	auipc	a5,0x2
    80004d00:	7ec78793          	addi	a5,a5,2028 # 800074e8 <__metal_dt_i2c_10015000>
    80004d04:	00f71763          	bne	a4,a5,80004d12 <__metal_driver_sifive_i2c0_clock+0x24>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:530
		return (struct metal_clock *)&__metal_dt_subsystem_pbus_clock.clock;
    80004d08:	00002797          	auipc	a5,0x2
    80004d0c:	c4078793          	addi	a5,a5,-960 # 80006948 <__metal_dt_subsystem_pbus_clock>
    80004d10:	a011                	j	80004d14 <__metal_driver_sifive_i2c0_clock+0x26>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:533
	}
	else {
		return NULL;
    80004d12:	4781                	li	a5,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:535
	}
}
    80004d14:	853e                	mv	a0,a5
    80004d16:	6462                	ld	s0,24(sp)
    80004d18:	6105                	addi	sp,sp,32
    80004d1a:	8082                	ret

0000000080004d1c <pre_rate_change_callback>:
pre_rate_change_callback():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:77
    ((clock_rate / (baud_rate * 5)) - 1)
#define METAL_I2C_INIT_OK 1
#define METAL_I2C_RET_OK 0
#define METAL_I2C_RET_ERR -1

static void pre_rate_change_callback(void *priv) {
    80004d1c:	7179                	addi	sp,sp,-48
    80004d1e:	f406                	sd	ra,40(sp)
    80004d20:	f022                	sd	s0,32(sp)
    80004d22:	1800                	addi	s0,sp,48
    80004d24:	fca43c23          	sd	a0,-40(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:79
    unsigned long base =
        __metal_driver_sifive_i2c0_control_base((struct metal_i2c *)priv);
    80004d28:	fd843503          	ld	a0,-40(s0)
    80004d2c:	f99ff0ef          	jal	ra,80004cc4 <__metal_driver_sifive_i2c0_control_base>
    80004d30:	fea43423          	sd	a0,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:81
    /* Check for any pending transfers */
    while (METAL_I2C_REGB(METAL_SIFIVE_I2C0_STATUS) & METAL_I2C_STATUS_TIP)
    80004d34:	0001                	nop
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:81 (discriminator 1)
    80004d36:	fe843783          	ld	a5,-24(s0)
    80004d3a:	07c1                	addi	a5,a5,16
    80004d3c:	0007c783          	lbu	a5,0(a5)
    80004d40:	0ff7f793          	andi	a5,a5,255
    80004d44:	8b89                	andi	a5,a5,2
    80004d46:	fbe5                	bnez	a5,80004d36 <pre_rate_change_callback+0x1a>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:83
        ;
}
    80004d48:	0001                	nop
    80004d4a:	70a2                	ld	ra,40(sp)
    80004d4c:	7402                	ld	s0,32(sp)
    80004d4e:	6145                	addi	sp,sp,48
    80004d50:	8082                	ret

0000000080004d52 <post_rate_change_callback>:
post_rate_change_callback():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:85

static void post_rate_change_callback(void *priv) {
    80004d52:	7179                	addi	sp,sp,-48
    80004d54:	f406                	sd	ra,40(sp)
    80004d56:	f022                	sd	s0,32(sp)
    80004d58:	1800                	addi	s0,sp,48
    80004d5a:	fca43c23          	sd	a0,-40(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:86
    struct __metal_driver_sifive_i2c0 *i2c = priv;
    80004d5e:	fd843783          	ld	a5,-40(s0)
    80004d62:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:88
    /* Set baud rate after clock rate change */
    metal_i2c_set_baud_rate(&i2c->i2c, i2c->baud_rate);
    80004d66:	fe843703          	ld	a4,-24(s0)
    80004d6a:	fe843783          	ld	a5,-24(s0)
    80004d6e:	47dc                	lw	a5,12(a5)
    80004d70:	2781                	sext.w	a5,a5
    80004d72:	85be                	mv	a1,a5
    80004d74:	853a                	mv	a0,a4
    80004d76:	16a010ef          	jal	ra,80005ee0 <metal_i2c_set_baud_rate>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:89
}
    80004d7a:	0001                	nop
    80004d7c:	70a2                	ld	ra,40(sp)
    80004d7e:	7402                	ld	s0,32(sp)
    80004d80:	6145                	addi	sp,sp,48
    80004d82:	8082                	ret

0000000080004d84 <__metal_driver_sifive_i2c0_init>:
__metal_driver_sifive_i2c0_init():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:93

static void __metal_driver_sifive_i2c0_init(struct metal_i2c *gi2c,
                                            unsigned int baud_rate,
                                            metal_i2c_mode_t mode) {
    80004d84:	7179                	addi	sp,sp,-48
    80004d86:	f406                	sd	ra,40(sp)
    80004d88:	f022                	sd	s0,32(sp)
    80004d8a:	1800                	addi	s0,sp,48
    80004d8c:	fca43c23          	sd	a0,-40(s0)
    80004d90:	87ae                	mv	a5,a1
    80004d92:	8732                	mv	a4,a2
    80004d94:	fcf42a23          	sw	a5,-44(s0)
    80004d98:	87ba                	mv	a5,a4
    80004d9a:	fcf42823          	sw	a5,-48(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:96
//    struct __metal_driver_sifive_gpio0 *pinmux =
//        __metal_driver_sifive_i2c0_pinmux(gi2c);
    struct __metal_driver_sifive_i2c0 *i2c = (void *)gi2c;
    80004d9e:	fd843783          	ld	a5,-40(s0)
    80004da2:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:98

    if (gi2c != NULL) {
    80004da6:	fd843783          	ld	a5,-40(s0)
    80004daa:	c78d                	beqz	a5,80004dd4 <__metal_driver_sifive_i2c0_init+0x50>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:109
//        pinmux->gpio.vtable->enable_io((struct metal_gpio *)pinmux,
//                                       pinmux_output_selector,
//                                       pinmux_source_selector);

        /* 1: Master 0: Slave */
        if (mode == METAL_I2C_MASTER) {
    80004dac:	fd042783          	lw	a5,-48(s0)
    80004db0:	0007871b          	sext.w	a4,a5
    80004db4:	4785                	li	a5,1
    80004db6:	00f71f63          	bne	a4,a5,80004dd4 <__metal_driver_sifive_i2c0_init+0x50>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:111
            /* Set requested baud rate */
            if (metal_i2c_set_baud_rate(gi2c, baud_rate) == METAL_I2C_RET_OK) {
    80004dba:	fd442783          	lw	a5,-44(s0)
    80004dbe:	85be                	mv	a1,a5
    80004dc0:	fd843503          	ld	a0,-40(s0)
    80004dc4:	11c010ef          	jal	ra,80005ee0 <metal_i2c_set_baud_rate>
    80004dc8:	87aa                	mv	a5,a0
    80004dca:	e789                	bnez	a5,80004dd4 <__metal_driver_sifive_i2c0_init+0x50>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:112
                i2c->init_done = METAL_I2C_INIT_OK;
    80004dcc:	fe843783          	ld	a5,-24(s0)
    80004dd0:	4705                	li	a4,1
    80004dd2:	c798                	sw	a4,8(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:119
        } 
	else {
            /* Nothing to do. slave mode not supported */
       }
    }
}
    80004dd4:	0001                	nop
    80004dd6:	70a2                	ld	ra,40(sp)
    80004dd8:	7402                	ld	s0,32(sp)
    80004dda:	6145                	addi	sp,sp,48
    80004ddc:	8082                	ret

0000000080004dde <__metal_driver_sifive_i2c0_get_baud_rate>:
__metal_driver_sifive_i2c0_get_baud_rate():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:121

static int __metal_driver_sifive_i2c0_get_baud_rate(struct metal_i2c *gi2c) {
    80004dde:	7179                	addi	sp,sp,-48
    80004de0:	f422                	sd	s0,40(sp)
    80004de2:	1800                	addi	s0,sp,48
    80004de4:	fca43c23          	sd	a0,-40(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:122
    struct __metal_driver_sifive_i2c0 *i2c = (void *)gi2c;
    80004de8:	fd843783          	ld	a5,-40(s0)
    80004dec:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:123
    return i2c->baud_rate;
    80004df0:	fe843783          	ld	a5,-24(s0)
    80004df4:	47dc                	lw	a5,12(a5)
    80004df6:	2781                	sext.w	a5,a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:124
}
    80004df8:	853e                	mv	a0,a5
    80004dfa:	7422                	ld	s0,40(sp)
    80004dfc:	6145                	addi	sp,sp,48
    80004dfe:	8082                	ret

0000000080004e00 <__metal_driver_sifive_i2c0_set_baud_rate>:
__metal_driver_sifive_i2c0_set_baud_rate():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:127

static int __metal_driver_sifive_i2c0_set_baud_rate(struct metal_i2c *gi2c,
                                                    unsigned int baud_rate) {
    80004e00:	715d                	addi	sp,sp,-80
    80004e02:	e486                	sd	ra,72(sp)
    80004e04:	e0a2                	sd	s0,64(sp)
    80004e06:	0880                	addi	s0,sp,80
    80004e08:	faa43c23          	sd	a0,-72(s0)
    80004e0c:	87ae                	mv	a5,a1
    80004e0e:	faf42a23          	sw	a5,-76(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:128
    struct metal_clock *clock = __metal_driver_sifive_i2c0_clock(gi2c);
    80004e12:	fb843503          	ld	a0,-72(s0)
    80004e16:	ed9ff0ef          	jal	ra,80004cee <__metal_driver_sifive_i2c0_clock>
    80004e1a:	fea43023          	sd	a0,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:129
    struct __metal_driver_sifive_i2c0 *i2c = (void *)gi2c;
    80004e1e:	fb843783          	ld	a5,-72(s0)
    80004e22:	fcf43c23          	sd	a5,-40(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:130
    unsigned long base = __metal_driver_sifive_i2c0_control_base(gi2c);
    80004e26:	fb843503          	ld	a0,-72(s0)
    80004e2a:	e9bff0ef          	jal	ra,80004cc4 <__metal_driver_sifive_i2c0_control_base>
    80004e2e:	fca43823          	sd	a0,-48(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:131
    int ret = METAL_I2C_RET_ERR;
    80004e32:	57fd                	li	a5,-1
    80004e34:	fef42623          	sw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:133

    if ((clock != NULL) && (gi2c != NULL)) {
    80004e38:	fe043783          	ld	a5,-32(s0)
    80004e3c:	10078c63          	beqz	a5,80004f54 <__metal_driver_sifive_i2c0_set_baud_rate+0x154>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:133 (discriminator 1)
    80004e40:	fb843783          	ld	a5,-72(s0)
    80004e44:	10078863          	beqz	a5,80004f54 <__metal_driver_sifive_i2c0_set_baud_rate+0x154>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:134
        long clock_rate = clock->vtable->get_rate_hz(clock);
    80004e48:	fe043783          	ld	a5,-32(s0)
    80004e4c:	639c                	ld	a5,0(a5)
    80004e4e:	639c                	ld	a5,0(a5)
    80004e50:	fe043503          	ld	a0,-32(s0)
    80004e54:	9782                	jalr	a5
    80004e56:	fca43423          	sd	a0,-56(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:136

        i2c->pre_rate_change_callback.callback = &pre_rate_change_callback;
    80004e5a:	fd843783          	ld	a5,-40(s0)
    80004e5e:	00000717          	auipc	a4,0x0
    80004e62:	ebe70713          	addi	a4,a4,-322 # 80004d1c <pre_rate_change_callback>
    80004e66:	eb98                	sd	a4,16(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:137
        i2c->pre_rate_change_callback.priv = i2c;
    80004e68:	fd843783          	ld	a5,-40(s0)
    80004e6c:	fd843703          	ld	a4,-40(s0)
    80004e70:	ef98                	sd	a4,24(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:138
        metal_clock_register_pre_rate_change_callback(
    80004e72:	fd843783          	ld	a5,-40(s0)
    80004e76:	07c1                	addi	a5,a5,16
    80004e78:	85be                	mv	a1,a5
    80004e7a:	fe043503          	ld	a0,-32(s0)
    80004e7e:	663000ef          	jal	ra,80005ce0 <metal_clock_register_pre_rate_change_callback>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:141
            clock, &(i2c->pre_rate_change_callback));

        i2c->post_rate_change_callback.callback = &post_rate_change_callback;
    80004e82:	fd843783          	ld	a5,-40(s0)
    80004e86:	00000717          	auipc	a4,0x0
    80004e8a:	ecc70713          	addi	a4,a4,-308 # 80004d52 <post_rate_change_callback>
    80004e8e:	f798                	sd	a4,40(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:142
        i2c->post_rate_change_callback.priv = i2c;
    80004e90:	fd843783          	ld	a5,-40(s0)
    80004e94:	fd843703          	ld	a4,-40(s0)
    80004e98:	fb98                	sd	a4,48(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:143
        metal_clock_register_post_rate_change_callback(
    80004e9a:	fd843783          	ld	a5,-40(s0)
    80004e9e:	02878793          	addi	a5,a5,40
    80004ea2:	85be                	mv	a1,a5
    80004ea4:	fe043503          	ld	a0,-32(s0)
    80004ea8:	66b000ef          	jal	ra,80005d12 <metal_clock_register_post_rate_change_callback>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:147
            clock, &(i2c->post_rate_change_callback));

        /* Calculate prescaler value */
        long prescaler = METAL_SIFIVE_I2C_GET_PRESCALER(baud_rate);
    80004eac:	fb442703          	lw	a4,-76(s0)
    80004eb0:	87ba                	mv	a5,a4
    80004eb2:	0027979b          	slliw	a5,a5,0x2
    80004eb6:	9fb9                	addw	a5,a5,a4
    80004eb8:	2781                	sext.w	a5,a5
    80004eba:	1782                	slli	a5,a5,0x20
    80004ebc:	9381                	srli	a5,a5,0x20
    80004ebe:	fc843703          	ld	a4,-56(s0)
    80004ec2:	02f747b3          	div	a5,a4,a5
    80004ec6:	17fd                	addi	a5,a5,-1
    80004ec8:	fcf43023          	sd	a5,-64(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:149

        if ((prescaler > METAL_I2C_PRESCALE_MAX) || (prescaler < 0)) {
    80004ecc:	fc043703          	ld	a4,-64(s0)
    80004ed0:	67c1                	lui	a5,0x10
    80004ed2:	08f75163          	bge	a4,a5,80004f54 <__metal_driver_sifive_i2c0_set_baud_rate+0x154>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:149 (discriminator 1)
    80004ed6:	fc043783          	ld	a5,-64(s0)
    80004eda:	0607cd63          	bltz	a5,80004f54 <__metal_driver_sifive_i2c0_set_baud_rate+0x154>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:154
            /* Out of range value, return error */
            METAL_I2C_LOG("I2C Set baud failed.\n");
        } else {
            /* Set pre-scaler value */
            METAL_I2C_REGB(METAL_SIFIVE_I2C0_CONTROL) &= ~METAL_I2C_CONTROL_EN;
    80004ede:	fd043783          	ld	a5,-48(s0)
    80004ee2:	07a1                	addi	a5,a5,8
    80004ee4:	0007c783          	lbu	a5,0(a5) # 10000 <__heap_size+0xf800>
    80004ee8:	0ff7f793          	andi	a5,a5,255
    80004eec:	fd043703          	ld	a4,-48(s0)
    80004ef0:	0721                	addi	a4,a4,8
    80004ef2:	07f7f793          	andi	a5,a5,127
    80004ef6:	0ff7f793          	andi	a5,a5,255
    80004efa:	00f70023          	sb	a5,0(a4)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:155
            METAL_I2C_REGB(METAL_SIFIVE_I2C0_PRESCALE_LOW) = prescaler & 0xFF;
    80004efe:	fd043783          	ld	a5,-48(s0)
    80004f02:	fc043703          	ld	a4,-64(s0)
    80004f06:	0ff77713          	andi	a4,a4,255
    80004f0a:	00e78023          	sb	a4,0(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:157
            METAL_I2C_REGB(METAL_SIFIVE_I2C0_PRESCALE_HIGH) =
                (prescaler >> 8) & 0xFF;
    80004f0e:	fc043783          	ld	a5,-64(s0)
    80004f12:	4087d693          	srai	a3,a5,0x8
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:156
            METAL_I2C_REGB(METAL_SIFIVE_I2C0_PRESCALE_HIGH) =
    80004f16:	fd043783          	ld	a5,-48(s0)
    80004f1a:	0791                	addi	a5,a5,4
    80004f1c:	873e                	mv	a4,a5
    80004f1e:	0ff6f793          	andi	a5,a3,255
    80004f22:	00f70023          	sb	a5,0(a4)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:158
            METAL_I2C_REGB(METAL_SIFIVE_I2C0_CONTROL) |= METAL_I2C_CONTROL_EN;
    80004f26:	fd043783          	ld	a5,-48(s0)
    80004f2a:	07a1                	addi	a5,a5,8
    80004f2c:	0007c783          	lbu	a5,0(a5)
    80004f30:	0ff7f793          	andi	a5,a5,255
    80004f34:	fd043703          	ld	a4,-48(s0)
    80004f38:	0721                	addi	a4,a4,8
    80004f3a:	f807e793          	ori	a5,a5,-128
    80004f3e:	0ff7f793          	andi	a5,a5,255
    80004f42:	00f70023          	sb	a5,0(a4)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:160

            i2c->baud_rate = baud_rate;
    80004f46:	fd843783          	ld	a5,-40(s0)
    80004f4a:	fb442703          	lw	a4,-76(s0)
    80004f4e:	c7d8                	sw	a4,12(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:161
            ret = METAL_I2C_RET_OK;
    80004f50:	fe042623          	sw	zero,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:167
        }
    } else {
        METAL_I2C_LOG("I2C Set baud failed.\n");
    }

    return ret;
    80004f54:	fec42783          	lw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:168
}
    80004f58:	853e                	mv	a0,a5
    80004f5a:	60a6                	ld	ra,72(sp)
    80004f5c:	6406                	ld	s0,64(sp)
    80004f5e:	6161                	addi	sp,sp,80
    80004f60:	8082                	ret

0000000080004f62 <__metal_driver_sifive_i2c0_write_addr>:
__metal_driver_sifive_i2c0_write_addr():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:172

static int __metal_driver_sifive_i2c0_write_addr(unsigned long base,
                                                 unsigned int addr,
                                                 unsigned char rw_flag) {
    80004f62:	7179                	addi	sp,sp,-48
    80004f64:	f406                	sd	ra,40(sp)
    80004f66:	f022                	sd	s0,32(sp)
    80004f68:	1800                	addi	s0,sp,48
    80004f6a:	fca43c23          	sd	a0,-40(s0)
    80004f6e:	87ae                	mv	a5,a1
    80004f70:	8732                	mv	a4,a2
    80004f72:	fcf42a23          	sw	a5,-44(s0)
    80004f76:	87ba                	mv	a5,a4
    80004f78:	fcf409a3          	sb	a5,-45(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:174
    time_t timeout;
    int ret = METAL_I2C_RET_OK;
    80004f7c:	fe042623          	sw	zero,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:177
   
    /* Reset timeout */
    METAL_I2C_TIMEOUT_RESET(timeout);
    80004f80:	068010ef          	jal	ra,80005fe8 <metal_time>
    80004f84:	87aa                	mv	a5,a0
    80004f86:	0785                	addi	a5,a5,1
    80004f88:	fef43023          	sd	a5,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:180

    /* Check if any transfer is in progress */
    METAL_I2C_REG_CHECK(
    80004f8c:	a811                	j	80004fa0 <__metal_driver_sifive_i2c0_write_addr+0x3e>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:180 (discriminator 3)
    80004f8e:	05a010ef          	jal	ra,80005fe8 <metal_time>
    80004f92:	872a                	mv	a4,a0
    80004f94:	fe043783          	ld	a5,-32(s0)
    80004f98:	00e7d463          	bge	a5,a4,80004fa0 <__metal_driver_sifive_i2c0_write_addr+0x3e>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:180 (discriminator 1)
    80004f9c:	57fd                	li	a5,-1
    80004f9e:	a845                	j	8000504e <__metal_driver_sifive_i2c0_write_addr+0xec>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:180 (discriminator 2)
    80004fa0:	fd843783          	ld	a5,-40(s0)
    80004fa4:	07c1                	addi	a5,a5,16
    80004fa6:	0007c783          	lbu	a5,0(a5)
    80004faa:	0ff7f793          	andi	a5,a5,255
    80004fae:	8b89                	andi	a5,a5,2
    80004fb0:	fff9                	bnez	a5,80004f8e <__metal_driver_sifive_i2c0_write_addr+0x2c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:187
        timeout);
   //printf("ret1 %d \n", ret);

    /* Set transmit register to given address with read/write flag */
    METAL_I2C_REGB(METAL_SIFIVE_I2C0_TRANSMIT) =
        METAL_SIFIVE_I2C_INSERT_RW_BIT(addr, rw_flag);
    80004fb2:	fd442783          	lw	a5,-44(s0)
    80004fb6:	0ff7f793          	andi	a5,a5,255
    80004fba:	0017979b          	slliw	a5,a5,0x1
    80004fbe:	0ff7f713          	andi	a4,a5,255
    80004fc2:	fd344783          	lbu	a5,-45(s0)
    80004fc6:	8b85                	andi	a5,a5,1
    80004fc8:	0ff7f793          	andi	a5,a5,255
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:186
    METAL_I2C_REGB(METAL_SIFIVE_I2C0_TRANSMIT) =
    80004fcc:	fd843683          	ld	a3,-40(s0)
    80004fd0:	06b1                	addi	a3,a3,12
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:187
        METAL_SIFIVE_I2C_INSERT_RW_BIT(addr, rw_flag);
    80004fd2:	8fd9                	or	a5,a5,a4
    80004fd4:	0ff7f793          	andi	a5,a5,255
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:186
    METAL_I2C_REGB(METAL_SIFIVE_I2C0_TRANSMIT) =
    80004fd8:	00f68023          	sb	a5,0(a3)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:191
   // printf("ret2 %d \n", ret);

    /* Set start flag to trigger the address transfer */
    METAL_I2C_REGB(METAL_SIFIVE_I2C0_COMMAND) =
    80004fdc:	fd843783          	ld	a5,-40(s0)
    80004fe0:	07c1                	addi	a5,a5,16
    80004fe2:	873e                	mv	a4,a5
    80004fe4:	f9000793          	li	a5,-112
    80004fe8:	00f70023          	sb	a5,0(a4)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:196
        METAL_I2C_CMD_WRITE | METAL_I2C_CMD_START;
    
   // printf("ret3 %d \n", ret);
   /* Reset timeout */
    METAL_I2C_TIMEOUT_RESET(timeout);
    80004fec:	7fd000ef          	jal	ra,80005fe8 <metal_time>
    80004ff0:	87aa                	mv	a5,a0
    80004ff2:	0785                	addi	a5,a5,1
    80004ff4:	fef43023          	sd	a5,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:203
   // printf("ret4 %d \n", ret);
   // printf("METAL_I2C_REGB: %u \n", METAL_I2C_REGB(METAL_SIFIVE_I2C0_STATUS));
   // printf("METAL_I2C_STATUS_TIP: %u \n", METAL_I2C_STATUS_TIP);

    /* Check for transmit completion */
    METAL_I2C_REG_CHECK(
    80004ff8:	a811                	j	8000500c <__metal_driver_sifive_i2c0_write_addr+0xaa>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:203 (discriminator 3)
    80004ffa:	7ef000ef          	jal	ra,80005fe8 <metal_time>
    80004ffe:	872a                	mv	a4,a0
    80005000:	fe043783          	ld	a5,-32(s0)
    80005004:	00e7d463          	bge	a5,a4,8000500c <__metal_driver_sifive_i2c0_write_addr+0xaa>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:203 (discriminator 1)
    80005008:	57fd                	li	a5,-1
    8000500a:	a091                	j	8000504e <__metal_driver_sifive_i2c0_write_addr+0xec>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:203 (discriminator 2)
    8000500c:	fd843783          	ld	a5,-40(s0)
    80005010:	07c1                	addi	a5,a5,16
    80005012:	0007c783          	lbu	a5,0(a5)
    80005016:	0ff7f793          	andi	a5,a5,255
    8000501a:	8b89                	andi	a5,a5,2
    8000501c:	fff9                	bnez	a5,80004ffa <__metal_driver_sifive_i2c0_write_addr+0x98>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:210
        timeout);
    
    //printf("ret5 %d \n", ret);

    /* Check for ACK from slave */
    if ((METAL_I2C_REGB(METAL_SIFIVE_I2C0_STATUS) & METAL_I2C_STATUS_RXACK)) {
    8000501e:	fd843783          	ld	a5,-40(s0)
    80005022:	07c1                	addi	a5,a5,16
    80005024:	0007c783          	lbu	a5,0(a5)
    80005028:	0ff7f793          	andi	a5,a5,255
    8000502c:	0187979b          	slliw	a5,a5,0x18
    80005030:	4187d79b          	sraiw	a5,a5,0x18
    80005034:	0007db63          	bgez	a5,8000504a <__metal_driver_sifive_i2c0_write_addr+0xe8>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:213
        /* No ACK, return error */
        METAL_I2C_LOG("I2C RX ACK failed.\n");
	printf("I2C RX ACK failed 1 \n");
    80005038:	ffffb517          	auipc	a0,0xffffb
    8000503c:	7d850513          	addi	a0,a0,2008 # 80000810 <__metal_driver_vtable_riscv_plic0+0xc8>
    80005040:	ecbfb0ef          	jal	ra,80000f0a <puts>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:214
        ret = METAL_I2C_RET_ERR;
    80005044:	57fd                	li	a5,-1
    80005046:	fef42623          	sw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:220
    }

   // printf("I2C RX ACK success 1 \n");
   //printf("ret6: %d \n", ret);
    
    return ret;
    8000504a:	fec42783          	lw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:221
}
    8000504e:	853e                	mv	a0,a5
    80005050:	70a2                	ld	ra,40(sp)
    80005052:	7402                	ld	s0,32(sp)
    80005054:	6145                	addi	sp,sp,48
    80005056:	8082                	ret

0000000080005058 <__metal_driver_sifive_i2c0_write>:
__metal_driver_sifive_i2c0_write():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:226

static int __metal_driver_sifive_i2c0_write(struct metal_i2c *i2c,
                                            unsigned int addr, unsigned int len,
                                            unsigned char buf[],
                                            metal_i2c_stop_bit_t stop_bit) {
    80005058:	715d                	addi	sp,sp,-80
    8000505a:	e486                	sd	ra,72(sp)
    8000505c:	e0a2                	sd	s0,64(sp)
    8000505e:	0880                	addi	s0,sp,80
    80005060:	fca43423          	sd	a0,-56(s0)
    80005064:	87ae                	mv	a5,a1
    80005066:	fad43c23          	sd	a3,-72(s0)
    8000506a:	fcf42223          	sw	a5,-60(s0)
    8000506e:	87b2                	mv	a5,a2
    80005070:	fcf42023          	sw	a5,-64(s0)
    80005074:	87ba                	mv	a5,a4
    80005076:	faf42a23          	sw	a5,-76(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:230
    __metal_io_u8 command;
    time_t timeout;
    int ret;
    unsigned long base = __metal_driver_sifive_i2c0_control_base(i2c);
    8000507a:	fc843503          	ld	a0,-56(s0)
    8000507e:	c47ff0ef          	jal	ra,80004cc4 <__metal_driver_sifive_i2c0_control_base>
    80005082:	fca43c23          	sd	a0,-40(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:233
    unsigned int i;

    if ((i2c != NULL) &&
    80005086:	fc843783          	ld	a5,-56(s0)
    8000508a:	12078463          	beqz	a5,800051b2 <__metal_driver_sifive_i2c0_write+0x15a>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:234 (discriminator 1)
        ((struct __metal_driver_sifive_i2c0 *)i2c)->init_done) {
    8000508e:	fc843783          	ld	a5,-56(s0)
    80005092:	479c                	lw	a5,8(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:233 (discriminator 1)
    if ((i2c != NULL) &&
    80005094:	10078f63          	beqz	a5,800051b2 <__metal_driver_sifive_i2c0_write+0x15a>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:239

        /* Send address over I2C bus, current driver supports only 7bit
         * addressing */
        ret =
            __metal_driver_sifive_i2c0_write_addr(base, addr, METAL_I2C_WRITE);
    80005098:	fc442783          	lw	a5,-60(s0)
    8000509c:	4601                	li	a2,0
    8000509e:	85be                	mv	a1,a5
    800050a0:	fd843503          	ld	a0,-40(s0)
    800050a4:	ebfff0ef          	jal	ra,80004f62 <__metal_driver_sifive_i2c0_write_addr>
    800050a8:	87aa                	mv	a5,a0
    800050aa:	fef42423          	sw	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:241
	
        if (ret != METAL_I2C_RET_OK) {
    800050ae:	fe842783          	lw	a5,-24(s0)
    800050b2:	2781                	sext.w	a5,a5
    800050b4:	cb99                	beqz	a5,800050ca <__metal_driver_sifive_i2c0_write+0x72>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:244
            /* Write address failed */
            METAL_I2C_LOG("I2C Address Write failed.\n");
	    printf("I2C Address Write failed, %d \n", ret);
    800050b6:	fe842783          	lw	a5,-24(s0)
    800050ba:	85be                	mv	a1,a5
    800050bc:	ffffb517          	auipc	a0,0xffffb
    800050c0:	76c50513          	addi	a0,a0,1900 # 80000828 <__metal_driver_vtable_riscv_plic0+0xe0>
    800050c4:	d1dfb0ef          	jal	ra,80000de0 <iprintf>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:241
        if (ret != METAL_I2C_RET_OK) {
    800050c8:	a8c5                	j	800051b8 <__metal_driver_sifive_i2c0_write+0x160>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:247
        } else {
            /* Set command flags */
            command = METAL_I2C_CMD_WRITE;
    800050ca:	47c1                	li	a5,16
    800050cc:	fef407a3          	sb	a5,-17(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:249

            for (i = 0; i < len; i++) {
    800050d0:	fe042223          	sw	zero,-28(s0)
    800050d4:	a0f1                	j	800051a0 <__metal_driver_sifive_i2c0_write+0x148>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:251
                /* Copy into transmit register */
                METAL_I2C_REGB(METAL_SIFIVE_I2C0_TRANSMIT) = buf[i];
    800050d6:	fe446783          	lwu	a5,-28(s0)
    800050da:	fb843703          	ld	a4,-72(s0)
    800050de:	97ba                	add	a5,a5,a4
    800050e0:	fd843703          	ld	a4,-40(s0)
    800050e4:	0731                	addi	a4,a4,12
    800050e6:	0007c783          	lbu	a5,0(a5)
    800050ea:	00f70023          	sb	a5,0(a4)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:255

                /* for last byte transfer, check if stop condition is requested
                 */
                if (i == (len - 1)) {
    800050ee:	fc042783          	lw	a5,-64(s0)
    800050f2:	37fd                	addiw	a5,a5,-1
    800050f4:	0007871b          	sext.w	a4,a5
    800050f8:	fe442783          	lw	a5,-28(s0)
    800050fc:	2781                	sext.w	a5,a5
    800050fe:	02e79363          	bne	a5,a4,80005124 <__metal_driver_sifive_i2c0_write+0xcc>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:256
                    command |= METAL_SIFIVE_I2C_INSERT_STOP(stop_bit);
    80005102:	fb442783          	lw	a5,-76(s0)
    80005106:	0ff7f793          	andi	a5,a5,255
    8000510a:	0067979b          	slliw	a5,a5,0x6
    8000510e:	0ff7f793          	andi	a5,a5,255
    80005112:	0407f793          	andi	a5,a5,64
    80005116:	0ff7f713          	andi	a4,a5,255
    8000511a:	fef44783          	lbu	a5,-17(s0)
    8000511e:	8fd9                	or	a5,a5,a4
    80005120:	fef407a3          	sb	a5,-17(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:259
                }
                /* Write command register */
                METAL_I2C_REGB(METAL_SIFIVE_I2C0_COMMAND) = command;
    80005124:	fd843783          	ld	a5,-40(s0)
    80005128:	07c1                	addi	a5,a5,16
    8000512a:	873e                	mv	a4,a5
    8000512c:	fef44783          	lbu	a5,-17(s0)
    80005130:	00f70023          	sb	a5,0(a4)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:261
                /* Reset timeout */
                METAL_I2C_TIMEOUT_RESET(timeout);
    80005134:	6b5000ef          	jal	ra,80005fe8 <metal_time>
    80005138:	87aa                	mv	a5,a0
    8000513a:	0785                	addi	a5,a5,1
    8000513c:	fcf43823          	sd	a5,-48(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:264

                /* Check for transfer completion */
                METAL_I2C_REG_CHECK((METAL_I2C_REGB(METAL_SIFIVE_I2C0_STATUS) &
    80005140:	a811                	j	80005154 <__metal_driver_sifive_i2c0_write+0xfc>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:264 (discriminator 3)
    80005142:	6a7000ef          	jal	ra,80005fe8 <metal_time>
    80005146:	872a                	mv	a4,a0
    80005148:	fd043783          	ld	a5,-48(s0)
    8000514c:	00e7d463          	bge	a5,a4,80005154 <__metal_driver_sifive_i2c0_write+0xfc>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:264 (discriminator 1)
    80005150:	57fd                	li	a5,-1
    80005152:	a0ad                	j	800051bc <__metal_driver_sifive_i2c0_write+0x164>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:264 (discriminator 2)
    80005154:	fd843783          	ld	a5,-40(s0)
    80005158:	07c1                	addi	a5,a5,16
    8000515a:	0007c783          	lbu	a5,0(a5)
    8000515e:	0ff7f793          	andi	a5,a5,255
    80005162:	8b89                	andi	a5,a5,2
    80005164:	fff9                	bnez	a5,80005142 <__metal_driver_sifive_i2c0_write+0xea>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:269
                                     METAL_I2C_STATUS_TIP),
                                    timeout);

                /* Check for ACK from slave */
                if ((METAL_I2C_REGB(METAL_SIFIVE_I2C0_STATUS) &
    80005166:	fd843783          	ld	a5,-40(s0)
    8000516a:	07c1                	addi	a5,a5,16
    8000516c:	0007c783          	lbu	a5,0(a5)
    80005170:	0ff7f793          	andi	a5,a5,255
    80005174:	0187979b          	slliw	a5,a5,0x18
    80005178:	4187d79b          	sraiw	a5,a5,0x18
    8000517c:	0007dd63          	bgez	a5,80005196 <__metal_driver_sifive_i2c0_write+0x13e>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:273
                     METAL_I2C_STATUS_RXACK)) {
                    /* No ACK, return error */
                    METAL_I2C_LOG("I2C RX ACK failed.\n");
		    printf("I2C RX ACK failed 2 \n");
    80005180:	ffffb517          	auipc	a0,0xffffb
    80005184:	6c850513          	addi	a0,a0,1736 # 80000848 <__metal_driver_vtable_riscv_plic0+0x100>
    80005188:	d83fb0ef          	jal	ra,80000f0a <puts>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:274
                    ret = METAL_I2C_RET_ERR;
    8000518c:	57fd                	li	a5,-1
    8000518e:	fef42423          	sw	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:275
                    break;
    80005192:	0001                	nop
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:241
        if (ret != METAL_I2C_RET_OK) {
    80005194:	a015                	j	800051b8 <__metal_driver_sifive_i2c0_write+0x160>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:249 (discriminator 2)
            for (i = 0; i < len; i++) {
    80005196:	fe442783          	lw	a5,-28(s0)
    8000519a:	2785                	addiw	a5,a5,1
    8000519c:	fef42223          	sw	a5,-28(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:249 (discriminator 1)
    800051a0:	fe442703          	lw	a4,-28(s0)
    800051a4:	fc042783          	lw	a5,-64(s0)
    800051a8:	2701                	sext.w	a4,a4
    800051aa:	2781                	sext.w	a5,a5
    800051ac:	f2f765e3          	bltu	a4,a5,800050d6 <__metal_driver_sifive_i2c0_write+0x7e>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:241
        if (ret != METAL_I2C_RET_OK) {
    800051b0:	a021                	j	800051b8 <__metal_driver_sifive_i2c0_write+0x160>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:283
        }

    } else {
        /* I2C device not initialized, return error */
        METAL_I2C_LOG("I2C device not initialized.\n");
        ret = METAL_I2C_RET_ERR;
    800051b2:	57fd                	li	a5,-1
    800051b4:	fef42423          	sw	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:286
    }

    return ret;
    800051b8:	fe842783          	lw	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:287
}
    800051bc:	853e                	mv	a0,a5
    800051be:	60a6                	ld	ra,72(sp)
    800051c0:	6406                	ld	s0,64(sp)
    800051c2:	6161                	addi	sp,sp,80
    800051c4:	8082                	ret

00000000800051c6 <__metal_driver_sifive_i2c0_read>:
__metal_driver_sifive_i2c0_read():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:291
static int __metal_driver_sifive_i2c0_read(struct metal_i2c *i2c,
                                           unsigned int addr, unsigned int len,
                                           unsigned char buf[],
                                           metal_i2c_stop_bit_t stop_bit) {
    800051c6:	715d                	addi	sp,sp,-80
    800051c8:	e486                	sd	ra,72(sp)
    800051ca:	e0a2                	sd	s0,64(sp)
    800051cc:	0880                	addi	s0,sp,80
    800051ce:	fca43423          	sd	a0,-56(s0)
    800051d2:	87ae                	mv	a5,a1
    800051d4:	fad43c23          	sd	a3,-72(s0)
    800051d8:	fcf42223          	sw	a5,-60(s0)
    800051dc:	87b2                	mv	a5,a2
    800051de:	fcf42023          	sw	a5,-64(s0)
    800051e2:	87ba                	mv	a5,a4
    800051e4:	faf42a23          	sw	a5,-76(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:296
    int ret;
    __metal_io_u8 command;
    time_t timeout;
    unsigned int i;
    unsigned long base = __metal_driver_sifive_i2c0_control_base(i2c);
    800051e8:	fc843503          	ld	a0,-56(s0)
    800051ec:	ad9ff0ef          	jal	ra,80004cc4 <__metal_driver_sifive_i2c0_control_base>
    800051f0:	fca43c23          	sd	a0,-40(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:298

    if ((i2c != NULL) &&
    800051f4:	fc843783          	ld	a5,-56(s0)
    800051f8:	10078163          	beqz	a5,800052fa <__metal_driver_sifive_i2c0_read+0x134>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:299 (discriminator 1)
        ((struct __metal_driver_sifive_i2c0 *)i2c)->init_done) {
    800051fc:	fc843783          	ld	a5,-56(s0)
    80005200:	479c                	lw	a5,8(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:298 (discriminator 1)
    if ((i2c != NULL) &&
    80005202:	0e078c63          	beqz	a5,800052fa <__metal_driver_sifive_i2c0_read+0x134>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:303

        /* Send address over I2C bus, current driver supports only 7bit
         * addressing */
        ret = __metal_driver_sifive_i2c0_write_addr(base, addr, METAL_I2C_READ);
    80005206:	fc442783          	lw	a5,-60(s0)
    8000520a:	4605                	li	a2,1
    8000520c:	85be                	mv	a1,a5
    8000520e:	fd843503          	ld	a0,-40(s0)
    80005212:	d51ff0ef          	jal	ra,80004f62 <__metal_driver_sifive_i2c0_write_addr>
    80005216:	87aa                	mv	a5,a0
    80005218:	fef42623          	sw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:305

        if (ret != METAL_I2C_RET_OK) {
    8000521c:	fec42783          	lw	a5,-20(s0)
    80005220:	2781                	sext.w	a5,a5
    80005222:	cb81                	beqz	a5,80005232 <__metal_driver_sifive_i2c0_read+0x6c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:308
            /* Write address failed */
            METAL_I2C_LOG("I2C Read failed.\n");
	    printf("I2C Read failed \n");
    80005224:	ffffb517          	auipc	a0,0xffffb
    80005228:	63c50513          	addi	a0,a0,1596 # 80000860 <__metal_driver_vtable_riscv_plic0+0x118>
    8000522c:	cdffb0ef          	jal	ra,80000f0a <puts>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:305
        if (ret != METAL_I2C_RET_OK) {
    80005230:	a8f1                	j	8000530c <__metal_driver_sifive_i2c0_read+0x146>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:311
        } else {
            /* Set command flags */
            command = METAL_I2C_CMD_READ;
    80005232:	02000793          	li	a5,32
    80005236:	fef405a3          	sb	a5,-21(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:313

            for (i = 0; i < len; i++) {
    8000523a:	fe042223          	sw	zero,-28(s0)
    8000523e:	a06d                	j	800052e8 <__metal_driver_sifive_i2c0_read+0x122>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:315
                /* check for last transfer */
                if (i == (len - 1)) {
    80005240:	fc042783          	lw	a5,-64(s0)
    80005244:	37fd                	addiw	a5,a5,-1
    80005246:	0007871b          	sext.w	a4,a5
    8000524a:	fe442783          	lw	a5,-28(s0)
    8000524e:	2781                	sext.w	a5,a5
    80005250:	02e79763          	bne	a5,a4,8000527e <__metal_driver_sifive_i2c0_read+0xb8>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:319
                    /* Set NACK to end read, if requested generate STOP
                     * condition */
                    command |= (METAL_I2C_CMD_ACK |
                                METAL_SIFIVE_I2C_INSERT_STOP(stop_bit));
    80005254:	fb442783          	lw	a5,-76(s0)
    80005258:	0ff7f793          	andi	a5,a5,255
    8000525c:	0067979b          	slliw	a5,a5,0x6
    80005260:	0ff7f793          	andi	a5,a5,255
    80005264:	0407f793          	andi	a5,a5,64
    80005268:	0ff7f713          	andi	a4,a5,255
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:318
                    command |= (METAL_I2C_CMD_ACK |
    8000526c:	feb44783          	lbu	a5,-21(s0)
    80005270:	8fd9                	or	a5,a5,a4
    80005272:	0ff7f793          	andi	a5,a5,255
    80005276:	0087e793          	ori	a5,a5,8
    8000527a:	fef405a3          	sb	a5,-21(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:322
                }
                /* Write command register */
                METAL_I2C_REGB(METAL_SIFIVE_I2C0_COMMAND) = command;
    8000527e:	fd843783          	ld	a5,-40(s0)
    80005282:	07c1                	addi	a5,a5,16
    80005284:	873e                	mv	a4,a5
    80005286:	feb44783          	lbu	a5,-21(s0)
    8000528a:	00f70023          	sb	a5,0(a4)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:324
                /* Reset timeout */
                METAL_I2C_TIMEOUT_RESET(timeout);
    8000528e:	55b000ef          	jal	ra,80005fe8 <metal_time>
    80005292:	87aa                	mv	a5,a0
    80005294:	0785                	addi	a5,a5,1
    80005296:	fcf43823          	sd	a5,-48(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:327

                /* Wait for the read to complete */
                METAL_I2C_REG_CHECK((METAL_I2C_REGB(METAL_SIFIVE_I2C0_STATUS) &
    8000529a:	a811                	j	800052ae <__metal_driver_sifive_i2c0_read+0xe8>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:327 (discriminator 3)
    8000529c:	54d000ef          	jal	ra,80005fe8 <metal_time>
    800052a0:	872a                	mv	a4,a0
    800052a2:	fd043783          	ld	a5,-48(s0)
    800052a6:	00e7d463          	bge	a5,a4,800052ae <__metal_driver_sifive_i2c0_read+0xe8>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:327 (discriminator 1)
    800052aa:	57fd                	li	a5,-1
    800052ac:	a095                	j	80005310 <__metal_driver_sifive_i2c0_read+0x14a>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:327 (discriminator 2)
    800052ae:	fd843783          	ld	a5,-40(s0)
    800052b2:	07c1                	addi	a5,a5,16
    800052b4:	0007c783          	lbu	a5,0(a5)
    800052b8:	0ff7f793          	andi	a5,a5,255
    800052bc:	8b89                	andi	a5,a5,2
    800052be:	fff9                	bnez	a5,8000529c <__metal_driver_sifive_i2c0_read+0xd6>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:331 (discriminator 2)
                                     METAL_I2C_STATUS_TIP),
                                    timeout);
                /* Store the received byte */
                buf[i] = METAL_I2C_REGB(METAL_SIFIVE_I2C0_TRANSMIT);
    800052c0:	fd843783          	ld	a5,-40(s0)
    800052c4:	07b1                	addi	a5,a5,12
    800052c6:	86be                	mv	a3,a5
    800052c8:	fe446783          	lwu	a5,-28(s0)
    800052cc:	fb843703          	ld	a4,-72(s0)
    800052d0:	97ba                	add	a5,a5,a4
    800052d2:	0006c703          	lbu	a4,0(a3)
    800052d6:	0ff77713          	andi	a4,a4,255
    800052da:	00e78023          	sb	a4,0(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:313 (discriminator 2)
            for (i = 0; i < len; i++) {
    800052de:	fe442783          	lw	a5,-28(s0)
    800052e2:	2785                	addiw	a5,a5,1
    800052e4:	fef42223          	sw	a5,-28(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:313 (discriminator 1)
    800052e8:	fe442703          	lw	a4,-28(s0)
    800052ec:	fc042783          	lw	a5,-64(s0)
    800052f0:	2701                	sext.w	a4,a4
    800052f2:	2781                	sext.w	a5,a5
    800052f4:	f4f766e3          	bltu	a4,a5,80005240 <__metal_driver_sifive_i2c0_read+0x7a>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:305
        if (ret != METAL_I2C_RET_OK) {
    800052f8:	a811                	j	8000530c <__metal_driver_sifive_i2c0_read+0x146>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:337
            }
        }
    } else {
        /* I2C device not initialized, return error */
        METAL_I2C_LOG("I2C device not initialized.\n");
	printf("I2C device not intialized \n");
    800052fa:	ffffb517          	auipc	a0,0xffffb
    800052fe:	57e50513          	addi	a0,a0,1406 # 80000878 <__metal_driver_vtable_riscv_plic0+0x130>
    80005302:	c09fb0ef          	jal	ra,80000f0a <puts>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:338
        ret = METAL_I2C_RET_ERR;
    80005306:	57fd                	li	a5,-1
    80005308:	fef42623          	sw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:341
    }

    return ret;
    8000530c:	fec42783          	lw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:342
}
    80005310:	853e                	mv	a0,a5
    80005312:	60a6                	ld	ra,72(sp)
    80005314:	6406                	ld	s0,64(sp)
    80005316:	6161                	addi	sp,sp,80
    80005318:	8082                	ret

000000008000531a <__metal_driver_sifive_i2c0_transfer>:
__metal_driver_sifive_i2c0_transfer():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:347

static int
__metal_driver_sifive_i2c0_transfer(struct metal_i2c *i2c, unsigned int addr,
                                    unsigned char txbuf[], unsigned int txlen,
                                    unsigned char rxbuf[], unsigned int rxlen) {
    8000531a:	711d                	addi	sp,sp,-96
    8000531c:	ec86                	sd	ra,88(sp)
    8000531e:	e8a2                	sd	s0,80(sp)
    80005320:	1080                	addi	s0,sp,96
    80005322:	fca43423          	sd	a0,-56(s0)
    80005326:	fac43c23          	sd	a2,-72(s0)
    8000532a:	fae43823          	sd	a4,-80(s0)
    8000532e:	873e                	mv	a4,a5
    80005330:	87ae                	mv	a5,a1
    80005332:	fcf42223          	sw	a5,-60(s0)
    80005336:	87b6                	mv	a5,a3
    80005338:	fcf42023          	sw	a5,-64(s0)
    8000533c:	87ba                	mv	a5,a4
    8000533e:	faf42623          	sw	a5,-84(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:352
    __metal_io_u8 command;
    time_t timeout;
    int ret;
    unsigned int i;
    unsigned long base = __metal_driver_sifive_i2c0_control_base(i2c);
    80005342:	fc843503          	ld	a0,-56(s0)
    80005346:	97fff0ef          	jal	ra,80004cc4 <__metal_driver_sifive_i2c0_control_base>
    8000534a:	fca43c23          	sd	a0,-40(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:354

    if ((i2c != NULL) &&
    8000534e:	fc843783          	ld	a5,-56(s0)
    80005352:	1c078d63          	beqz	a5,8000552c <__metal_driver_sifive_i2c0_transfer+0x212>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:355 (discriminator 1)
        ((struct __metal_driver_sifive_i2c0 *)i2c)->init_done) {
    80005356:	fc843783          	ld	a5,-56(s0)
    8000535a:	479c                	lw	a5,8(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:354 (discriminator 1)
    if ((i2c != NULL) &&
    8000535c:	1c078863          	beqz	a5,8000552c <__metal_driver_sifive_i2c0_transfer+0x212>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:356
        if (txlen) {
    80005360:	fc042783          	lw	a5,-64(s0)
    80005364:	2781                	sext.w	a5,a5
    80005366:	cbe5                	beqz	a5,80005456 <__metal_driver_sifive_i2c0_transfer+0x13c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:358
            /* Set command flags */
            command = METAL_I2C_CMD_WRITE;
    80005368:	47c1                	li	a5,16
    8000536a:	fef407a3          	sb	a5,-17(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:361
            /* Send address over I2C bus, current driver supports only 7bit
             * addressing */
            ret = __metal_driver_sifive_i2c0_write_addr(base, addr,
    8000536e:	fc442783          	lw	a5,-60(s0)
    80005372:	4601                	li	a2,0
    80005374:	85be                	mv	a1,a5
    80005376:	fd843503          	ld	a0,-40(s0)
    8000537a:	be9ff0ef          	jal	ra,80004f62 <__metal_driver_sifive_i2c0_write_addr>
    8000537e:	87aa                	mv	a5,a0
    80005380:	fef42423          	sw	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:364
                                                        METAL_I2C_WRITE);

            if (ret != METAL_I2C_RET_OK) {
    80005384:	fe842783          	lw	a5,-24(s0)
    80005388:	2781                	sext.w	a5,a5
    8000538a:	c781                	beqz	a5,80005392 <__metal_driver_sifive_i2c0_transfer+0x78>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:367
                /* Write address failed */
                METAL_I2C_LOG("I2C Write failed.\n");
                return ret;
    8000538c:	fe842783          	lw	a5,-24(s0)
    80005390:	a25d                	j	80005536 <__metal_driver_sifive_i2c0_transfer+0x21c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:369
            }
            for (i = 0; i < txlen; i++) {
    80005392:	fe042223          	sw	zero,-28(s0)
    80005396:	a845                	j	80005446 <__metal_driver_sifive_i2c0_transfer+0x12c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:371
                /* Copy into transmit register */
                METAL_I2C_REGB(METAL_SIFIVE_I2C0_TRANSMIT) = txbuf[i];
    80005398:	fe446783          	lwu	a5,-28(s0)
    8000539c:	fb843703          	ld	a4,-72(s0)
    800053a0:	97ba                	add	a5,a5,a4
    800053a2:	fd843703          	ld	a4,-40(s0)
    800053a6:	0731                	addi	a4,a4,12
    800053a8:	0007c783          	lbu	a5,0(a5)
    800053ac:	00f70023          	sb	a5,0(a4)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:373

                if (i == (txlen - 1) && (rxlen == 0)) {
    800053b0:	fc042783          	lw	a5,-64(s0)
    800053b4:	37fd                	addiw	a5,a5,-1
    800053b6:	0007871b          	sext.w	a4,a5
    800053ba:	fe442783          	lw	a5,-28(s0)
    800053be:	2781                	sext.w	a5,a5
    800053c0:	00e79c63          	bne	a5,a4,800053d8 <__metal_driver_sifive_i2c0_transfer+0xbe>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:373 (discriminator 1)
    800053c4:	fac42783          	lw	a5,-84(s0)
    800053c8:	2781                	sext.w	a5,a5
    800053ca:	e799                	bnez	a5,800053d8 <__metal_driver_sifive_i2c0_transfer+0xbe>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:375
                    /* Insert stop condition to end transfer */
                    command |= METAL_I2C_CMD_STOP;
    800053cc:	fef44783          	lbu	a5,-17(s0)
    800053d0:	0407e793          	ori	a5,a5,64
    800053d4:	fef407a3          	sb	a5,-17(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:378
                }
                /* Write command register */
                METAL_I2C_REGB(METAL_SIFIVE_I2C0_COMMAND) = command;
    800053d8:	fd843783          	ld	a5,-40(s0)
    800053dc:	07c1                	addi	a5,a5,16
    800053de:	873e                	mv	a4,a5
    800053e0:	fef44783          	lbu	a5,-17(s0)
    800053e4:	00f70023          	sb	a5,0(a4)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:380
                /* Reset timeout */
                METAL_I2C_TIMEOUT_RESET(timeout);
    800053e8:	401000ef          	jal	ra,80005fe8 <metal_time>
    800053ec:	87aa                	mv	a5,a0
    800053ee:	0785                	addi	a5,a5,1
    800053f0:	fcf43823          	sd	a5,-48(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:383

                /* Check for transfer completion. */
                METAL_I2C_REG_CHECK((METAL_I2C_REGB(METAL_SIFIVE_I2C0_STATUS) &
    800053f4:	a811                	j	80005408 <__metal_driver_sifive_i2c0_transfer+0xee>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:383 (discriminator 3)
    800053f6:	3f3000ef          	jal	ra,80005fe8 <metal_time>
    800053fa:	872a                	mv	a4,a0
    800053fc:	fd043783          	ld	a5,-48(s0)
    80005400:	00e7d463          	bge	a5,a4,80005408 <__metal_driver_sifive_i2c0_transfer+0xee>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:383 (discriminator 1)
    80005404:	57fd                	li	a5,-1
    80005406:	aa05                	j	80005536 <__metal_driver_sifive_i2c0_transfer+0x21c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:383 (discriminator 2)
    80005408:	fd843783          	ld	a5,-40(s0)
    8000540c:	07c1                	addi	a5,a5,16
    8000540e:	0007c783          	lbu	a5,0(a5)
    80005412:	0ff7f793          	andi	a5,a5,255
    80005416:	8b89                	andi	a5,a5,2
    80005418:	fff9                	bnez	a5,800053f6 <__metal_driver_sifive_i2c0_transfer+0xdc>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:388
                                     METAL_I2C_STATUS_TIP),
                                    timeout);

                /* Check for ACK from slave. */
                if ((METAL_I2C_REGB(METAL_SIFIVE_I2C0_STATUS) &
    8000541a:	fd843783          	ld	a5,-40(s0)
    8000541e:	07c1                	addi	a5,a5,16
    80005420:	0007c783          	lbu	a5,0(a5)
    80005424:	0ff7f793          	andi	a5,a5,255
    80005428:	0187979b          	slliw	a5,a5,0x18
    8000542c:	4187d79b          	sraiw	a5,a5,0x18
    80005430:	0007d663          	bgez	a5,8000543c <__metal_driver_sifive_i2c0_transfer+0x122>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:392
                     METAL_I2C_STATUS_RXACK)) {
                    /* No ACK, return error */
                    METAL_I2C_LOG("I2C RX ACK failed.\n");
                    ret = METAL_I2C_RET_ERR;
    80005434:	57fd                	li	a5,-1
    80005436:	fef42423          	sw	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:393
                    break;
    8000543a:	a831                	j	80005456 <__metal_driver_sifive_i2c0_transfer+0x13c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:369 (discriminator 2)
            for (i = 0; i < txlen; i++) {
    8000543c:	fe442783          	lw	a5,-28(s0)
    80005440:	2785                	addiw	a5,a5,1
    80005442:	fef42223          	sw	a5,-28(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:369 (discriminator 1)
    80005446:	fe442703          	lw	a4,-28(s0)
    8000544a:	fc042783          	lw	a5,-64(s0)
    8000544e:	2701                	sext.w	a4,a4
    80005450:	2781                	sext.w	a5,a5
    80005452:	f4f763e3          	bltu	a4,a5,80005398 <__metal_driver_sifive_i2c0_transfer+0x7e>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:397
                }
            }
        }
        if (rxlen) {
    80005456:	fac42783          	lw	a5,-84(s0)
    8000545a:	2781                	sext.w	a5,a5
    8000545c:	cbf9                	beqz	a5,80005532 <__metal_driver_sifive_i2c0_transfer+0x218>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:398
            command = METAL_I2C_CMD_READ; /* Set command flags */
    8000545e:	02000793          	li	a5,32
    80005462:	fef407a3          	sb	a5,-17(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:401
            /* Send address over I2C bus, current driver supports only 7bit
             * addressing */
            ret = __metal_driver_sifive_i2c0_write_addr(base, addr,
    80005466:	fc442783          	lw	a5,-60(s0)
    8000546a:	4605                	li	a2,1
    8000546c:	85be                	mv	a1,a5
    8000546e:	fd843503          	ld	a0,-40(s0)
    80005472:	af1ff0ef          	jal	ra,80004f62 <__metal_driver_sifive_i2c0_write_addr>
    80005476:	87aa                	mv	a5,a0
    80005478:	fef42423          	sw	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:404
                                                        METAL_I2C_READ);

            if (ret != METAL_I2C_RET_OK) {
    8000547c:	fe842783          	lw	a5,-24(s0)
    80005480:	2781                	sext.w	a5,a5
    80005482:	c781                	beqz	a5,8000548a <__metal_driver_sifive_i2c0_transfer+0x170>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:407
                /* Return error */
                METAL_I2C_LOG("I2C Read failed.\n");
                return ret;
    80005484:	fe842783          	lw	a5,-24(s0)
    80005488:	a07d                	j	80005536 <__metal_driver_sifive_i2c0_transfer+0x21c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:409
            }
            for (i = 0; i < rxlen; i++) {
    8000548a:	fe042223          	sw	zero,-28(s0)
    8000548e:	a071                	j	8000551a <__metal_driver_sifive_i2c0_transfer+0x200>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:411
                /* check for last transfer */
                if (i == (rxlen - 1)) {
    80005490:	fac42783          	lw	a5,-84(s0)
    80005494:	37fd                	addiw	a5,a5,-1
    80005496:	0007871b          	sext.w	a4,a5
    8000549a:	fe442783          	lw	a5,-28(s0)
    8000549e:	2781                	sext.w	a5,a5
    800054a0:	00e79863          	bne	a5,a4,800054b0 <__metal_driver_sifive_i2c0_transfer+0x196>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:413
                    /* Set NACK to end read, generate STOP condition */
                    command |= (METAL_I2C_CMD_ACK | METAL_I2C_CMD_STOP);
    800054a4:	fef44783          	lbu	a5,-17(s0)
    800054a8:	0487e793          	ori	a5,a5,72
    800054ac:	fef407a3          	sb	a5,-17(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:416
                }
                /* Write command register */
                METAL_I2C_REGB(METAL_SIFIVE_I2C0_COMMAND) = command;
    800054b0:	fd843783          	ld	a5,-40(s0)
    800054b4:	07c1                	addi	a5,a5,16
    800054b6:	873e                	mv	a4,a5
    800054b8:	fef44783          	lbu	a5,-17(s0)
    800054bc:	00f70023          	sb	a5,0(a4)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:418
                /* Reset timeout */
                METAL_I2C_TIMEOUT_RESET(timeout);
    800054c0:	329000ef          	jal	ra,80005fe8 <metal_time>
    800054c4:	87aa                	mv	a5,a0
    800054c6:	0785                	addi	a5,a5,1
    800054c8:	fcf43823          	sd	a5,-48(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:421

                /* Wait for the read to complete */
                METAL_I2C_REG_CHECK((METAL_I2C_REGB(METAL_SIFIVE_I2C0_STATUS) &
    800054cc:	a811                	j	800054e0 <__metal_driver_sifive_i2c0_transfer+0x1c6>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:421 (discriminator 3)
    800054ce:	31b000ef          	jal	ra,80005fe8 <metal_time>
    800054d2:	872a                	mv	a4,a0
    800054d4:	fd043783          	ld	a5,-48(s0)
    800054d8:	00e7d463          	bge	a5,a4,800054e0 <__metal_driver_sifive_i2c0_transfer+0x1c6>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:421 (discriminator 1)
    800054dc:	57fd                	li	a5,-1
    800054de:	a8a1                	j	80005536 <__metal_driver_sifive_i2c0_transfer+0x21c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:421 (discriminator 2)
    800054e0:	fd843783          	ld	a5,-40(s0)
    800054e4:	07c1                	addi	a5,a5,16
    800054e6:	0007c783          	lbu	a5,0(a5)
    800054ea:	0ff7f793          	andi	a5,a5,255
    800054ee:	8b89                	andi	a5,a5,2
    800054f0:	fff9                	bnez	a5,800054ce <__metal_driver_sifive_i2c0_transfer+0x1b4>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:425 (discriminator 2)
                                     METAL_I2C_STATUS_TIP),
                                    timeout);
                /* Store the received byte */
                rxbuf[i] = METAL_I2C_REGB(METAL_SIFIVE_I2C0_TRANSMIT);
    800054f2:	fd843783          	ld	a5,-40(s0)
    800054f6:	07b1                	addi	a5,a5,12
    800054f8:	86be                	mv	a3,a5
    800054fa:	fe446783          	lwu	a5,-28(s0)
    800054fe:	fb043703          	ld	a4,-80(s0)
    80005502:	97ba                	add	a5,a5,a4
    80005504:	0006c703          	lbu	a4,0(a3)
    80005508:	0ff77713          	andi	a4,a4,255
    8000550c:	00e78023          	sb	a4,0(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:409 (discriminator 2)
            for (i = 0; i < rxlen; i++) {
    80005510:	fe442783          	lw	a5,-28(s0)
    80005514:	2785                	addiw	a5,a5,1
    80005516:	fef42223          	sw	a5,-28(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:409 (discriminator 1)
    8000551a:	fe442703          	lw	a4,-28(s0)
    8000551e:	fac42783          	lw	a5,-84(s0)
    80005522:	2701                	sext.w	a4,a4
    80005524:	2781                	sext.w	a5,a5
    80005526:	f6f765e3          	bltu	a4,a5,80005490 <__metal_driver_sifive_i2c0_transfer+0x176>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:397
        if (rxlen) {
    8000552a:	a021                	j	80005532 <__metal_driver_sifive_i2c0_transfer+0x218>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:431
            }
        }
    } else {
        /* I2C device not initialized, return error */
        METAL_I2C_LOG("I2C device not initialized.\n");
        ret = METAL_I2C_RET_ERR;
    8000552c:	57fd                	li	a5,-1
    8000552e:	fef42423          	sw	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:434
    }

    return ret;
    80005532:	fe842783          	lw	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_i2c0.c:435
}
    80005536:	853e                	mv	a0,a5
    80005538:	60e6                	ld	ra,88(sp)
    8000553a:	6446                	ld	s0,80(sp)
    8000553c:	6125                	addi	sp,sp,96
    8000553e:	8082                	ret

0000000080005540 <__metal_driver_sifive_uart0_control_base>:
__metal_driver_sifive_uart0_control_base():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:669

/* --------------------- sifive_trace ------------ */

/* --------------------- sifive_uart0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_uart0_control_base(struct metal_uart *uart)
{
    80005540:	1101                	addi	sp,sp,-32
    80005542:	ec22                	sd	s0,24(sp)
    80005544:	1000                	addi	s0,sp,32
    80005546:	fea43423          	sd	a0,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:670
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
    8000554a:	fe843703          	ld	a4,-24(s0)
    8000554e:	00002797          	auipc	a5,0x2
    80005552:	fda78793          	addi	a5,a5,-38 # 80007528 <__metal_dt_serial_10013000>
    80005556:	00f71563          	bne	a4,a5,80005560 <__metal_driver_sifive_uart0_control_base+0x20>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:671
		return METAL_SIFIVE_UART0_10013000_BASE_ADDRESS;
    8000555a:	100137b7          	lui	a5,0x10013
    8000555e:	a011                	j	80005562 <__metal_driver_sifive_uart0_control_base+0x22>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:674
	}
	else {
		return 0;
    80005560:	4781                	li	a5,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:676
	}
}
    80005562:	853e                	mv	a0,a5
    80005564:	6462                	ld	s0,24(sp)
    80005566:	6105                	addi	sp,sp,32
    80005568:	8082                	ret

000000008000556a <__metal_driver_sifive_uart0_interrupt_parent>:
__metal_driver_sifive_uart0_interrupt_parent():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:699
		return 0;
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_uart0_interrupt_parent(struct metal_uart *uart)
{
    8000556a:	1101                	addi	sp,sp,-32
    8000556c:	ec22                	sd	s0,24(sp)
    8000556e:	1000                	addi	s0,sp,32
    80005570:	fea43423          	sd	a0,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:700
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
    80005574:	fe843703          	ld	a4,-24(s0)
    80005578:	00002797          	auipc	a5,0x2
    8000557c:	fb078793          	addi	a5,a5,-80 # 80007528 <__metal_dt_serial_10013000>
    80005580:	00f71763          	bne	a4,a5,8000558e <__metal_driver_sifive_uart0_interrupt_parent+0x24>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:701
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
    80005584:	00002797          	auipc	a5,0x2
    80005588:	98c78793          	addi	a5,a5,-1652 # 80006f10 <__metal_dt_interrupt_controller_c000000>
    8000558c:	a011                	j	80005590 <__metal_driver_sifive_uart0_interrupt_parent+0x26>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:704
	}
	else {
		return 0;
    8000558e:	4781                	li	a5,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:706
	}
}
    80005590:	853e                	mv	a0,a5
    80005592:	6462                	ld	s0,24(sp)
    80005594:	6105                	addi	sp,sp,32
    80005596:	8082                	ret

0000000080005598 <__metal_driver_sifive_uart0_interrupt_line>:
__metal_driver_sifive_uart0_interrupt_line():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:709

static __inline__ int __metal_driver_sifive_uart0_interrupt_line(struct metal_uart *uart)
{
    80005598:	1101                	addi	sp,sp,-32
    8000559a:	ec22                	sd	s0,24(sp)
    8000559c:	1000                	addi	s0,sp,32
    8000559e:	fea43423          	sd	a0,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:710
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
    800055a2:	fe843703          	ld	a4,-24(s0)
    800055a6:	00002797          	auipc	a5,0x2
    800055aa:	f8278793          	addi	a5,a5,-126 # 80007528 <__metal_dt_serial_10013000>
    800055ae:	00f71463          	bne	a4,a5,800055b6 <__metal_driver_sifive_uart0_interrupt_line+0x1e>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:711
		return 2;
    800055b2:	4789                	li	a5,2
    800055b4:	a011                	j	800055b8 <__metal_driver_sifive_uart0_interrupt_line+0x20>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:714
	}
	else {
		return 0;
    800055b6:	4781                	li	a5,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:716
	}
}
    800055b8:	853e                	mv	a0,a5
    800055ba:	6462                	ld	s0,24(sp)
    800055bc:	6105                	addi	sp,sp,32
    800055be:	8082                	ret

00000000800055c0 <__metal_driver_sifive_uart0_clock>:
__metal_driver_sifive_uart0_clock():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:719

static __inline__ struct metal_clock * __metal_driver_sifive_uart0_clock(struct metal_uart *uart)
{
    800055c0:	1101                	addi	sp,sp,-32
    800055c2:	ec22                	sd	s0,24(sp)
    800055c4:	1000                	addi	s0,sp,32
    800055c6:	fea43423          	sd	a0,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:720
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
    800055ca:	fe843703          	ld	a4,-24(s0)
    800055ce:	00002797          	auipc	a5,0x2
    800055d2:	f5a78793          	addi	a5,a5,-166 # 80007528 <__metal_dt_serial_10013000>
    800055d6:	00f71763          	bne	a4,a5,800055e4 <__metal_driver_sifive_uart0_clock+0x24>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:721
		return (struct metal_clock *)&__metal_dt_subsystem_pbus_clock.clock;
    800055da:	00001797          	auipc	a5,0x1
    800055de:	36e78793          	addi	a5,a5,878 # 80006948 <__metal_dt_subsystem_pbus_clock>
    800055e2:	a011                	j	800055e6 <__metal_driver_sifive_uart0_clock+0x26>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:724
	}
	else {
		return 0;
    800055e4:	4781                	li	a5,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:726
	}
}
    800055e6:	853e                	mv	a0,a5
    800055e8:	6462                	ld	s0,24(sp)
    800055ea:	6105                	addi	sp,sp,32
    800055ec:	8082                	ret

00000000800055ee <__metal_driver_sifive_uart0_pinmux>:
__metal_driver_sifive_uart0_pinmux():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:729

static __inline__ struct __metal_driver_sifive_gpio0 * __metal_driver_sifive_uart0_pinmux(struct metal_uart *uart)
{
    800055ee:	1101                	addi	sp,sp,-32
    800055f0:	ec22                	sd	s0,24(sp)
    800055f2:	1000                	addi	s0,sp,32
    800055f4:	fea43423          	sd	a0,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:730
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
    800055f8:	fe843703          	ld	a4,-24(s0)
    800055fc:	00002797          	auipc	a5,0x2
    80005600:	f2c78793          	addi	a5,a5,-212 # 80007528 <__metal_dt_serial_10013000>
    80005604:	00f71463          	bne	a4,a5,8000560c <__metal_driver_sifive_uart0_pinmux+0x1e>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:731
		return NULL;
    80005608:	4781                	li	a5,0
    8000560a:	a011                	j	8000560e <__metal_driver_sifive_uart0_pinmux+0x20>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:734
	}
	else {
		return 0;
    8000560c:	4781                	li	a5,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:736
	}
}
    8000560e:	853e                	mv	a0,a5
    80005610:	6462                	ld	s0,24(sp)
    80005612:	6105                	addi	sp,sp,32
    80005614:	8082                	ret

0000000080005616 <__metal_driver_sifive_uart0_pinmux_output_selector>:
__metal_driver_sifive_uart0_pinmux_output_selector():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:739

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_output_selector(struct metal_uart *uart)
{
    80005616:	1101                	addi	sp,sp,-32
    80005618:	ec22                	sd	s0,24(sp)
    8000561a:	1000                	addi	s0,sp,32
    8000561c:	fea43423          	sd	a0,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:740
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
    80005620:	fe843703          	ld	a4,-24(s0)
    80005624:	00002797          	auipc	a5,0x2
    80005628:	f0478793          	addi	a5,a5,-252 # 80007528 <__metal_dt_serial_10013000>
    8000562c:	00f71463          	bne	a4,a5,80005634 <__metal_driver_sifive_uart0_pinmux_output_selector+0x1e>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:741
		return 0;
    80005630:	4781                	li	a5,0
    80005632:	a011                	j	80005636 <__metal_driver_sifive_uart0_pinmux_output_selector+0x20>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:744
	}
	else {
		return 0;
    80005634:	4781                	li	a5,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:746
	}
}
    80005636:	853e                	mv	a0,a5
    80005638:	6462                	ld	s0,24(sp)
    8000563a:	6105                	addi	sp,sp,32
    8000563c:	8082                	ret

000000008000563e <__metal_driver_sifive_uart0_pinmux_source_selector>:
__metal_driver_sifive_uart0_pinmux_source_selector():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:749

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_source_selector(struct metal_uart *uart)
{
    8000563e:	1101                	addi	sp,sp,-32
    80005640:	ec22                	sd	s0,24(sp)
    80005642:	1000                	addi	s0,sp,32
    80005644:	fea43423          	sd	a0,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:750
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
    80005648:	fe843703          	ld	a4,-24(s0)
    8000564c:	00002797          	auipc	a5,0x2
    80005650:	edc78793          	addi	a5,a5,-292 # 80007528 <__metal_dt_serial_10013000>
    80005654:	00f71463          	bne	a4,a5,8000565c <__metal_driver_sifive_uart0_pinmux_source_selector+0x1e>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:751
		return 0;
    80005658:	4781                	li	a5,0
    8000565a:	a011                	j	8000565e <__metal_driver_sifive_uart0_pinmux_source_selector+0x20>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:754
	}
	else {
		return 0;
    8000565c:	4781                	li	a5,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:756
	}
}
    8000565e:	853e                	mv	a0,a5
    80005660:	6462                	ld	s0,24(sp)
    80005662:	6105                	addi	sp,sp,32
    80005664:	8082                	ret

0000000080005666 <__metal_driver_sifive_uart0_interrupt_controller>:
__metal_driver_sifive_uart0_interrupt_controller():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:37
    (__METAL_ACCESS_ONCE((__metal_io_u8 *)UART_REG(offset)))
#define UART_REGW(offset)                                                      \
    (__METAL_ACCESS_ONCE((__metal_io_u32 *)UART_REG(offset)))

struct metal_interrupt *
__metal_driver_sifive_uart0_interrupt_controller(struct metal_uart *uart) {
    80005666:	1101                	addi	sp,sp,-32
    80005668:	ec06                	sd	ra,24(sp)
    8000566a:	e822                	sd	s0,16(sp)
    8000566c:	1000                	addi	s0,sp,32
    8000566e:	fea43423          	sd	a0,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:38
    return __metal_driver_sifive_uart0_interrupt_parent(uart);
    80005672:	fe843503          	ld	a0,-24(s0)
    80005676:	ef5ff0ef          	jal	ra,8000556a <__metal_driver_sifive_uart0_interrupt_parent>
    8000567a:	87aa                	mv	a5,a0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:39
}
    8000567c:	853e                	mv	a0,a5
    8000567e:	60e2                	ld	ra,24(sp)
    80005680:	6442                	ld	s0,16(sp)
    80005682:	6105                	addi	sp,sp,32
    80005684:	8082                	ret

0000000080005686 <__metal_driver_sifive_uart0_get_interrupt_id>:
__metal_driver_sifive_uart0_get_interrupt_id():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:41

int __metal_driver_sifive_uart0_get_interrupt_id(struct metal_uart *uart) {
    80005686:	1101                	addi	sp,sp,-32
    80005688:	ec06                	sd	ra,24(sp)
    8000568a:	e822                	sd	s0,16(sp)
    8000568c:	1000                	addi	s0,sp,32
    8000568e:	fea43423          	sd	a0,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:42
    return __metal_driver_sifive_uart0_interrupt_line(uart);
    80005692:	fe843503          	ld	a0,-24(s0)
    80005696:	f03ff0ef          	jal	ra,80005598 <__metal_driver_sifive_uart0_interrupt_line>
    8000569a:	87aa                	mv	a5,a0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:43
}
    8000569c:	853e                	mv	a0,a5
    8000569e:	60e2                	ld	ra,24(sp)
    800056a0:	6442                	ld	s0,16(sp)
    800056a2:	6105                	addi	sp,sp,32
    800056a4:	8082                	ret

00000000800056a6 <__metal_driver_sifive_uart0_tx_interrupt_enable>:
__metal_driver_sifive_uart0_tx_interrupt_enable():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:45

int __metal_driver_sifive_uart0_tx_interrupt_enable(struct metal_uart *uart) {
    800056a6:	7179                	addi	sp,sp,-48
    800056a8:	f406                	sd	ra,40(sp)
    800056aa:	f022                	sd	s0,32(sp)
    800056ac:	1800                	addi	s0,sp,48
    800056ae:	fca43c23          	sd	a0,-40(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:46
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
    800056b2:	fd843503          	ld	a0,-40(s0)
    800056b6:	e8bff0ef          	jal	ra,80005540 <__metal_driver_sifive_uart0_control_base>
    800056ba:	87aa                	mv	a5,a0
    800056bc:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:48

    UART_REGW(METAL_SIFIVE_UART0_IE) |= UART_TXWM;
    800056c0:	fe843783          	ld	a5,-24(s0)
    800056c4:	07c1                	addi	a5,a5,16
    800056c6:	439c                	lw	a5,0(a5)
    800056c8:	0007869b          	sext.w	a3,a5
    800056cc:	fe843783          	ld	a5,-24(s0)
    800056d0:	07c1                	addi	a5,a5,16
    800056d2:	873e                	mv	a4,a5
    800056d4:	87b6                	mv	a5,a3
    800056d6:	0017e793          	ori	a5,a5,1
    800056da:	2781                	sext.w	a5,a5
    800056dc:	c31c                	sw	a5,0(a4)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:49
    return 0;
    800056de:	4781                	li	a5,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:50
}
    800056e0:	853e                	mv	a0,a5
    800056e2:	70a2                	ld	ra,40(sp)
    800056e4:	7402                	ld	s0,32(sp)
    800056e6:	6145                	addi	sp,sp,48
    800056e8:	8082                	ret

00000000800056ea <__metal_driver_sifive_uart0_tx_interrupt_disable>:
__metal_driver_sifive_uart0_tx_interrupt_disable():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:52

int __metal_driver_sifive_uart0_tx_interrupt_disable(struct metal_uart *uart) {
    800056ea:	7179                	addi	sp,sp,-48
    800056ec:	f406                	sd	ra,40(sp)
    800056ee:	f022                	sd	s0,32(sp)
    800056f0:	1800                	addi	s0,sp,48
    800056f2:	fca43c23          	sd	a0,-40(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:53
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
    800056f6:	fd843503          	ld	a0,-40(s0)
    800056fa:	e47ff0ef          	jal	ra,80005540 <__metal_driver_sifive_uart0_control_base>
    800056fe:	87aa                	mv	a5,a0
    80005700:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:55

    UART_REGW(METAL_SIFIVE_UART0_IE) &= ~UART_TXWM;
    80005704:	fe843783          	ld	a5,-24(s0)
    80005708:	07c1                	addi	a5,a5,16
    8000570a:	439c                	lw	a5,0(a5)
    8000570c:	0007869b          	sext.w	a3,a5
    80005710:	fe843783          	ld	a5,-24(s0)
    80005714:	07c1                	addi	a5,a5,16
    80005716:	873e                	mv	a4,a5
    80005718:	87b6                	mv	a5,a3
    8000571a:	9bf9                	andi	a5,a5,-2
    8000571c:	2781                	sext.w	a5,a5
    8000571e:	c31c                	sw	a5,0(a4)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:56
    return 0;
    80005720:	4781                	li	a5,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:57
}
    80005722:	853e                	mv	a0,a5
    80005724:	70a2                	ld	ra,40(sp)
    80005726:	7402                	ld	s0,32(sp)
    80005728:	6145                	addi	sp,sp,48
    8000572a:	8082                	ret

000000008000572c <__metal_driver_sifive_uart0_rx_interrupt_enable>:
__metal_driver_sifive_uart0_rx_interrupt_enable():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:59

int __metal_driver_sifive_uart0_rx_interrupt_enable(struct metal_uart *uart) {
    8000572c:	7179                	addi	sp,sp,-48
    8000572e:	f406                	sd	ra,40(sp)
    80005730:	f022                	sd	s0,32(sp)
    80005732:	1800                	addi	s0,sp,48
    80005734:	fca43c23          	sd	a0,-40(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:60
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
    80005738:	fd843503          	ld	a0,-40(s0)
    8000573c:	e05ff0ef          	jal	ra,80005540 <__metal_driver_sifive_uart0_control_base>
    80005740:	87aa                	mv	a5,a0
    80005742:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:62

    UART_REGW(METAL_SIFIVE_UART0_IE) |= UART_RXWM;
    80005746:	fe843783          	ld	a5,-24(s0)
    8000574a:	07c1                	addi	a5,a5,16
    8000574c:	439c                	lw	a5,0(a5)
    8000574e:	0007869b          	sext.w	a3,a5
    80005752:	fe843783          	ld	a5,-24(s0)
    80005756:	07c1                	addi	a5,a5,16
    80005758:	873e                	mv	a4,a5
    8000575a:	87b6                	mv	a5,a3
    8000575c:	0027e793          	ori	a5,a5,2
    80005760:	2781                	sext.w	a5,a5
    80005762:	c31c                	sw	a5,0(a4)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:63
    return 0;
    80005764:	4781                	li	a5,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:64
}
    80005766:	853e                	mv	a0,a5
    80005768:	70a2                	ld	ra,40(sp)
    8000576a:	7402                	ld	s0,32(sp)
    8000576c:	6145                	addi	sp,sp,48
    8000576e:	8082                	ret

0000000080005770 <__metal_driver_sifive_uart0_rx_interrupt_disable>:
__metal_driver_sifive_uart0_rx_interrupt_disable():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:66

int __metal_driver_sifive_uart0_rx_interrupt_disable(struct metal_uart *uart) {
    80005770:	7179                	addi	sp,sp,-48
    80005772:	f406                	sd	ra,40(sp)
    80005774:	f022                	sd	s0,32(sp)
    80005776:	1800                	addi	s0,sp,48
    80005778:	fca43c23          	sd	a0,-40(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:67
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
    8000577c:	fd843503          	ld	a0,-40(s0)
    80005780:	dc1ff0ef          	jal	ra,80005540 <__metal_driver_sifive_uart0_control_base>
    80005784:	87aa                	mv	a5,a0
    80005786:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:69

    UART_REGW(METAL_SIFIVE_UART0_IE) &= ~UART_RXWM;
    8000578a:	fe843783          	ld	a5,-24(s0)
    8000578e:	07c1                	addi	a5,a5,16
    80005790:	439c                	lw	a5,0(a5)
    80005792:	0007869b          	sext.w	a3,a5
    80005796:	fe843783          	ld	a5,-24(s0)
    8000579a:	07c1                	addi	a5,a5,16
    8000579c:	873e                	mv	a4,a5
    8000579e:	87b6                	mv	a5,a3
    800057a0:	9bf5                	andi	a5,a5,-3
    800057a2:	2781                	sext.w	a5,a5
    800057a4:	c31c                	sw	a5,0(a4)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:70
    return 0;
    800057a6:	4781                	li	a5,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:71
}
    800057a8:	853e                	mv	a0,a5
    800057aa:	70a2                	ld	ra,40(sp)
    800057ac:	7402                	ld	s0,32(sp)
    800057ae:	6145                	addi	sp,sp,48
    800057b0:	8082                	ret

00000000800057b2 <__metal_driver_sifive_uart0_txready>:
__metal_driver_sifive_uart0_txready():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:73

int __metal_driver_sifive_uart0_txready(struct metal_uart *uart) {
    800057b2:	7179                	addi	sp,sp,-48
    800057b4:	f406                	sd	ra,40(sp)
    800057b6:	f022                	sd	s0,32(sp)
    800057b8:	1800                	addi	s0,sp,48
    800057ba:	fca43c23          	sd	a0,-40(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:74
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
    800057be:	fd843503          	ld	a0,-40(s0)
    800057c2:	d7fff0ef          	jal	ra,80005540 <__metal_driver_sifive_uart0_control_base>
    800057c6:	87aa                	mv	a5,a0
    800057c8:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:76

    return !!((UART_REGW(METAL_SIFIVE_UART0_TXDATA) & UART_TXFULL));
    800057cc:	fe843783          	ld	a5,-24(s0)
    800057d0:	439c                	lw	a5,0(a5)
    800057d2:	2781                	sext.w	a5,a5
    800057d4:	2781                	sext.w	a5,a5
    800057d6:	01f7d79b          	srliw	a5,a5,0x1f
    800057da:	0ff7f793          	andi	a5,a5,255
    800057de:	2781                	sext.w	a5,a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:77
}
    800057e0:	853e                	mv	a0,a5
    800057e2:	70a2                	ld	ra,40(sp)
    800057e4:	7402                	ld	s0,32(sp)
    800057e6:	6145                	addi	sp,sp,48
    800057e8:	8082                	ret

00000000800057ea <__metal_driver_sifive_uart0_set_tx_watermark>:
__metal_driver_sifive_uart0_set_tx_watermark():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:80

int __metal_driver_sifive_uart0_set_tx_watermark(struct metal_uart *uart,
                                                 size_t level) {
    800057ea:	7179                	addi	sp,sp,-48
    800057ec:	f406                	sd	ra,40(sp)
    800057ee:	f022                	sd	s0,32(sp)
    800057f0:	1800                	addi	s0,sp,48
    800057f2:	fca43c23          	sd	a0,-40(s0)
    800057f6:	fcb43823          	sd	a1,-48(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:81
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
    800057fa:	fd843503          	ld	a0,-40(s0)
    800057fe:	d43ff0ef          	jal	ra,80005540 <__metal_driver_sifive_uart0_control_base>
    80005802:	87aa                	mv	a5,a0
    80005804:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:83

    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXCNT(level);
    80005808:	fe843783          	ld	a5,-24(s0)
    8000580c:	07a1                	addi	a5,a5,8
    8000580e:	439c                	lw	a5,0(a5)
    80005810:	0007869b          	sext.w	a3,a5
    80005814:	fd043783          	ld	a5,-48(s0)
    80005818:	2781                	sext.w	a5,a5
    8000581a:	0107979b          	slliw	a5,a5,0x10
    8000581e:	2781                	sext.w	a5,a5
    80005820:	873e                	mv	a4,a5
    80005822:	000707b7          	lui	a5,0x70
    80005826:	8ff9                	and	a5,a5,a4
    80005828:	0007861b          	sext.w	a2,a5
    8000582c:	fe843783          	ld	a5,-24(s0)
    80005830:	07a1                	addi	a5,a5,8
    80005832:	873e                	mv	a4,a5
    80005834:	87b2                	mv	a5,a2
    80005836:	8fd5                	or	a5,a5,a3
    80005838:	2781                	sext.w	a5,a5
    8000583a:	c31c                	sw	a5,0(a4)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:84
    return 0;
    8000583c:	4781                	li	a5,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:85
}
    8000583e:	853e                	mv	a0,a5
    80005840:	70a2                	ld	ra,40(sp)
    80005842:	7402                	ld	s0,32(sp)
    80005844:	6145                	addi	sp,sp,48
    80005846:	8082                	ret

0000000080005848 <__metal_driver_sifive_uart0_get_tx_watermark>:
__metal_driver_sifive_uart0_get_tx_watermark():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:87

size_t __metal_driver_sifive_uart0_get_tx_watermark(struct metal_uart *uart) {
    80005848:	7179                	addi	sp,sp,-48
    8000584a:	f406                	sd	ra,40(sp)
    8000584c:	f022                	sd	s0,32(sp)
    8000584e:	1800                	addi	s0,sp,48
    80005850:	fca43c23          	sd	a0,-40(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:88
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
    80005854:	fd843503          	ld	a0,-40(s0)
    80005858:	ce9ff0ef          	jal	ra,80005540 <__metal_driver_sifive_uart0_control_base>
    8000585c:	87aa                	mv	a5,a0
    8000585e:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:90

    return ((UART_REGW(METAL_SIFIVE_UART0_TXCTRL) >> 16) & 0x7);
    80005862:	fe843783          	ld	a5,-24(s0)
    80005866:	07a1                	addi	a5,a5,8
    80005868:	439c                	lw	a5,0(a5)
    8000586a:	2781                	sext.w	a5,a5
    8000586c:	0107d79b          	srliw	a5,a5,0x10
    80005870:	2781                	sext.w	a5,a5
    80005872:	1782                	slli	a5,a5,0x20
    80005874:	9381                	srli	a5,a5,0x20
    80005876:	8b9d                	andi	a5,a5,7
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:91
}
    80005878:	853e                	mv	a0,a5
    8000587a:	70a2                	ld	ra,40(sp)
    8000587c:	7402                	ld	s0,32(sp)
    8000587e:	6145                	addi	sp,sp,48
    80005880:	8082                	ret

0000000080005882 <__metal_driver_sifive_uart0_set_rx_watermark>:
__metal_driver_sifive_uart0_set_rx_watermark():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:94

int __metal_driver_sifive_uart0_set_rx_watermark(struct metal_uart *uart,
                                                 size_t level) {
    80005882:	7179                	addi	sp,sp,-48
    80005884:	f406                	sd	ra,40(sp)
    80005886:	f022                	sd	s0,32(sp)
    80005888:	1800                	addi	s0,sp,48
    8000588a:	fca43c23          	sd	a0,-40(s0)
    8000588e:	fcb43823          	sd	a1,-48(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:95
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
    80005892:	fd843503          	ld	a0,-40(s0)
    80005896:	cabff0ef          	jal	ra,80005540 <__metal_driver_sifive_uart0_control_base>
    8000589a:	87aa                	mv	a5,a0
    8000589c:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:97

    UART_REGW(METAL_SIFIVE_UART0_RXCTRL) |= UART_RXCNT(level);
    800058a0:	fe843783          	ld	a5,-24(s0)
    800058a4:	07b1                	addi	a5,a5,12
    800058a6:	439c                	lw	a5,0(a5)
    800058a8:	0007869b          	sext.w	a3,a5
    800058ac:	fd043783          	ld	a5,-48(s0)
    800058b0:	2781                	sext.w	a5,a5
    800058b2:	0107979b          	slliw	a5,a5,0x10
    800058b6:	2781                	sext.w	a5,a5
    800058b8:	873e                	mv	a4,a5
    800058ba:	000707b7          	lui	a5,0x70
    800058be:	8ff9                	and	a5,a5,a4
    800058c0:	0007861b          	sext.w	a2,a5
    800058c4:	fe843783          	ld	a5,-24(s0)
    800058c8:	07b1                	addi	a5,a5,12
    800058ca:	873e                	mv	a4,a5
    800058cc:	87b2                	mv	a5,a2
    800058ce:	8fd5                	or	a5,a5,a3
    800058d0:	2781                	sext.w	a5,a5
    800058d2:	c31c                	sw	a5,0(a4)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:98
    return 0;
    800058d4:	4781                	li	a5,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:99
}
    800058d6:	853e                	mv	a0,a5
    800058d8:	70a2                	ld	ra,40(sp)
    800058da:	7402                	ld	s0,32(sp)
    800058dc:	6145                	addi	sp,sp,48
    800058de:	8082                	ret

00000000800058e0 <__metal_driver_sifive_uart0_get_rx_watermark>:
__metal_driver_sifive_uart0_get_rx_watermark():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:101

size_t __metal_driver_sifive_uart0_get_rx_watermark(struct metal_uart *uart) {
    800058e0:	7179                	addi	sp,sp,-48
    800058e2:	f406                	sd	ra,40(sp)
    800058e4:	f022                	sd	s0,32(sp)
    800058e6:	1800                	addi	s0,sp,48
    800058e8:	fca43c23          	sd	a0,-40(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:102
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
    800058ec:	fd843503          	ld	a0,-40(s0)
    800058f0:	c51ff0ef          	jal	ra,80005540 <__metal_driver_sifive_uart0_control_base>
    800058f4:	87aa                	mv	a5,a0
    800058f6:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:104

    return ((UART_REGW(METAL_SIFIVE_UART0_RXCTRL) >> 16) & 0x7);
    800058fa:	fe843783          	ld	a5,-24(s0)
    800058fe:	07b1                	addi	a5,a5,12
    80005900:	439c                	lw	a5,0(a5)
    80005902:	2781                	sext.w	a5,a5
    80005904:	0107d79b          	srliw	a5,a5,0x10
    80005908:	2781                	sext.w	a5,a5
    8000590a:	1782                	slli	a5,a5,0x20
    8000590c:	9381                	srli	a5,a5,0x20
    8000590e:	8b9d                	andi	a5,a5,7
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:105
}
    80005910:	853e                	mv	a0,a5
    80005912:	70a2                	ld	ra,40(sp)
    80005914:	7402                	ld	s0,32(sp)
    80005916:	6145                	addi	sp,sp,48
    80005918:	8082                	ret

000000008000591a <__metal_driver_sifive_uart0_putc>:
__metal_driver_sifive_uart0_putc():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:107

int __metal_driver_sifive_uart0_putc(struct metal_uart *uart, int c) {
    8000591a:	7179                	addi	sp,sp,-48
    8000591c:	f406                	sd	ra,40(sp)
    8000591e:	f022                	sd	s0,32(sp)
    80005920:	1800                	addi	s0,sp,48
    80005922:	fca43c23          	sd	a0,-40(s0)
    80005926:	87ae                	mv	a5,a1
    80005928:	fcf42a23          	sw	a5,-44(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:108
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
    8000592c:	fd843503          	ld	a0,-40(s0)
    80005930:	c11ff0ef          	jal	ra,80005540 <__metal_driver_sifive_uart0_control_base>
    80005934:	87aa                	mv	a5,a0
    80005936:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:110

    while (__metal_driver_sifive_uart0_txready(uart) != 0) {
    8000593a:	0001                	nop
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:110 (discriminator 1)
    8000593c:	fd843503          	ld	a0,-40(s0)
    80005940:	e73ff0ef          	jal	ra,800057b2 <__metal_driver_sifive_uart0_txready>
    80005944:	87aa                	mv	a5,a0
    80005946:	fbfd                	bnez	a5,8000593c <__metal_driver_sifive_uart0_putc+0x22>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:113
        /* wait */
    }
    UART_REGW(METAL_SIFIVE_UART0_TXDATA) = c;
    80005948:	fe843783          	ld	a5,-24(s0)
    8000594c:	fd442703          	lw	a4,-44(s0)
    80005950:	c398                	sw	a4,0(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:114
    return 0;
    80005952:	4781                	li	a5,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:115
}
    80005954:	853e                	mv	a0,a5
    80005956:	70a2                	ld	ra,40(sp)
    80005958:	7402                	ld	s0,32(sp)
    8000595a:	6145                	addi	sp,sp,48
    8000595c:	8082                	ret

000000008000595e <__metal_driver_sifive_uart0_getc>:
__metal_driver_sifive_uart0_getc():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:117

int __metal_driver_sifive_uart0_getc(struct metal_uart *uart, int *c) {
    8000595e:	7179                	addi	sp,sp,-48
    80005960:	f406                	sd	ra,40(sp)
    80005962:	f022                	sd	s0,32(sp)
    80005964:	1800                	addi	s0,sp,48
    80005966:	fca43c23          	sd	a0,-40(s0)
    8000596a:	fcb43823          	sd	a1,-48(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:119
    uint32_t ch;
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
    8000596e:	fd843503          	ld	a0,-40(s0)
    80005972:	bcfff0ef          	jal	ra,80005540 <__metal_driver_sifive_uart0_control_base>
    80005976:	87aa                	mv	a5,a0
    80005978:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:121
    /* No seperate status register, we get status and the byte at same time */
    ch = UART_REGW(METAL_SIFIVE_UART0_RXDATA);
    8000597c:	fe843783          	ld	a5,-24(s0)
    80005980:	0791                	addi	a5,a5,4
    80005982:	439c                	lw	a5,0(a5)
    80005984:	fef42223          	sw	a5,-28(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:123
    ;
    if (ch & UART_RXEMPTY) {
    80005988:	fe442783          	lw	a5,-28(s0)
    8000598c:	0007d763          	bgez	a5,8000599a <__metal_driver_sifive_uart0_getc+0x3c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:124
        *c = -1; /* aka: EOF in most of the world */
    80005990:	fd043783          	ld	a5,-48(s0)
    80005994:	577d                	li	a4,-1
    80005996:	c398                	sw	a4,0(a5)
    80005998:	a811                	j	800059ac <__metal_driver_sifive_uart0_getc+0x4e>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:126
    } else {
        *c = ch & 0x0ff;
    8000599a:	fe442783          	lw	a5,-28(s0)
    8000599e:	0ff7f793          	andi	a5,a5,255
    800059a2:	0007871b          	sext.w	a4,a5
    800059a6:	fd043783          	ld	a5,-48(s0)
    800059aa:	c398                	sw	a4,0(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:128
    }
    return 0;
    800059ac:	4781                	li	a5,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:129
}
    800059ae:	853e                	mv	a0,a5
    800059b0:	70a2                	ld	ra,40(sp)
    800059b2:	7402                	ld	s0,32(sp)
    800059b4:	6145                	addi	sp,sp,48
    800059b6:	8082                	ret

00000000800059b8 <__metal_driver_sifive_uart0_get_baud_rate>:
__metal_driver_sifive_uart0_get_baud_rate():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:131

int __metal_driver_sifive_uart0_get_baud_rate(struct metal_uart *guart) {
    800059b8:	7179                	addi	sp,sp,-48
    800059ba:	f422                	sd	s0,40(sp)
    800059bc:	1800                	addi	s0,sp,48
    800059be:	fca43c23          	sd	a0,-40(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:132
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
    800059c2:	fd843783          	ld	a5,-40(s0)
    800059c6:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:133
    return uart->baud_rate;
    800059ca:	fe843783          	ld	a5,-24(s0)
    800059ce:	679c                	ld	a5,8(a5)
    800059d0:	2781                	sext.w	a5,a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:134
}
    800059d2:	853e                	mv	a0,a5
    800059d4:	7422                	ld	s0,40(sp)
    800059d6:	6145                	addi	sp,sp,48
    800059d8:	8082                	ret

00000000800059da <__metal_driver_sifive_uart0_set_baud_rate>:
__metal_driver_sifive_uart0_set_baud_rate():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:137

int __metal_driver_sifive_uart0_set_baud_rate(struct metal_uart *guart,
                                              int baud_rate) {
    800059da:	7139                	addi	sp,sp,-64
    800059dc:	fc06                	sd	ra,56(sp)
    800059de:	f822                	sd	s0,48(sp)
    800059e0:	0080                	addi	s0,sp,64
    800059e2:	fca43423          	sd	a0,-56(s0)
    800059e6:	87ae                	mv	a5,a1
    800059e8:	fcf42223          	sw	a5,-60(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:138
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
    800059ec:	fc843783          	ld	a5,-56(s0)
    800059f0:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:139
    long control_base = __metal_driver_sifive_uart0_control_base(guart);
    800059f4:	fc843503          	ld	a0,-56(s0)
    800059f8:	b49ff0ef          	jal	ra,80005540 <__metal_driver_sifive_uart0_control_base>
    800059fc:	87aa                	mv	a5,a0
    800059fe:	fef43023          	sd	a5,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:140
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
    80005a02:	fc843503          	ld	a0,-56(s0)
    80005a06:	bbbff0ef          	jal	ra,800055c0 <__metal_driver_sifive_uart0_clock>
    80005a0a:	fca43c23          	sd	a0,-40(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:142

    uart->baud_rate = baud_rate;
    80005a0e:	fc442703          	lw	a4,-60(s0)
    80005a12:	fe843783          	ld	a5,-24(s0)
    80005a16:	e798                	sd	a4,8(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:144

    if (clock != NULL) {
    80005a18:	fd843783          	ld	a5,-40(s0)
    80005a1c:	c7ad                	beqz	a5,80005a86 <__metal_driver_sifive_uart0_set_baud_rate+0xac>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:145
        long clock_rate = clock->vtable->get_rate_hz(clock);
    80005a1e:	fd843783          	ld	a5,-40(s0)
    80005a22:	639c                	ld	a5,0(a5)
    80005a24:	639c                	ld	a5,0(a5)
    80005a26:	fd843503          	ld	a0,-40(s0)
    80005a2a:	9782                	jalr	a5
    80005a2c:	fca43823          	sd	a0,-48(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:146
        UART_REGW(METAL_SIFIVE_UART0_DIV) = clock_rate / baud_rate - 1;
    80005a30:	fc442783          	lw	a5,-60(s0)
    80005a34:	fd043703          	ld	a4,-48(s0)
    80005a38:	02f747b3          	div	a5,a4,a5
    80005a3c:	2781                	sext.w	a5,a5
    80005a3e:	fe043703          	ld	a4,-32(s0)
    80005a42:	0761                	addi	a4,a4,24
    80005a44:	37fd                	addiw	a5,a5,-1
    80005a46:	2781                	sext.w	a5,a5
    80005a48:	c31c                	sw	a5,0(a4)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:147
        UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXEN;
    80005a4a:	fe043783          	ld	a5,-32(s0)
    80005a4e:	07a1                	addi	a5,a5,8
    80005a50:	439c                	lw	a5,0(a5)
    80005a52:	0007869b          	sext.w	a3,a5
    80005a56:	fe043783          	ld	a5,-32(s0)
    80005a5a:	07a1                	addi	a5,a5,8
    80005a5c:	873e                	mv	a4,a5
    80005a5e:	87b6                	mv	a5,a3
    80005a60:	0017e793          	ori	a5,a5,1
    80005a64:	2781                	sext.w	a5,a5
    80005a66:	c31c                	sw	a5,0(a4)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:148
        UART_REGW(METAL_SIFIVE_UART0_RXCTRL) |= UART_RXEN;
    80005a68:	fe043783          	ld	a5,-32(s0)
    80005a6c:	07b1                	addi	a5,a5,12
    80005a6e:	439c                	lw	a5,0(a5)
    80005a70:	0007869b          	sext.w	a3,a5
    80005a74:	fe043783          	ld	a5,-32(s0)
    80005a78:	07b1                	addi	a5,a5,12
    80005a7a:	873e                	mv	a4,a5
    80005a7c:	87b6                	mv	a5,a3
    80005a7e:	0017e793          	ori	a5,a5,1
    80005a82:	2781                	sext.w	a5,a5
    80005a84:	c31c                	sw	a5,0(a4)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:150
    }
    return 0;
    80005a86:	4781                	li	a5,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:151
}
    80005a88:	853e                	mv	a0,a5
    80005a8a:	70e2                	ld	ra,56(sp)
    80005a8c:	7442                	ld	s0,48(sp)
    80005a8e:	6121                	addi	sp,sp,64
    80005a90:	8082                	ret

0000000080005a92 <pre_rate_change_callback_func>:
pre_rate_change_callback_func():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:153

static void pre_rate_change_callback_func(void *priv) {
    80005a92:	711d                	addi	sp,sp,-96
    80005a94:	ec86                	sd	ra,88(sp)
    80005a96:	e8a2                	sd	s0,80(sp)
    80005a98:	1080                	addi	s0,sp,96
    80005a9a:	faa43423          	sd	a0,-88(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:154
    struct __metal_driver_sifive_uart0 *uart = priv;
    80005a9e:	fa843783          	ld	a5,-88(s0)
    80005aa2:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:156
    long control_base =
        __metal_driver_sifive_uart0_control_base((struct metal_uart *)priv);
    80005aa6:	fa843503          	ld	a0,-88(s0)
    80005aaa:	a97ff0ef          	jal	ra,80005540 <__metal_driver_sifive_uart0_control_base>
    80005aae:	87aa                	mv	a5,a0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:155
    long control_base =
    80005ab0:	fef43023          	sd	a5,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:158
    struct metal_clock *clock =
        __metal_driver_sifive_uart0_clock((struct metal_uart *)priv);
    80005ab4:	fa843503          	ld	a0,-88(s0)
    80005ab8:	b09ff0ef          	jal	ra,800055c0 <__metal_driver_sifive_uart0_clock>
    80005abc:	fca43c23          	sd	a0,-40(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:163

    /* Detect when the TXDATA is empty by setting the transmit watermark count
     * to one and waiting until an interrupt is pending */

    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) &= ~(UART_TXCNT(0x7));
    80005ac0:	fe043783          	ld	a5,-32(s0)
    80005ac4:	07a1                	addi	a5,a5,8
    80005ac6:	439c                	lw	a5,0(a5)
    80005ac8:	0007869b          	sext.w	a3,a5
    80005acc:	fe043783          	ld	a5,-32(s0)
    80005ad0:	07a1                	addi	a5,a5,8
    80005ad2:	873e                	mv	a4,a5
    80005ad4:	fff907b7          	lui	a5,0xfff90
    80005ad8:	17fd                	addi	a5,a5,-1
    80005ada:	8ff5                	and	a5,a5,a3
    80005adc:	2781                	sext.w	a5,a5
    80005ade:	c31c                	sw	a5,0(a4)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:164
    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXCNT(1);
    80005ae0:	fe043783          	ld	a5,-32(s0)
    80005ae4:	07a1                	addi	a5,a5,8
    80005ae6:	439c                	lw	a5,0(a5)
    80005ae8:	0007869b          	sext.w	a3,a5
    80005aec:	fe043783          	ld	a5,-32(s0)
    80005af0:	07a1                	addi	a5,a5,8
    80005af2:	873e                	mv	a4,a5
    80005af4:	67c1                	lui	a5,0x10
    80005af6:	8fd5                	or	a5,a5,a3
    80005af8:	2781                	sext.w	a5,a5
    80005afa:	c31c                	sw	a5,0(a4)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:166

    while ((UART_REGW(METAL_SIFIVE_UART0_IP) & UART_TXWM) == 0)
    80005afc:	0001                	nop
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:166 (discriminator 1)
    80005afe:	fe043783          	ld	a5,-32(s0)
    80005b02:	07d1                	addi	a5,a5,20
    80005b04:	439c                	lw	a5,0(a5)
    80005b06:	2781                	sext.w	a5,a5
    80005b08:	8b85                	andi	a5,a5,1
    80005b0a:	2781                	sext.w	a5,a5
    80005b0c:	dbed                	beqz	a5,80005afe <pre_rate_change_callback_func+0x6c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:174
    /* When the TXDATA clears, the UART is still shifting out the last byte.
     * Calculate the time we must drain to finish transmitting and then wait
     * that long. */

    long bits_per_symbol =
        (UART_REGW(METAL_SIFIVE_UART0_TXCTRL) & (1 << 1)) ? 9 : 10;
    80005b0e:	fe043783          	ld	a5,-32(s0)
    80005b12:	07a1                	addi	a5,a5,8
    80005b14:	439c                	lw	a5,0(a5)
    80005b16:	2781                	sext.w	a5,a5
    80005b18:	8b89                	andi	a5,a5,2
    80005b1a:	2781                	sext.w	a5,a5
    80005b1c:	c399                	beqz	a5,80005b22 <pre_rate_change_callback_func+0x90>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:174 (discriminator 1)
    80005b1e:	47a5                	li	a5,9
    80005b20:	a011                	j	80005b24 <pre_rate_change_callback_func+0x92>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:174 (discriminator 2)
    80005b22:	47a9                	li	a5,10
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:173
    long bits_per_symbol =
    80005b24:	fcf43823          	sd	a5,-48(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:175
    long clk_freq = clock->vtable->get_rate_hz(clock);
    80005b28:	fd843783          	ld	a5,-40(s0)
    80005b2c:	639c                	ld	a5,0(a5)
    80005b2e:	639c                	ld	a5,0(a5)
    80005b30:	fd843503          	ld	a0,-40(s0)
    80005b34:	9782                	jalr	a5
    80005b36:	fca43423          	sd	a0,-56(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:176
    long cycles_to_wait = bits_per_symbol * clk_freq / uart->baud_rate;
    80005b3a:	fd043703          	ld	a4,-48(s0)
    80005b3e:	fc843783          	ld	a5,-56(s0)
    80005b42:	02f707b3          	mul	a5,a4,a5
    80005b46:	873e                	mv	a4,a5
    80005b48:	fe843783          	ld	a5,-24(s0)
    80005b4c:	679c                	ld	a5,8(a5)
    80005b4e:	02f757b3          	divu	a5,a4,a5
    80005b52:	fcf43023          	sd	a5,-64(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:178

    for (volatile long x = 0; x < cycles_to_wait; x++)
    80005b56:	fa043c23          	sd	zero,-72(s0)
    80005b5a:	a039                	j	80005b68 <pre_rate_change_callback_func+0xd6>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:179 (discriminator 3)
        __asm__("nop");
    80005b5c:	0001                	nop
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:178 (discriminator 3)
    for (volatile long x = 0; x < cycles_to_wait; x++)
    80005b5e:	fb843783          	ld	a5,-72(s0)
    80005b62:	0785                	addi	a5,a5,1
    80005b64:	faf43c23          	sd	a5,-72(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:178 (discriminator 1)
    80005b68:	fb843783          	ld	a5,-72(s0)
    80005b6c:	fc043703          	ld	a4,-64(s0)
    80005b70:	fee7c6e3          	blt	a5,a4,80005b5c <pre_rate_change_callback_func+0xca>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:180
}
    80005b74:	0001                	nop
    80005b76:	60e6                	ld	ra,88(sp)
    80005b78:	6446                	ld	s0,80(sp)
    80005b7a:	6125                	addi	sp,sp,96
    80005b7c:	8082                	ret

0000000080005b7e <post_rate_change_callback_func>:
post_rate_change_callback_func():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:182

static void post_rate_change_callback_func(void *priv) {
    80005b7e:	7179                	addi	sp,sp,-48
    80005b80:	f406                	sd	ra,40(sp)
    80005b82:	f022                	sd	s0,32(sp)
    80005b84:	1800                	addi	s0,sp,48
    80005b86:	fca43c23          	sd	a0,-40(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:183
    struct __metal_driver_sifive_uart0 *uart = priv;
    80005b8a:	fd843783          	ld	a5,-40(s0)
    80005b8e:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:184
    metal_uart_set_baud_rate(&uart->uart, uart->baud_rate);
    80005b92:	fe843703          	ld	a4,-24(s0)
    80005b96:	fe843783          	ld	a5,-24(s0)
    80005b9a:	679c                	ld	a5,8(a5)
    80005b9c:	2781                	sext.w	a5,a5
    80005b9e:	85be                	mv	a1,a5
    80005ba0:	853a                	mv	a0,a4
    80005ba2:	4d6000ef          	jal	ra,80006078 <metal_uart_set_baud_rate>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:185
}
    80005ba6:	0001                	nop
    80005ba8:	70a2                	ld	ra,40(sp)
    80005baa:	7402                	ld	s0,32(sp)
    80005bac:	6145                	addi	sp,sp,48
    80005bae:	8082                	ret

0000000080005bb0 <__metal_driver_sifive_uart0_init>:
__metal_driver_sifive_uart0_init():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:187

void __metal_driver_sifive_uart0_init(struct metal_uart *guart, int baud_rate) {
    80005bb0:	715d                	addi	sp,sp,-80
    80005bb2:	e486                	sd	ra,72(sp)
    80005bb4:	e0a2                	sd	s0,64(sp)
    80005bb6:	0880                	addi	s0,sp,80
    80005bb8:	faa43c23          	sd	a0,-72(s0)
    80005bbc:	87ae                	mv	a5,a1
    80005bbe:	faf42a23          	sw	a5,-76(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:188
    struct __metal_driver_sifive_uart0 *uart = (void *)(guart);
    80005bc2:	fb843783          	ld	a5,-72(s0)
    80005bc6:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:189
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
    80005bca:	fb843503          	ld	a0,-72(s0)
    80005bce:	9f3ff0ef          	jal	ra,800055c0 <__metal_driver_sifive_uart0_clock>
    80005bd2:	fea43023          	sd	a0,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:191
    struct __metal_driver_sifive_gpio0 *pinmux =
        __metal_driver_sifive_uart0_pinmux(guart);
    80005bd6:	fb843503          	ld	a0,-72(s0)
    80005bda:	a15ff0ef          	jal	ra,800055ee <__metal_driver_sifive_uart0_pinmux>
    80005bde:	fca43c23          	sd	a0,-40(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:193

    if (clock != NULL) {
    80005be2:	fe043783          	ld	a5,-32(s0)
    80005be6:	cbb1                	beqz	a5,80005c3a <__metal_driver_sifive_uart0_init+0x8a>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:194
        uart->pre_rate_change_callback.callback =
    80005be8:	fe843783          	ld	a5,-24(s0)
    80005bec:	00000717          	auipc	a4,0x0
    80005bf0:	ea670713          	addi	a4,a4,-346 # 80005a92 <pre_rate_change_callback_func>
    80005bf4:	eb98                	sd	a4,16(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:196
            &pre_rate_change_callback_func;
        uart->pre_rate_change_callback.priv = guart;
    80005bf6:	fe843783          	ld	a5,-24(s0)
    80005bfa:	fb843703          	ld	a4,-72(s0)
    80005bfe:	ef98                	sd	a4,24(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:197
        metal_clock_register_pre_rate_change_callback(
    80005c00:	fe843783          	ld	a5,-24(s0)
    80005c04:	07c1                	addi	a5,a5,16
    80005c06:	85be                	mv	a1,a5
    80005c08:	fe043503          	ld	a0,-32(s0)
    80005c0c:	0d4000ef          	jal	ra,80005ce0 <metal_clock_register_pre_rate_change_callback>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:200
            clock, &(uart->pre_rate_change_callback));

        uart->post_rate_change_callback.callback =
    80005c10:	fe843783          	ld	a5,-24(s0)
    80005c14:	00000717          	auipc	a4,0x0
    80005c18:	f6a70713          	addi	a4,a4,-150 # 80005b7e <post_rate_change_callback_func>
    80005c1c:	f798                	sd	a4,40(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:202
            &post_rate_change_callback_func;
        uart->post_rate_change_callback.priv = guart;
    80005c1e:	fe843783          	ld	a5,-24(s0)
    80005c22:	fb843703          	ld	a4,-72(s0)
    80005c26:	fb98                	sd	a4,48(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:203
        metal_clock_register_post_rate_change_callback(
    80005c28:	fe843783          	ld	a5,-24(s0)
    80005c2c:	02878793          	addi	a5,a5,40 # 10028 <__heap_size+0xf828>
    80005c30:	85be                	mv	a1,a5
    80005c32:	fe043503          	ld	a0,-32(s0)
    80005c36:	0dc000ef          	jal	ra,80005d12 <metal_clock_register_post_rate_change_callback>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:207
            clock, &(uart->post_rate_change_callback));
    }

    metal_uart_set_baud_rate(&(uart->uart), baud_rate);
    80005c3a:	fe843783          	ld	a5,-24(s0)
    80005c3e:	fb442703          	lw	a4,-76(s0)
    80005c42:	85ba                	mv	a1,a4
    80005c44:	853e                	mv	a0,a5
    80005c46:	432000ef          	jal	ra,80006078 <metal_uart_set_baud_rate>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:209

    if (pinmux != NULL) {
    80005c4a:	fd843783          	ld	a5,-40(s0)
    80005c4e:	cb95                	beqz	a5,80005c82 <__metal_driver_sifive_uart0_init+0xd2>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:211
        long pinmux_output_selector =
            __metal_driver_sifive_uart0_pinmux_output_selector(guart);
    80005c50:	fb843503          	ld	a0,-72(s0)
    80005c54:	9c3ff0ef          	jal	ra,80005616 <__metal_driver_sifive_uart0_pinmux_output_selector>
    80005c58:	87aa                	mv	a5,a0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:210
        long pinmux_output_selector =
    80005c5a:	fcf43823          	sd	a5,-48(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:213
        long pinmux_source_selector =
            __metal_driver_sifive_uart0_pinmux_source_selector(guart);
    80005c5e:	fb843503          	ld	a0,-72(s0)
    80005c62:	9ddff0ef          	jal	ra,8000563e <__metal_driver_sifive_uart0_pinmux_source_selector>
    80005c66:	87aa                	mv	a5,a0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:212
        long pinmux_source_selector =
    80005c68:	fcf43423          	sd	a5,-56(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:214
        pinmux->gpio.vtable->enable_io((struct metal_gpio *)pinmux,
    80005c6c:	fd843783          	ld	a5,-40(s0)
    80005c70:	639c                	ld	a5,0(a5)
    80005c72:	67bc                	ld	a5,72(a5)
    80005c74:	fc843603          	ld	a2,-56(s0)
    80005c78:	fd043583          	ld	a1,-48(s0)
    80005c7c:	fd843503          	ld	a0,-40(s0)
    80005c80:	9782                	jalr	a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:218
                                       pinmux_output_selector,
                                       pinmux_source_selector);
    }
}
    80005c82:	0001                	nop
    80005c84:	60a6                	ld	ra,72(sp)
    80005c86:	6406                	ld	s0,64(sp)
    80005c88:	6161                	addi	sp,sp,80
    80005c8a:	8082                	ret

0000000080005c8c <_metal_clock_append_to_callbacks>:
_metal_clock_append_to_callbacks():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/metal/clock.h:63
/*!
 * @brief Append a callback to the linked list and return the head of the list
 */
__inline__ metal_clock_callback *
_metal_clock_append_to_callbacks(metal_clock_callback *list,
                                 metal_clock_callback *const cb) {
    80005c8c:	7179                	addi	sp,sp,-48
    80005c8e:	f422                	sd	s0,40(sp)
    80005c90:	1800                	addi	s0,sp,48
    80005c92:	fca43c23          	sd	a0,-40(s0)
    80005c96:	fcb43823          	sd	a1,-48(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/metal/clock.h:64
    cb->_next = NULL;
    80005c9a:	fd043783          	ld	a5,-48(s0)
    80005c9e:	0007b823          	sd	zero,16(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/metal/clock.h:66

    if (!list) {
    80005ca2:	fd843783          	ld	a5,-40(s0)
    80005ca6:	e781                	bnez	a5,80005cae <_metal_clock_append_to_callbacks+0x22>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/metal/clock.h:67
        return cb;
    80005ca8:	fd043783          	ld	a5,-48(s0)
    80005cac:	a035                	j	80005cd8 <_metal_clock_append_to_callbacks+0x4c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/metal/clock.h:70
    }

    metal_clock_callback *current = list;
    80005cae:	fd843783          	ld	a5,-40(s0)
    80005cb2:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/metal/clock.h:72

    while ((current->_next) != NULL) {
    80005cb6:	a031                	j	80005cc2 <_metal_clock_append_to_callbacks+0x36>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/metal/clock.h:73
        current = current->_next;
    80005cb8:	fe843783          	ld	a5,-24(s0)
    80005cbc:	6b9c                	ld	a5,16(a5)
    80005cbe:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/metal/clock.h:72
    while ((current->_next) != NULL) {
    80005cc2:	fe843783          	ld	a5,-24(s0)
    80005cc6:	6b9c                	ld	a5,16(a5)
    80005cc8:	fbe5                	bnez	a5,80005cb8 <_metal_clock_append_to_callbacks+0x2c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/metal/clock.h:76
    }

    current->_next = cb;
    80005cca:	fe843783          	ld	a5,-24(s0)
    80005cce:	fd043703          	ld	a4,-48(s0)
    80005cd2:	eb98                	sd	a4,16(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/metal/clock.h:78

    return list;
    80005cd4:	fd843783          	ld	a5,-40(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/metal/clock.h:79
}
    80005cd8:	853e                	mv	a0,a5
    80005cda:	7422                	ld	s0,40(sp)
    80005cdc:	6145                	addi	sp,sp,48
    80005cde:	8082                	ret

0000000080005ce0 <metal_clock_register_pre_rate_change_callback>:
metal_clock_register_pre_rate_change_callback():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/metal/clock.h:146
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void
metal_clock_register_pre_rate_change_callback(struct metal_clock *clk,
                                              metal_clock_callback *cb) {
    80005ce0:	1101                	addi	sp,sp,-32
    80005ce2:	ec06                	sd	ra,24(sp)
    80005ce4:	e822                	sd	s0,16(sp)
    80005ce6:	1000                	addi	s0,sp,32
    80005ce8:	fea43423          	sd	a0,-24(s0)
    80005cec:	feb43023          	sd	a1,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/metal/clock.h:148
    clk->_pre_rate_change_callback =
        _metal_clock_append_to_callbacks(clk->_pre_rate_change_callback, cb);
    80005cf0:	fe843783          	ld	a5,-24(s0)
    80005cf4:	679c                	ld	a5,8(a5)
    80005cf6:	fe043583          	ld	a1,-32(s0)
    80005cfa:	853e                	mv	a0,a5
    80005cfc:	f91ff0ef          	jal	ra,80005c8c <_metal_clock_append_to_callbacks>
    80005d00:	872a                	mv	a4,a0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/metal/clock.h:147
    clk->_pre_rate_change_callback =
    80005d02:	fe843783          	ld	a5,-24(s0)
    80005d06:	e798                	sd	a4,8(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/metal/clock.h:149
}
    80005d08:	0001                	nop
    80005d0a:	60e2                	ld	ra,24(sp)
    80005d0c:	6442                	ld	s0,16(sp)
    80005d0e:	6105                	addi	sp,sp,32
    80005d10:	8082                	ret

0000000080005d12 <metal_clock_register_post_rate_change_callback>:
metal_clock_register_post_rate_change_callback():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/metal/clock.h:159
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void
metal_clock_register_post_rate_change_callback(struct metal_clock *clk,
                                               metal_clock_callback *cb) {
    80005d12:	1101                	addi	sp,sp,-32
    80005d14:	ec06                	sd	ra,24(sp)
    80005d16:	e822                	sd	s0,16(sp)
    80005d18:	1000                	addi	s0,sp,32
    80005d1a:	fea43423          	sd	a0,-24(s0)
    80005d1e:	feb43023          	sd	a1,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/metal/clock.h:161
    clk->_post_rate_change_callback =
        _metal_clock_append_to_callbacks(clk->_post_rate_change_callback, cb);
    80005d22:	fe843783          	ld	a5,-24(s0)
    80005d26:	6b9c                	ld	a5,16(a5)
    80005d28:	fe043583          	ld	a1,-32(s0)
    80005d2c:	853e                	mv	a0,a5
    80005d2e:	f5fff0ef          	jal	ra,80005c8c <_metal_clock_append_to_callbacks>
    80005d32:	872a                	mv	a4,a0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/metal/clock.h:160
    clk->_post_rate_change_callback =
    80005d34:	fe843783          	ld	a5,-24(s0)
    80005d38:	eb98                	sd	a4,16(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/metal/clock.h:162
}
    80005d3a:	0001                	nop
    80005d3c:	60e2                	ld	ra,24(sp)
    80005d3e:	6442                	ld	s0,16(sp)
    80005d40:	6105                	addi	sp,sp,32
    80005d42:	8082                	ret

0000000080005d44 <metal_cpu_get_timer>:
metal_cpu_get_timer():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/metal/cpu.h:73
 * Get the value of the cycle count timer for a given CPU
 *
 * @param cpu The CPU device handle
 * @return The value of the CPU cycle count timer
 */
__inline__ unsigned long long metal_cpu_get_timer(struct metal_cpu *cpu) {
    80005d44:	1101                	addi	sp,sp,-32
    80005d46:	ec06                	sd	ra,24(sp)
    80005d48:	e822                	sd	s0,16(sp)
    80005d4a:	1000                	addi	s0,sp,32
    80005d4c:	fea43423          	sd	a0,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/metal/cpu.h:74
    return cpu->vtable->mcycle_get(cpu);
    80005d50:	fe843783          	ld	a5,-24(s0)
    80005d54:	639c                	ld	a5,0(a5)
    80005d56:	639c                	ld	a5,0(a5)
    80005d58:	fe843503          	ld	a0,-24(s0)
    80005d5c:	9782                	jalr	a5
    80005d5e:	87aa                	mv	a5,a0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/metal/cpu.h:75
}
    80005d60:	853e                	mv	a0,a5
    80005d62:	60e2                	ld	ra,24(sp)
    80005d64:	6442                	ld	s0,16(sp)
    80005d66:	6105                	addi	sp,sp,32
    80005d68:	8082                	ret

0000000080005d6a <metal_cpu_get_timebase>:
metal_cpu_get_timebase():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/metal/cpu.h:84
 * Get the value of the timebase of the cycle count timer
 *
 * @param cpu The CPU device handle
 * @return The value of the cycle count timer timebase
 */
__inline__ unsigned long long metal_cpu_get_timebase(struct metal_cpu *cpu) {
    80005d6a:	1101                	addi	sp,sp,-32
    80005d6c:	ec06                	sd	ra,24(sp)
    80005d6e:	e822                	sd	s0,16(sp)
    80005d70:	1000                	addi	s0,sp,32
    80005d72:	fea43423          	sd	a0,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/metal/cpu.h:85
    return cpu->vtable->timebase_get(cpu);
    80005d76:	fe843783          	ld	a5,-24(s0)
    80005d7a:	639c                	ld	a5,0(a5)
    80005d7c:	679c                	ld	a5,8(a5)
    80005d7e:	fe843503          	ld	a0,-24(s0)
    80005d82:	9782                	jalr	a5
    80005d84:	87aa                	mv	a5,a0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/metal/cpu.h:86
}
    80005d86:	853e                	mv	a0,a5
    80005d88:	60e2                	ld	ra,24(sp)
    80005d8a:	6442                	ld	s0,16(sp)
    80005d8c:	6105                	addi	sp,sp,32
    80005d8e:	8082                	ret

0000000080005d90 <metal_cpu_interrupt_controller>:
metal_cpu_interrupt_controller():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/metal/cpu.h:224
 *
 * @param cpu The CPU device handle
 * @return The handle for the CPU interrupt controller
 */
__inline__ struct metal_interrupt *
metal_cpu_interrupt_controller(struct metal_cpu *cpu) {
    80005d90:	1101                	addi	sp,sp,-32
    80005d92:	ec06                	sd	ra,24(sp)
    80005d94:	e822                	sd	s0,16(sp)
    80005d96:	1000                	addi	s0,sp,32
    80005d98:	fea43423          	sd	a0,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/metal/cpu.h:225
    return cpu->vtable->controller_interrupt(cpu);
    80005d9c:	fe843783          	ld	a5,-24(s0)
    80005da0:	639c                	ld	a5,0(a5)
    80005da2:	6fbc                	ld	a5,88(a5)
    80005da4:	fe843503          	ld	a0,-24(s0)
    80005da8:	9782                	jalr	a5
    80005daa:	87aa                	mv	a5,a0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/metal/cpu.h:226
}
    80005dac:	853e                	mv	a0,a5
    80005dae:	60e2                	ld	ra,24(sp)
    80005db0:	6442                	ld	s0,16(sp)
    80005db2:	6105                	addi	sp,sp,32
    80005db4:	8082                	ret

0000000080005db6 <metal_cpu_get>:
metal_cpu_get():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/cpu.c:7
/* SPDX-License-Identifier: Apache-2.0 */

#include <metal/cpu.h>
#include <metal/machine.h>

struct metal_cpu *metal_cpu_get(unsigned int hartid) {
    80005db6:	1101                	addi	sp,sp,-32
    80005db8:	ec22                	sd	s0,24(sp)
    80005dba:	1000                	addi	s0,sp,32
    80005dbc:	87aa                	mv	a5,a0
    80005dbe:	fef42623          	sw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/cpu.c:8
    if (hartid < __METAL_DT_MAX_HARTS) {
    80005dc2:	fec42783          	lw	a5,-20(s0)
    80005dc6:	2781                	sext.w	a5,a5
    80005dc8:	eb99                	bnez	a5,80005dde <metal_cpu_get+0x28>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/cpu.c:9
        return (struct metal_cpu *)__metal_cpu_table[hartid];
    80005dca:	00001717          	auipc	a4,0x1
    80005dce:	79e70713          	addi	a4,a4,1950 # 80007568 <__metal_cpu_table>
    80005dd2:	fec46783          	lwu	a5,-20(s0)
    80005dd6:	078e                	slli	a5,a5,0x3
    80005dd8:	97ba                	add	a5,a5,a4
    80005dda:	639c                	ld	a5,0(a5)
    80005ddc:	a011                	j	80005de0 <metal_cpu_get+0x2a>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/cpu.c:11
    }
    return NULL;
    80005dde:	4781                	li	a5,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/cpu.c:12
}
    80005de0:	853e                	mv	a0,a5
    80005de2:	6462                	ld	s0,24(sp)
    80005de4:	6105                	addi	sp,sp,32
    80005de6:	8082                	ret

0000000080005de8 <metal_cpu_get_current_hartid>:
metal_cpu_get_current_hartid():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/cpu.c:14

int metal_cpu_get_current_hartid() {
    80005de8:	1101                	addi	sp,sp,-32
    80005dea:	ec22                	sd	s0,24(sp)
    80005dec:	1000                	addi	s0,sp,32
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/cpu.c:17
#ifdef __riscv
    int mhartid;
    __asm__ volatile("csrr %0, mhartid" : "=r"(mhartid));
    80005dee:	f14027f3          	csrr	a5,mhartid
    80005df2:	fef42623          	sw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/cpu.c:18
    return mhartid;
    80005df6:	fec42783          	lw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/cpu.c:20
#endif
}
    80005dfa:	853e                	mv	a0,a5
    80005dfc:	6462                	ld	s0,24(sp)
    80005dfe:	6105                	addi	sp,sp,32
    80005e00:	8082                	ret

0000000080005e02 <metal_i2c_init>:
metal_i2c_init():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/metal/i2c.h:48
 * @param i2c The handle for the I2C device to initialize.
 * @param baud_rate The baud rate for the I2C device to operate at.
 * @param mode I2C operation mode.
 */
inline void metal_i2c_init(struct metal_i2c *i2c, unsigned int baud_rate,
                           metal_i2c_mode_t mode) {
    80005e02:	1101                	addi	sp,sp,-32
    80005e04:	ec06                	sd	ra,24(sp)
    80005e06:	e822                	sd	s0,16(sp)
    80005e08:	1000                	addi	s0,sp,32
    80005e0a:	fea43423          	sd	a0,-24(s0)
    80005e0e:	87ae                	mv	a5,a1
    80005e10:	8732                	mv	a4,a2
    80005e12:	fef42223          	sw	a5,-28(s0)
    80005e16:	87ba                	mv	a5,a4
    80005e18:	fef42023          	sw	a5,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/metal/i2c.h:49
    i2c->vtable->init(i2c, baud_rate, mode);
    80005e1c:	fe843783          	ld	a5,-24(s0)
    80005e20:	639c                	ld	a5,0(a5)
    80005e22:	6394                	ld	a3,0(a5)
    80005e24:	fe042703          	lw	a4,-32(s0)
    80005e28:	fe442783          	lw	a5,-28(s0)
    80005e2c:	863a                	mv	a2,a4
    80005e2e:	85be                	mv	a1,a5
    80005e30:	fe843503          	ld	a0,-24(s0)
    80005e34:	9682                	jalr	a3
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/metal/i2c.h:50
}
    80005e36:	0001                	nop
    80005e38:	60e2                	ld	ra,24(sp)
    80005e3a:	6442                	ld	s0,16(sp)
    80005e3c:	6105                	addi	sp,sp,32
    80005e3e:	8082                	ret

0000000080005e40 <metal_i2c_write>:
metal_i2c_write():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/metal/i2c.h:62
 * @param stop_bit Enable / Disable STOP condition.
 * @return 0 if the write succeeds.
 */
inline int metal_i2c_write(struct metal_i2c *i2c, unsigned int addr,
                           unsigned int len, unsigned char buf[],
                           metal_i2c_stop_bit_t stop_bit) {
    80005e40:	7179                	addi	sp,sp,-48
    80005e42:	f406                	sd	ra,40(sp)
    80005e44:	f022                	sd	s0,32(sp)
    80005e46:	1800                	addi	s0,sp,48
    80005e48:	fea43423          	sd	a0,-24(s0)
    80005e4c:	87ae                	mv	a5,a1
    80005e4e:	fcd43c23          	sd	a3,-40(s0)
    80005e52:	fef42223          	sw	a5,-28(s0)
    80005e56:	87b2                	mv	a5,a2
    80005e58:	fef42023          	sw	a5,-32(s0)
    80005e5c:	87ba                	mv	a5,a4
    80005e5e:	fcf42a23          	sw	a5,-44(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/metal/i2c.h:63
    return i2c->vtable->write(i2c, addr, len, buf, stop_bit);
    80005e62:	fe843783          	ld	a5,-24(s0)
    80005e66:	639c                	ld	a5,0(a5)
    80005e68:	0087b803          	ld	a6,8(a5)
    80005e6c:	fd442703          	lw	a4,-44(s0)
    80005e70:	fe042603          	lw	a2,-32(s0)
    80005e74:	fe442783          	lw	a5,-28(s0)
    80005e78:	fd843683          	ld	a3,-40(s0)
    80005e7c:	85be                	mv	a1,a5
    80005e7e:	fe843503          	ld	a0,-24(s0)
    80005e82:	9802                	jalr	a6
    80005e84:	87aa                	mv	a5,a0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/metal/i2c.h:64
}
    80005e86:	853e                	mv	a0,a5
    80005e88:	70a2                	ld	ra,40(sp)
    80005e8a:	7402                	ld	s0,32(sp)
    80005e8c:	6145                	addi	sp,sp,48
    80005e8e:	8082                	ret

0000000080005e90 <metal_i2c_read>:
metal_i2c_read():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/metal/i2c.h:76
 * @param stop_bit Enable / Disable STOP condition.
 * @return 0 if the read succeeds.
 */
inline int metal_i2c_read(struct metal_i2c *i2c, unsigned int addr,
                          unsigned int len, unsigned char buf[],
                          metal_i2c_stop_bit_t stop_bit) {
    80005e90:	7179                	addi	sp,sp,-48
    80005e92:	f406                	sd	ra,40(sp)
    80005e94:	f022                	sd	s0,32(sp)
    80005e96:	1800                	addi	s0,sp,48
    80005e98:	fea43423          	sd	a0,-24(s0)
    80005e9c:	87ae                	mv	a5,a1
    80005e9e:	fcd43c23          	sd	a3,-40(s0)
    80005ea2:	fef42223          	sw	a5,-28(s0)
    80005ea6:	87b2                	mv	a5,a2
    80005ea8:	fef42023          	sw	a5,-32(s0)
    80005eac:	87ba                	mv	a5,a4
    80005eae:	fcf42a23          	sw	a5,-44(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/metal/i2c.h:77
    return i2c->vtable->read(i2c, addr, len, buf, stop_bit);
    80005eb2:	fe843783          	ld	a5,-24(s0)
    80005eb6:	639c                	ld	a5,0(a5)
    80005eb8:	0107b803          	ld	a6,16(a5)
    80005ebc:	fd442703          	lw	a4,-44(s0)
    80005ec0:	fe042603          	lw	a2,-32(s0)
    80005ec4:	fe442783          	lw	a5,-28(s0)
    80005ec8:	fd843683          	ld	a3,-40(s0)
    80005ecc:	85be                	mv	a1,a5
    80005ece:	fe843503          	ld	a0,-24(s0)
    80005ed2:	9802                	jalr	a6
    80005ed4:	87aa                	mv	a5,a0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/metal/i2c.h:78
}
    80005ed6:	853e                	mv	a0,a5
    80005ed8:	70a2                	ld	ra,40(sp)
    80005eda:	7402                	ld	s0,32(sp)
    80005edc:	6145                	addi	sp,sp,48
    80005ede:	8082                	ret

0000000080005ee0 <metal_i2c_set_baud_rate>:
metal_i2c_set_baud_rate():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/metal/i2c.h:108
/*! @brief Set the current baud rate of the I2C device.
 * @param i2c The handle for the I2C device.
 * @param baud_rate The desired baud rate of the I2C device.
 * @return 0 If the baud rate is successfully changed.
 */
inline int metal_i2c_set_baud_rate(struct metal_i2c *i2c, int baud_rate) {
    80005ee0:	1101                	addi	sp,sp,-32
    80005ee2:	ec06                	sd	ra,24(sp)
    80005ee4:	e822                	sd	s0,16(sp)
    80005ee6:	1000                	addi	s0,sp,32
    80005ee8:	fea43423          	sd	a0,-24(s0)
    80005eec:	87ae                	mv	a5,a1
    80005eee:	fef42223          	sw	a5,-28(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/metal/i2c.h:109
    return i2c->vtable->set_baud_rate(i2c, baud_rate);
    80005ef2:	fe843783          	ld	a5,-24(s0)
    80005ef6:	639c                	ld	a5,0(a5)
    80005ef8:	7798                	ld	a4,40(a5)
    80005efa:	fe442783          	lw	a5,-28(s0)
    80005efe:	85be                	mv	a1,a5
    80005f00:	fe843503          	ld	a0,-24(s0)
    80005f04:	9702                	jalr	a4
    80005f06:	87aa                	mv	a5,a0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/metal/i2c.h:110
}
    80005f08:	853e                	mv	a0,a5
    80005f0a:	60e2                	ld	ra,24(sp)
    80005f0c:	6442                	ld	s0,16(sp)
    80005f0e:	6105                	addi	sp,sp,32
    80005f10:	8082                	ret

0000000080005f12 <metal_i2c_get_device>:
metal_i2c_get_device():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/i2c.c:21
                                     unsigned char txbuf[], unsigned int txlen,
                                     unsigned char rxbuf[], unsigned int rxlen);
extern inline int metal_i2c_get_baud_rate(struct metal_i2c *i2c);
extern inline int metal_i2c_set_baud_rate(struct metal_i2c *i2c, int baud_rate);

struct metal_i2c *metal_i2c_get_device(unsigned int device_num) {
    80005f12:	1101                	addi	sp,sp,-32
    80005f14:	ec22                	sd	s0,24(sp)
    80005f16:	1000                	addi	s0,sp,32
    80005f18:	87aa                	mv	a5,a0
    80005f1a:	fef42623          	sw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/i2c.c:23
#if __METAL_DT_MAX_I2CS > 0
    if (device_num < __METAL_DT_MAX_I2CS) {
    80005f1e:	fec42783          	lw	a5,-20(s0)
    80005f22:	2781                	sext.w	a5,a5
    80005f24:	eb99                	bnez	a5,80005f3a <metal_i2c_get_device+0x28>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/i2c.c:24
        return (struct metal_i2c *)__metal_i2c_table[device_num];
    80005f26:	00001717          	auipc	a4,0x1
    80005f2a:	64a70713          	addi	a4,a4,1610 # 80007570 <__metal_i2c_table>
    80005f2e:	fec46783          	lwu	a5,-20(s0)
    80005f32:	078e                	slli	a5,a5,0x3
    80005f34:	97ba                	add	a5,a5,a4
    80005f36:	639c                	ld	a5,0(a5)
    80005f38:	a011                	j	80005f3c <metal_i2c_get_device+0x2a>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/i2c.c:27
    }
#endif
    return NULL;
    80005f3a:	4781                	li	a5,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/i2c.c:28
}
    80005f3c:	853e                	mv	a0,a5
    80005f3e:	6462                	ld	s0,24(sp)
    80005f40:	6105                	addi	sp,sp,32
    80005f42:	8082                	ret

0000000080005f44 <metal_shutdown>:
metal_shutdown():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/shutdown.c:17
    __metal_shutdown_exit(__METAL_DT_SHUTDOWN_HANDLE, code);
}
#else
#pragma message(                                                               \
    "There is no defined shutdown mechanism, metal_shutdown() will spin.")
void metal_shutdown(int code) {
    80005f44:	1101                	addi	sp,sp,-32
    80005f46:	ec22                	sd	s0,24(sp)
    80005f48:	1000                	addi	s0,sp,32
    80005f4a:	87aa                	mv	a5,a0
    80005f4c:	fef42623          	sw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/shutdown.c:19 (discriminator 1)
    while (1) {
        __asm__ volatile("nop");
    80005f50:	0001                	nop
    80005f52:	bffd                	j	80005f50 <metal_shutdown+0xc>

0000000080005f54 <metal_gettimeofday>:
metal_gettimeofday():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/time.c:9
#include <metal/time.h>
#include <metal/timer.h>

#include <stddef.h>

int metal_gettimeofday(struct timeval *tp, void *tzp) {
    80005f54:	7139                	addi	sp,sp,-64
    80005f56:	fc06                	sd	ra,56(sp)
    80005f58:	f822                	sd	s0,48(sp)
    80005f5a:	0080                	addi	s0,sp,64
    80005f5c:	fca43423          	sd	a0,-56(s0)
    80005f60:	fcb43023          	sd	a1,-64(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/time.c:12
    int rv;
    unsigned long long mcc, timebase;
    rv = metal_timer_get_cyclecount(0, &mcc);
    80005f64:	fe040793          	addi	a5,s0,-32
    80005f68:	85be                	mv	a1,a5
    80005f6a:	4501                	li	a0,0
    80005f6c:	320000ef          	jal	ra,8000628c <metal_timer_get_cyclecount>
    80005f70:	87aa                	mv	a5,a0
    80005f72:	fef42623          	sw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/time.c:13
    if (rv != 0) {
    80005f76:	fec42783          	lw	a5,-20(s0)
    80005f7a:	2781                	sext.w	a5,a5
    80005f7c:	c399                	beqz	a5,80005f82 <metal_gettimeofday+0x2e>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/time.c:14
        return -1;
    80005f7e:	57fd                	li	a5,-1
    80005f80:	a8b9                	j	80005fde <metal_gettimeofday+0x8a>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/time.c:16
    }
    rv = metal_timer_get_timebase_frequency(0, &timebase);
    80005f82:	fd840793          	addi	a5,s0,-40
    80005f86:	85be                	mv	a1,a5
    80005f88:	4501                	li	a0,0
    80005f8a:	348000ef          	jal	ra,800062d2 <metal_timer_get_timebase_frequency>
    80005f8e:	87aa                	mv	a5,a0
    80005f90:	fef42623          	sw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/time.c:17
    if (rv != 0) {
    80005f94:	fec42783          	lw	a5,-20(s0)
    80005f98:	2781                	sext.w	a5,a5
    80005f9a:	c399                	beqz	a5,80005fa0 <metal_gettimeofday+0x4c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/time.c:18
        return -1;
    80005f9c:	57fd                	li	a5,-1
    80005f9e:	a081                	j	80005fde <metal_gettimeofday+0x8a>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/time.c:20
    }
    tp->tv_sec = mcc / timebase;
    80005fa0:	fe043703          	ld	a4,-32(s0)
    80005fa4:	fd843783          	ld	a5,-40(s0)
    80005fa8:	02f757b3          	divu	a5,a4,a5
    80005fac:	873e                	mv	a4,a5
    80005fae:	fc843783          	ld	a5,-56(s0)
    80005fb2:	e398                	sd	a4,0(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/time.c:21
    tp->tv_usec = mcc % timebase * 1000000 / timebase;
    80005fb4:	fe043703          	ld	a4,-32(s0)
    80005fb8:	fd843783          	ld	a5,-40(s0)
    80005fbc:	02f77733          	remu	a4,a4,a5
    80005fc0:	000f47b7          	lui	a5,0xf4
    80005fc4:	24078793          	addi	a5,a5,576 # f4240 <__heap_size+0xf3a40>
    80005fc8:	02f70733          	mul	a4,a4,a5
    80005fcc:	fd843783          	ld	a5,-40(s0)
    80005fd0:	02f757b3          	divu	a5,a4,a5
    80005fd4:	873e                	mv	a4,a5
    80005fd6:	fc843783          	ld	a5,-56(s0)
    80005fda:	e798                	sd	a4,8(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/time.c:22
    return 0;
    80005fdc:	4781                	li	a5,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/time.c:23 (discriminator 1)
}
    80005fde:	853e                	mv	a0,a5
    80005fe0:	70e2                	ld	ra,56(sp)
    80005fe2:	7442                	ld	s0,48(sp)
    80005fe4:	6121                	addi	sp,sp,64
    80005fe6:	8082                	ret

0000000080005fe8 <metal_time>:
metal_time():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/time.c:25

time_t metal_time(void) {
    80005fe8:	1101                	addi	sp,sp,-32
    80005fea:	ec06                	sd	ra,24(sp)
    80005fec:	e822                	sd	s0,16(sp)
    80005fee:	1000                	addi	s0,sp,32
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/time.c:28
    struct timeval now;

    if (metal_gettimeofday(&now, NULL) < 0)
    80005ff0:	fe040793          	addi	a5,s0,-32
    80005ff4:	4581                	li	a1,0
    80005ff6:	853e                	mv	a0,a5
    80005ff8:	f5dff0ef          	jal	ra,80005f54 <metal_gettimeofday>
    80005ffc:	87aa                	mv	a5,a0
    80005ffe:	0007d563          	bgez	a5,80006008 <metal_time+0x20>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/time.c:29
        now.tv_sec = (time_t)-1;
    80006002:	57fd                	li	a5,-1
    80006004:	fef43023          	sd	a5,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/time.c:31

    return now.tv_sec;
    80006008:	fe043783          	ld	a5,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/time.c:32
}
    8000600c:	853e                	mv	a0,a5
    8000600e:	60e2                	ld	ra,24(sp)
    80006010:	6442                	ld	s0,16(sp)
    80006012:	6105                	addi	sp,sp,32
    80006014:	8082                	ret

0000000080006016 <metal_uart_init>:
metal_uart_init():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/metal/uart.h:59
 more than once.
 *
 * @param uart The UART device handle
 * @param baud_rate the baud rate to set the UART to
 */
__inline__ void metal_uart_init(struct metal_uart *uart, int baud_rate) {
    80006016:	1101                	addi	sp,sp,-32
    80006018:	ec06                	sd	ra,24(sp)
    8000601a:	e822                	sd	s0,16(sp)
    8000601c:	1000                	addi	s0,sp,32
    8000601e:	fea43423          	sd	a0,-24(s0)
    80006022:	87ae                	mv	a5,a1
    80006024:	fef42223          	sw	a5,-28(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/metal/uart.h:60
    uart->vtable->init(uart, baud_rate);
    80006028:	fe843783          	ld	a5,-24(s0)
    8000602c:	639c                	ld	a5,0(a5)
    8000602e:	6398                	ld	a4,0(a5)
    80006030:	fe442783          	lw	a5,-28(s0)
    80006034:	85be                	mv	a1,a5
    80006036:	fe843503          	ld	a0,-24(s0)
    8000603a:	9702                	jalr	a4
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/metal/uart.h:61
}
    8000603c:	0001                	nop
    8000603e:	60e2                	ld	ra,24(sp)
    80006040:	6442                	ld	s0,16(sp)
    80006042:	6105                	addi	sp,sp,32
    80006044:	8082                	ret

0000000080006046 <metal_uart_putc>:
metal_uart_putc():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/metal/uart.h:69
 * @brief Output a character over the UART
 * @param uart The UART device handle
 * @param c The character to send over the UART
 * @return 0 upon success
 */
__inline__ int metal_uart_putc(struct metal_uart *uart, int c) {
    80006046:	1101                	addi	sp,sp,-32
    80006048:	ec06                	sd	ra,24(sp)
    8000604a:	e822                	sd	s0,16(sp)
    8000604c:	1000                	addi	s0,sp,32
    8000604e:	fea43423          	sd	a0,-24(s0)
    80006052:	87ae                	mv	a5,a1
    80006054:	fef42223          	sw	a5,-28(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/metal/uart.h:70
    return uart->vtable->putc(uart, c);
    80006058:	fe843783          	ld	a5,-24(s0)
    8000605c:	639c                	ld	a5,0(a5)
    8000605e:	6798                	ld	a4,8(a5)
    80006060:	fe442783          	lw	a5,-28(s0)
    80006064:	85be                	mv	a1,a5
    80006066:	fe843503          	ld	a0,-24(s0)
    8000606a:	9702                	jalr	a4
    8000606c:	87aa                	mv	a5,a0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/metal/uart.h:71
}
    8000606e:	853e                	mv	a0,a5
    80006070:	60e2                	ld	ra,24(sp)
    80006072:	6442                	ld	s0,16(sp)
    80006074:	6105                	addi	sp,sp,32
    80006076:	8082                	ret

0000000080006078 <metal_uart_set_baud_rate>:
metal_uart_set_baud_rate():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/metal/uart.h:111
 * @param uart The UART device handle
 * @param baud_rate The baud rate to configure
 * @return the new baud rate of the UART
 */
__inline__ int metal_uart_set_baud_rate(struct metal_uart *uart,
                                        int baud_rate) {
    80006078:	1101                	addi	sp,sp,-32
    8000607a:	ec06                	sd	ra,24(sp)
    8000607c:	e822                	sd	s0,16(sp)
    8000607e:	1000                	addi	s0,sp,32
    80006080:	fea43423          	sd	a0,-24(s0)
    80006084:	87ae                	mv	a5,a1
    80006086:	fef42223          	sw	a5,-28(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/metal/uart.h:112
    return uart->vtable->set_baud_rate(uart, baud_rate);
    8000608a:	fe843783          	ld	a5,-24(s0)
    8000608e:	639c                	ld	a5,0(a5)
    80006090:	7798                	ld	a4,40(a5)
    80006092:	fe442783          	lw	a5,-28(s0)
    80006096:	85be                	mv	a1,a5
    80006098:	fe843503          	ld	a0,-24(s0)
    8000609c:	9702                	jalr	a4
    8000609e:	87aa                	mv	a5,a0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/metal/uart.h:113
}
    800060a0:	853e                	mv	a0,a5
    800060a2:	60e2                	ld	ra,24(sp)
    800060a4:	6442                	ld	s0,16(sp)
    800060a6:	6105                	addi	sp,sp,32
    800060a8:	8082                	ret
	...

0000000080006100 <__metal_vector_table>:
IRQ_0():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/vector.S:76
#endif
.option norvc
.global __metal_vector_table
__metal_vector_table:
IRQ_0:
        j metal_interrupt_vector_handler
    80006100:	a45fc06f          	j	80002b44 <metal_interrupt_vector_handler>

0000000080006104 <IRQ_1>:
IRQ_1():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/vector.S:78
IRQ_1:
        j metal_interrupt_vector_handler
    80006104:	a41fc06f          	j	80002b44 <metal_interrupt_vector_handler>

0000000080006108 <IRQ_2>:
IRQ_2():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/vector.S:80
IRQ_2:
        j metal_interrupt_vector_handler
    80006108:	a3dfc06f          	j	80002b44 <metal_interrupt_vector_handler>

000000008000610c <IRQ_3>:
IRQ_3():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/vector.S:82
IRQ_3:
        j metal_software_interrupt_vector_handler
    8000610c:	a67fc06f          	j	80002b72 <metal_software_interrupt_vector_handler>

0000000080006110 <IRQ_4>:
IRQ_4():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/vector.S:84
IRQ_4:
        j metal_interrupt_vector_handler
    80006110:	a35fc06f          	j	80002b44 <metal_interrupt_vector_handler>

0000000080006114 <IRQ_5>:
IRQ_5():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/vector.S:86
IRQ_5:
        j metal_interrupt_vector_handler
    80006114:	a31fc06f          	j	80002b44 <metal_interrupt_vector_handler>

0000000080006118 <IRQ_6>:
IRQ_6():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/vector.S:88
IRQ_6:
        j metal_interrupt_vector_handler
    80006118:	a2dfc06f          	j	80002b44 <metal_interrupt_vector_handler>

000000008000611c <IRQ_7>:
IRQ_7():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/vector.S:90
IRQ_7:
        j metal_timer_interrupt_vector_handler
    8000611c:	b5dfc06f          	j	80002c78 <metal_timer_interrupt_vector_handler>

0000000080006120 <IRQ_8>:
IRQ_8():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/vector.S:92
IRQ_8:
        j metal_interrupt_vector_handler
    80006120:	a25fc06f          	j	80002b44 <metal_interrupt_vector_handler>

0000000080006124 <IRQ_9>:
IRQ_9():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/vector.S:94
IRQ_9:
        j metal_interrupt_vector_handler
    80006124:	a21fc06f          	j	80002b44 <metal_interrupt_vector_handler>

0000000080006128 <IRQ_10>:
IRQ_10():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/vector.S:96
IRQ_10:
        j metal_interrupt_vector_handler
    80006128:	a1dfc06f          	j	80002b44 <metal_interrupt_vector_handler>

000000008000612c <IRQ_11>:
IRQ_11():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/vector.S:98
IRQ_11:
        j metal_interrupt_vector_handler
    8000612c:	a19fc06f          	j	80002b44 <metal_interrupt_vector_handler>

0000000080006130 <IRQ_12>:
IRQ_12():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/vector.S:100
IRQ_12:
        j metal_interrupt_vector_handler
    80006130:	a15fc06f          	j	80002b44 <metal_interrupt_vector_handler>

0000000080006134 <IRQ_13>:
IRQ_13():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/vector.S:102
IRQ_13:
        j metal_interrupt_vector_handler
    80006134:	a11fc06f          	j	80002b44 <metal_interrupt_vector_handler>

0000000080006138 <IRQ_14>:
IRQ_14():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/vector.S:104
IRQ_14:
        j metal_interrupt_vector_handler
    80006138:	a0dfc06f          	j	80002b44 <metal_interrupt_vector_handler>

000000008000613c <IRQ_15>:
IRQ_15():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/vector.S:106
IRQ_15:
        j metal_interrupt_vector_handler
    8000613c:	a09fc06f          	j	80002b44 <metal_interrupt_vector_handler>

0000000080006140 <IRQ_LC0>:
IRQ_LC0():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/vector.S:108
IRQ_LC0:
        j metal_lc0_interrupt_vector_handler
    80006140:	e3bfc06f          	j	80002f7a <metal_lc0_interrupt_vector_handler>

0000000080006144 <IRQ_LC1>:
IRQ_LC1():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/vector.S:110
IRQ_LC1:
        j metal_lc1_interrupt_vector_handler
    80006144:	ecdfc06f          	j	80003010 <metal_lc1_interrupt_vector_handler>

0000000080006148 <IRQ_LC2>:
IRQ_LC2():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/vector.S:112
IRQ_LC2:
        j metal_lc2_interrupt_vector_handler
    80006148:	f5ffc06f          	j	800030a6 <metal_lc2_interrupt_vector_handler>

000000008000614c <IRQ_LC3>:
IRQ_LC3():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/vector.S:114
IRQ_LC3:
        j metal_lc3_interrupt_vector_handler
    8000614c:	ff1fc06f          	j	8000313c <metal_lc3_interrupt_vector_handler>

0000000080006150 <IRQ_LC4>:
IRQ_LC4():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/vector.S:116
IRQ_LC4:
        j metal_lc4_interrupt_vector_handler
    80006150:	882fd06f          	j	800031d2 <metal_lc4_interrupt_vector_handler>

0000000080006154 <IRQ_LC5>:
IRQ_LC5():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/vector.S:118
IRQ_LC5:
        j metal_lc5_interrupt_vector_handler
    80006154:	914fd06f          	j	80003268 <metal_lc5_interrupt_vector_handler>

0000000080006158 <IRQ_LC6>:
IRQ_LC6():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/vector.S:120
IRQ_LC6:
        j metal_lc6_interrupt_vector_handler
    80006158:	9a6fd06f          	j	800032fe <metal_lc6_interrupt_vector_handler>

000000008000615c <IRQ_LC7>:
IRQ_LC7():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/vector.S:122
IRQ_LC7:
        j metal_lc7_interrupt_vector_handler
    8000615c:	a38fd06f          	j	80003394 <metal_lc7_interrupt_vector_handler>

0000000080006160 <IRQ_LC8>:
IRQ_LC8():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/vector.S:124
IRQ_LC8:
        j metal_lc8_interrupt_vector_handler
    80006160:	acafd06f          	j	8000342a <metal_lc8_interrupt_vector_handler>

0000000080006164 <IRQ_LC9>:
IRQ_LC9():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/vector.S:126
IRQ_LC9:
        j metal_lc9_interrupt_vector_handler
    80006164:	b5cfd06f          	j	800034c0 <metal_lc9_interrupt_vector_handler>

0000000080006168 <IRQ_LC10>:
IRQ_LC10():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/vector.S:128
IRQ_LC10:
        j metal_lc10_interrupt_vector_handler
    80006168:	beefd06f          	j	80003556 <metal_lc10_interrupt_vector_handler>

000000008000616c <IRQ_LC11>:
IRQ_LC11():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/vector.S:130
IRQ_LC11:
        j metal_lc11_interrupt_vector_handler
    8000616c:	c80fd06f          	j	800035ec <metal_lc11_interrupt_vector_handler>

0000000080006170 <IRQ_LC12>:
IRQ_LC12():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/vector.S:132
IRQ_LC12:
        j metal_lc12_interrupt_vector_handler
    80006170:	d12fd06f          	j	80003682 <metal_lc12_interrupt_vector_handler>

0000000080006174 <IRQ_LC13>:
IRQ_LC13():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/vector.S:134
IRQ_LC13:
        j metal_lc13_interrupt_vector_handler
    80006174:	da4fd06f          	j	80003718 <metal_lc13_interrupt_vector_handler>

0000000080006178 <IRQ_LC14>:
IRQ_LC14():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/vector.S:136
IRQ_LC14:
        j metal_lc14_interrupt_vector_handler
    80006178:	e36fd06f          	j	800037ae <metal_lc14_interrupt_vector_handler>

000000008000617c <IRQ_LC15>:
IRQ_LC15():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/vector.S:138
IRQ_LC15:
        j metal_lc15_interrupt_vector_handler
    8000617c:	ec8fd06f          	j	80003844 <metal_lc15_interrupt_vector_handler>
	...

0000000080006200 <__metal_driver_fixed_clock_rate>:
__metal_driver_fixed_clock_rate():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:131
{
    80006200:	1101                	addi	sp,sp,-32
    80006202:	ec22                	sd	s0,24(sp)
    80006204:	1000                	addi	s0,sp,32
    80006206:	fea43423          	sd	a0,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:132
	if ((uintptr_t)clock == (uintptr_t)&__metal_dt_subsystem_mbus_clock) {
    8000620a:	fe843703          	ld	a4,-24(s0)
    8000620e:	00000797          	auipc	a5,0x0
    80006212:	72278793          	addi	a5,a5,1826 # 80006930 <__metal_dt_subsystem_mbus_clock>
    80006216:	00f71763          	bne	a4,a5,80006224 <__metal_driver_fixed_clock_rate+0x24>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:133
		return METAL_FIXED_CLOCK__SUBSYSTEM_MBUS_CLOCK_CLOCK_FREQUENCY;
    8000621a:	02faf7b7          	lui	a5,0x2faf
    8000621e:	08078793          	addi	a5,a5,128 # 2faf080 <__heap_size+0x2fae880>
    80006222:	a839                	j	80006240 <__metal_driver_fixed_clock_rate+0x40>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:135
	else if ((uintptr_t)clock == (uintptr_t)&__metal_dt_subsystem_pbus_clock) {
    80006224:	fe843703          	ld	a4,-24(s0)
    80006228:	00000797          	auipc	a5,0x0
    8000622c:	72078793          	addi	a5,a5,1824 # 80006948 <__metal_dt_subsystem_pbus_clock>
    80006230:	00f71763          	bne	a4,a5,8000623e <__metal_driver_fixed_clock_rate+0x3e>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:136
		return METAL_FIXED_CLOCK__SUBSYSTEM_PBUS_CLOCK_CLOCK_FREQUENCY;
    80006234:	02faf7b7          	lui	a5,0x2faf
    80006238:	08078793          	addi	a5,a5,128 # 2faf080 <__heap_size+0x2fae880>
    8000623c:	a011                	j	80006240 <__metal_driver_fixed_clock_rate+0x40>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:139
		return 0;
    8000623e:	4781                	li	a5,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/bsp/arty_a7_100t/build/debug/./metal/machine.h:141
}
    80006240:	853e                	mv	a0,a5
    80006242:	6462                	ld	s0,24(sp)
    80006244:	6105                	addi	sp,sp,32
    80006246:	8082                	ret

0000000080006248 <__metal_driver_fixed_clock_get_rate_hz>:
__metal_driver_fixed_clock_get_rate_hz():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:12

#include <metal/drivers/fixed-clock.h>
#include <metal/machine.h>
#include <stddef.h>

long __metal_driver_fixed_clock_get_rate_hz(const struct metal_clock *gclk) {
    80006248:	1101                	addi	sp,sp,-32
    8000624a:	ec06                	sd	ra,24(sp)
    8000624c:	e822                	sd	s0,16(sp)
    8000624e:	1000                	addi	s0,sp,32
    80006250:	fea43423          	sd	a0,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:13
    return __metal_driver_fixed_clock_rate(gclk);
    80006254:	fe843503          	ld	a0,-24(s0)
    80006258:	fa9ff0ef          	jal	ra,80006200 <__metal_driver_fixed_clock_rate>
    8000625c:	87aa                	mv	a5,a0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:14
}
    8000625e:	853e                	mv	a0,a5
    80006260:	60e2                	ld	ra,24(sp)
    80006262:	6442                	ld	s0,16(sp)
    80006264:	6105                	addi	sp,sp,32
    80006266:	8082                	ret

0000000080006268 <__metal_driver_fixed_clock_set_rate_hz>:
__metal_driver_fixed_clock_set_rate_hz():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:17

long __metal_driver_fixed_clock_set_rate_hz(struct metal_clock *gclk,
                                            long target_hz) {
    80006268:	1101                	addi	sp,sp,-32
    8000626a:	ec06                	sd	ra,24(sp)
    8000626c:	e822                	sd	s0,16(sp)
    8000626e:	1000                	addi	s0,sp,32
    80006270:	fea43423          	sd	a0,-24(s0)
    80006274:	feb43023          	sd	a1,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:18
    return __metal_driver_fixed_clock_get_rate_hz(gclk);
    80006278:	fe843503          	ld	a0,-24(s0)
    8000627c:	fcdff0ef          	jal	ra,80006248 <__metal_driver_fixed_clock_get_rate_hz>
    80006280:	87aa                	mv	a5,a0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:19
}
    80006282:	853e                	mv	a0,a5
    80006284:	60e2                	ld	ra,24(sp)
    80006286:	6442                	ld	s0,16(sp)
    80006288:	6105                	addi	sp,sp,32
    8000628a:	8082                	ret

000000008000628c <metal_timer_get_cyclecount>:
metal_timer_get_cyclecount():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/timer.c:15
#endif

#if defined(__METAL_DT_MAX_HARTS)
/* This implementation serves as a small shim that interfaces with the first
 * timer on a system. */
int metal_timer_get_cyclecount(int hartid, unsigned long long *mcc) {
    8000628c:	7179                	addi	sp,sp,-48
    8000628e:	f406                	sd	ra,40(sp)
    80006290:	f022                	sd	s0,32(sp)
    80006292:	1800                	addi	s0,sp,48
    80006294:	87aa                	mv	a5,a0
    80006296:	fcb43823          	sd	a1,-48(s0)
    8000629a:	fcf42e23          	sw	a5,-36(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/timer.c:16
    struct metal_cpu *cpu = metal_cpu_get(hartid);
    8000629e:	fdc42783          	lw	a5,-36(s0)
    800062a2:	853e                	mv	a0,a5
    800062a4:	b13ff0ef          	jal	ra,80005db6 <metal_cpu_get>
    800062a8:	fea43423          	sd	a0,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/timer.c:18

    if (cpu) {
    800062ac:	fe843783          	ld	a5,-24(s0)
    800062b0:	cb99                	beqz	a5,800062c6 <metal_timer_get_cyclecount+0x3a>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/timer.c:19
        *mcc = metal_cpu_get_timer(cpu);
    800062b2:	fe843503          	ld	a0,-24(s0)
    800062b6:	a8fff0ef          	jal	ra,80005d44 <metal_cpu_get_timer>
    800062ba:	872a                	mv	a4,a0
    800062bc:	fd043783          	ld	a5,-48(s0)
    800062c0:	e398                	sd	a4,0(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/timer.c:20
        return 0;
    800062c2:	4781                	li	a5,0
    800062c4:	a011                	j	800062c8 <metal_timer_get_cyclecount+0x3c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/timer.c:22
    }
    return -1;
    800062c6:	57fd                	li	a5,-1
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/timer.c:23
}
    800062c8:	853e                	mv	a0,a5
    800062ca:	70a2                	ld	ra,40(sp)
    800062cc:	7402                	ld	s0,32(sp)
    800062ce:	6145                	addi	sp,sp,48
    800062d0:	8082                	ret

00000000800062d2 <metal_timer_get_timebase_frequency>:
metal_timer_get_timebase_frequency():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/timer.c:26

int metal_timer_get_timebase_frequency(int hartid,
                                       unsigned long long *timebase) {
    800062d2:	7179                	addi	sp,sp,-48
    800062d4:	f406                	sd	ra,40(sp)
    800062d6:	f022                	sd	s0,32(sp)
    800062d8:	1800                	addi	s0,sp,48
    800062da:	87aa                	mv	a5,a0
    800062dc:	fcb43823          	sd	a1,-48(s0)
    800062e0:	fcf42e23          	sw	a5,-36(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/timer.c:27
    struct metal_cpu *cpu = metal_cpu_get(hartid);
    800062e4:	fdc42783          	lw	a5,-36(s0)
    800062e8:	853e                	mv	a0,a5
    800062ea:	acdff0ef          	jal	ra,80005db6 <metal_cpu_get>
    800062ee:	fea43423          	sd	a0,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/timer.c:29

    if (cpu) {
    800062f2:	fe843783          	ld	a5,-24(s0)
    800062f6:	cb99                	beqz	a5,8000630c <metal_timer_get_timebase_frequency+0x3a>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/timer.c:30
        *timebase = metal_cpu_get_timebase(cpu);
    800062f8:	fe843503          	ld	a0,-24(s0)
    800062fc:	a6fff0ef          	jal	ra,80005d6a <metal_cpu_get_timebase>
    80006300:	872a                	mv	a4,a0
    80006302:	fd043783          	ld	a5,-48(s0)
    80006306:	e398                	sd	a4,0(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/timer.c:31
        return 0;
    80006308:	4781                	li	a5,0
    8000630a:	a011                	j	8000630e <metal_timer_get_timebase_frequency+0x3c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/timer.c:33
    }
    return -1;
    8000630c:	57fd                	li	a5,-1
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/timer.c:34
}
    8000630e:	853e                	mv	a0,a5
    80006310:	70a2                	ld	ra,40(sp)
    80006312:	7402                	ld	s0,32(sp)
    80006314:	6145                	addi	sp,sp,48
    80006316:	8082                	ret

0000000080006318 <_close>:
_close():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/sys_close.c:3
#include <errno.h>

int _close(int file) {
    80006318:	1101                	addi	sp,sp,-32
    8000631a:	ec06                	sd	ra,24(sp)
    8000631c:	e822                	sd	s0,16(sp)
    8000631e:	1000                	addi	s0,sp,32
    80006320:	87aa                	mv	a5,a0
    80006322:	fef42623          	sw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/sys_close.c:4
    errno = ENOSYS;
    80006326:	1ca000ef          	jal	ra,800064f0 <__errno>
    8000632a:	872a                	mv	a4,a0
    8000632c:	05800793          	li	a5,88
    80006330:	c31c                	sw	a5,0(a4)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/sys_close.c:5
    return -1;
    80006332:	57fd                	li	a5,-1
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/sys_close.c:6
}
    80006334:	853e                	mv	a0,a5
    80006336:	60e2                	ld	ra,24(sp)
    80006338:	6442                	ld	s0,16(sp)
    8000633a:	6105                	addi	sp,sp,32
    8000633c:	8082                	ret

000000008000633e <_fstat>:
_fstat():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:4
#include <errno.h>
#include <sys/stat.h>

int _fstat(int file, struct stat *st) {
    8000633e:	1101                	addi	sp,sp,-32
    80006340:	ec06                	sd	ra,24(sp)
    80006342:	e822                	sd	s0,16(sp)
    80006344:	1000                	addi	s0,sp,32
    80006346:	87aa                	mv	a5,a0
    80006348:	feb43023          	sd	a1,-32(s0)
    8000634c:	fef42623          	sw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:5
    errno = -ENOSYS;
    80006350:	1a0000ef          	jal	ra,800064f0 <__errno>
    80006354:	872a                	mv	a4,a0
    80006356:	fa800793          	li	a5,-88
    8000635a:	c31c                	sw	a5,0(a4)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:6
    return -1;
    8000635c:	57fd                	li	a5,-1
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:7
}
    8000635e:	853e                	mv	a0,a5
    80006360:	60e2                	ld	ra,24(sp)
    80006362:	6442                	ld	s0,16(sp)
    80006364:	6105                	addi	sp,sp,32
    80006366:	8082                	ret

0000000080006368 <_isatty>:
_isatty():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:3
#include <unistd.h>

int _isatty(int file) { return (file == STDOUT_FILENO); }
    80006368:	1101                	addi	sp,sp,-32
    8000636a:	ec22                	sd	s0,24(sp)
    8000636c:	1000                	addi	s0,sp,32
    8000636e:	87aa                	mv	a5,a0
    80006370:	fef42623          	sw	a5,-20(s0)
    80006374:	fec42783          	lw	a5,-20(s0)
    80006378:	0007871b          	sext.w	a4,a5
    8000637c:	4785                	li	a5,1
    8000637e:	40f707b3          	sub	a5,a4,a5
    80006382:	0017b793          	seqz	a5,a5
    80006386:	0ff7f793          	andi	a5,a5,255
    8000638a:	2781                	sext.w	a5,a5
    8000638c:	853e                	mv	a0,a5
    8000638e:	6462                	ld	s0,24(sp)
    80006390:	6105                	addi	sp,sp,32
    80006392:	8082                	ret

0000000080006394 <_lseek>:
_lseek():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:4
#include <errno.h>
#include <sys/types.h>

off_t _lseek(int file, off_t ptr, int dir) {
    80006394:	1101                	addi	sp,sp,-32
    80006396:	ec06                	sd	ra,24(sp)
    80006398:	e822                	sd	s0,16(sp)
    8000639a:	1000                	addi	s0,sp,32
    8000639c:	87aa                	mv	a5,a0
    8000639e:	feb43023          	sd	a1,-32(s0)
    800063a2:	8732                	mv	a4,a2
    800063a4:	fef42623          	sw	a5,-20(s0)
    800063a8:	87ba                	mv	a5,a4
    800063aa:	fef42423          	sw	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:5
    errno = ENOSYS;
    800063ae:	142000ef          	jal	ra,800064f0 <__errno>
    800063b2:	872a                	mv	a4,a0
    800063b4:	05800793          	li	a5,88
    800063b8:	c31c                	sw	a5,0(a4)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:6
    return -1;
    800063ba:	57fd                	li	a5,-1
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:7
}
    800063bc:	853e                	mv	a0,a5
    800063be:	60e2                	ld	ra,24(sp)
    800063c0:	6442                	ld	s0,16(sp)
    800063c2:	6105                	addi	sp,sp,32
    800063c4:	8082                	ret

00000000800063c6 <_read>:
_read():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/sys_read.c:4
#include <errno.h>
#include <sys/types.h>

ssize_t _read(int file, void *ptr, size_t len) {
    800063c6:	7179                	addi	sp,sp,-48
    800063c8:	f406                	sd	ra,40(sp)
    800063ca:	f022                	sd	s0,32(sp)
    800063cc:	1800                	addi	s0,sp,48
    800063ce:	87aa                	mv	a5,a0
    800063d0:	feb43023          	sd	a1,-32(s0)
    800063d4:	fcc43c23          	sd	a2,-40(s0)
    800063d8:	fef42623          	sw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/sys_read.c:5
    errno = ENOSYS;
    800063dc:	114000ef          	jal	ra,800064f0 <__errno>
    800063e0:	872a                	mv	a4,a0
    800063e2:	05800793          	li	a5,88
    800063e6:	c31c                	sw	a5,0(a4)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/sys_read.c:6
    return -1;
    800063e8:	57fd                	li	a5,-1
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/sys_read.c:7
}
    800063ea:	853e                	mv	a0,a5
    800063ec:	70a2                	ld	ra,40(sp)
    800063ee:	7402                	ld	s0,32(sp)
    800063f0:	6145                	addi	sp,sp,48
    800063f2:	8082                	ret

00000000800063f4 <_sbrk>:
_sbrk():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:24
int _brk(void *addr) {
    __brk = addr;
    return 0;
}

char *_sbrk(ptrdiff_t incr) {
    800063f4:	7179                	addi	sp,sp,-48
    800063f6:	f406                	sd	ra,40(sp)
    800063f8:	f022                	sd	s0,32(sp)
    800063fa:	1800                	addi	s0,sp,48
    800063fc:	fca43c23          	sd	a0,-40(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:25
    char *old = __brk;
    80006400:	82018793          	addi	a5,gp,-2016 # 80007588 <__brk>
    80006404:	639c                	ld	a5,0(a5)
    80006406:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:28

    /* If __heap_size == 0, we can't allocate memory on the heap */
    if (&metal_segment_heap_target_start == &metal_segment_heap_target_end) {
    8000640a:	d6818713          	addi	a4,gp,-664 # 80007ad0 <_sp>
    8000640e:	56818793          	addi	a5,gp,1384 # 800082d0 <metal_segment_heap_target_end>
    80006412:	00f71463          	bne	a4,a5,8000641a <_sbrk+0x26>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:29
        return (void *)-1;
    80006416:	57fd                	li	a5,-1
    80006418:	a0a9                	j	80006462 <_sbrk+0x6e>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:33
    }

    /* Don't move the break past the end of the heap */
    if ((__brk + incr) < &metal_segment_heap_target_end) {
    8000641a:	82018793          	addi	a5,gp,-2016 # 80007588 <__brk>
    8000641e:	6398                	ld	a4,0(a5)
    80006420:	fd843783          	ld	a5,-40(s0)
    80006424:	973e                	add	a4,a4,a5
    80006426:	56818793          	addi	a5,gp,1384 # 800082d0 <metal_segment_heap_target_end>
    8000642a:	02f77663          	bgeu	a4,a5,80006456 <_sbrk+0x62>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:34
        __brk += incr;
    8000642e:	82018793          	addi	a5,gp,-2016 # 80007588 <__brk>
    80006432:	6398                	ld	a4,0(a5)
    80006434:	fd843783          	ld	a5,-40(s0)
    80006438:	973e                	add	a4,a4,a5
    8000643a:	82018793          	addi	a5,gp,-2016 # 80007588 <__brk>
    8000643e:	e398                	sd	a4,0(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:40
    } else {
        __brk = &metal_segment_heap_target_end;
        return (void *)-1;
    }
    /* Scrub out allocated memory to avoid spurious ECC errors */
    metal_mem_scrub(old, incr);
    80006440:	fd843783          	ld	a5,-40(s0)
    80006444:	2781                	sext.w	a5,a5
    80006446:	85be                	mv	a1,a5
    80006448:	fe843503          	ld	a0,-24(s0)
    8000644c:	c49f90ef          	jal	ra,80000094 <metal_mem_scrub>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:42

    return old;
    80006450:	fe843783          	ld	a5,-24(s0)
    80006454:	a039                	j	80006462 <_sbrk+0x6e>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:36
        __brk = &metal_segment_heap_target_end;
    80006456:	82018793          	addi	a5,gp,-2016 # 80007588 <__brk>
    8000645a:	56818713          	addi	a4,gp,1384 # 800082d0 <metal_segment_heap_target_end>
    8000645e:	e398                	sd	a4,0(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:37
        return (void *)-1;
    80006460:	57fd                	li	a5,-1
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:43
}
    80006462:	853e                	mv	a0,a5
    80006464:	70a2                	ld	ra,40(sp)
    80006466:	7402                	ld	s0,32(sp)
    80006468:	6145                	addi	sp,sp,48
    8000646a:	8082                	ret

000000008000646c <_write>:
_write():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/sys_write.c:7
#include <metal/tty.h>
#include <sys/types.h>
#include <unistd.h>

/* Write to a file.  */
ssize_t _write(int file, const void *ptr, size_t len) {
    8000646c:	7139                	addi	sp,sp,-64
    8000646e:	fc06                	sd	ra,56(sp)
    80006470:	f822                	sd	s0,48(sp)
    80006472:	0080                	addi	s0,sp,64
    80006474:	87aa                	mv	a5,a0
    80006476:	fcb43823          	sd	a1,-48(s0)
    8000647a:	fcc43423          	sd	a2,-56(s0)
    8000647e:	fcf42e23          	sw	a5,-36(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/sys_write.c:8
    if (file != STDOUT_FILENO) {
    80006482:	fdc42783          	lw	a5,-36(s0)
    80006486:	0007871b          	sext.w	a4,a5
    8000648a:	4785                	li	a5,1
    8000648c:	00f70a63          	beq	a4,a5,800064a0 <_write+0x34>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/sys_write.c:9
        errno = ENOSYS;
    80006490:	060000ef          	jal	ra,800064f0 <__errno>
    80006494:	872a                	mv	a4,a0
    80006496:	05800793          	li	a5,88
    8000649a:	c31c                	sw	a5,0(a4)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/sys_write.c:10
        return -1;
    8000649c:	57fd                	li	a5,-1
    8000649e:	a83d                	j	800064dc <_write+0x70>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/sys_write.c:13
    }

    const char *bptr = ptr;
    800064a0:	fd043783          	ld	a5,-48(s0)
    800064a4:	fef43023          	sd	a5,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/sys_write.c:14
    for (size_t i = 0; i < len; ++i)
    800064a8:	fe043423          	sd	zero,-24(s0)
    800064ac:	a00d                	j	800064ce <_write+0x62>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/sys_write.c:15 (discriminator 3)
        metal_tty_putc(bptr[i]);
    800064ae:	fe043703          	ld	a4,-32(s0)
    800064b2:	fe843783          	ld	a5,-24(s0)
    800064b6:	97ba                	add	a5,a5,a4
    800064b8:	0007c783          	lbu	a5,0(a5)
    800064bc:	2781                	sext.w	a5,a5
    800064be:	853e                	mv	a0,a5
    800064c0:	378000ef          	jal	ra,80006838 <metal_tty_putc>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/sys_write.c:14 (discriminator 3)
    for (size_t i = 0; i < len; ++i)
    800064c4:	fe843783          	ld	a5,-24(s0)
    800064c8:	0785                	addi	a5,a5,1
    800064ca:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/sys_write.c:14 (discriminator 1)
    800064ce:	fe843703          	ld	a4,-24(s0)
    800064d2:	fc843783          	ld	a5,-56(s0)
    800064d6:	fcf76ce3          	bltu	a4,a5,800064ae <_write+0x42>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16
    return 0;
    800064da:	4781                	li	a5,0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/sys_write.c:17
}
    800064dc:	853e                	mv	a0,a5
    800064de:	70e2                	ld	ra,56(sp)
    800064e0:	7442                	ld	s0,48(sp)
    800064e2:	6121                	addi	sp,sp,64
    800064e4:	8082                	ret

00000000800064e6 <atexit>:
atexit():
    800064e6:	85aa                	mv	a1,a0
    800064e8:	4681                	li	a3,0
    800064ea:	4601                	li	a2,0
    800064ec:	4501                	li	a0,0
    800064ee:	a8d9                	j	800065c4 <__register_exitproc>

00000000800064f0 <__errno>:
__errno():
    800064f0:	81018793          	addi	a5,gp,-2032 # 80007578 <_impure_ptr>
    800064f4:	6388                	ld	a0,0(a5)
    800064f6:	8082                	ret

00000000800064f8 <exit>:
exit():
    800064f8:	1141                	addi	sp,sp,-16
    800064fa:	e022                	sd	s0,0(sp)
    800064fc:	e406                	sd	ra,8(sp)
    800064fe:	00000797          	auipc	a5,0x0
    80006502:	15078793          	addi	a5,a5,336 # 8000664e <__call_exitprocs>
    80006506:	842a                	mv	s0,a0
    80006508:	c781                	beqz	a5,80006510 <exit+0x18>
    8000650a:	4581                	li	a1,0
    8000650c:	142000ef          	jal	ra,8000664e <__call_exitprocs>
    80006510:	81818793          	addi	a5,gp,-2024 # 80007580 <_global_impure_ptr>
    80006514:	6388                	ld	a0,0(a5)
    80006516:	653c                	ld	a5,72(a0)
    80006518:	c391                	beqz	a5,8000651c <exit+0x24>
    8000651a:	9782                	jalr	a5
    8000651c:	8522                	mv	a0,s0
    8000651e:	346000ef          	jal	ra,80006864 <_exit>

0000000080006522 <__libc_fini_array>:
__libc_fini_array():
    80006522:	1101                	addi	sp,sp,-32
    80006524:	ffffa797          	auipc	a5,0xffffa
    80006528:	dc478793          	addi	a5,a5,-572 # 800002e8 <__fini_array_end>
    8000652c:	e822                	sd	s0,16(sp)
    8000652e:	ffffa417          	auipc	s0,0xffffa
    80006532:	dba40413          	addi	s0,s0,-582 # 800002e8 <__fini_array_end>
    80006536:	8c1d                	sub	s0,s0,a5
    80006538:	e426                	sd	s1,8(sp)
    8000653a:	ec06                	sd	ra,24(sp)
    8000653c:	840d                	srai	s0,s0,0x3
    8000653e:	84be                	mv	s1,a5
    80006540:	e411                	bnez	s0,8000654c <__libc_fini_array+0x2a>
    80006542:	60e2                	ld	ra,24(sp)
    80006544:	6442                	ld	s0,16(sp)
    80006546:	64a2                	ld	s1,8(sp)
    80006548:	6105                	addi	sp,sp,32
    8000654a:	8082                	ret
    8000654c:	147d                	addi	s0,s0,-1
    8000654e:	00341793          	slli	a5,s0,0x3
    80006552:	97a6                	add	a5,a5,s1
    80006554:	639c                	ld	a5,0(a5)
    80006556:	9782                	jalr	a5
    80006558:	b7e5                	j	80006540 <__libc_fini_array+0x1e>

000000008000655a <__libc_init_array>:
__libc_init_array():
    8000655a:	1101                	addi	sp,sp,-32
    8000655c:	ffffa797          	auipc	a5,0xffffa
    80006560:	d8478793          	addi	a5,a5,-636 # 800002e0 <_metal_tty_init_ptr>
    80006564:	e822                	sd	s0,16(sp)
    80006566:	ffffa417          	auipc	s0,0xffffa
    8000656a:	d7a40413          	addi	s0,s0,-646 # 800002e0 <_metal_tty_init_ptr>
    8000656e:	8c1d                	sub	s0,s0,a5
    80006570:	e426                	sd	s1,8(sp)
    80006572:	e04a                	sd	s2,0(sp)
    80006574:	ec06                	sd	ra,24(sp)
    80006576:	840d                	srai	s0,s0,0x3
    80006578:	4481                	li	s1,0
    8000657a:	893e                	mv	s2,a5
    8000657c:	02849663          	bne	s1,s0,800065a8 <__libc_init_array+0x4e>
    80006580:	ffffa797          	auipc	a5,0xffffa
    80006584:	d6078793          	addi	a5,a5,-672 # 800002e0 <_metal_tty_init_ptr>
    80006588:	ffffa417          	auipc	s0,0xffffa
    8000658c:	d5840413          	addi	s0,s0,-680 # 800002e0 <_metal_tty_init_ptr>
    80006590:	8c1d                	sub	s0,s0,a5
    80006592:	840d                	srai	s0,s0,0x3
    80006594:	4481                	li	s1,0
    80006596:	893e                	mv	s2,a5
    80006598:	00849f63          	bne	s1,s0,800065b6 <__libc_init_array+0x5c>
    8000659c:	60e2                	ld	ra,24(sp)
    8000659e:	6442                	ld	s0,16(sp)
    800065a0:	64a2                	ld	s1,8(sp)
    800065a2:	6902                	ld	s2,0(sp)
    800065a4:	6105                	addi	sp,sp,32
    800065a6:	8082                	ret
    800065a8:	00349793          	slli	a5,s1,0x3
    800065ac:	97ca                	add	a5,a5,s2
    800065ae:	639c                	ld	a5,0(a5)
    800065b0:	0485                	addi	s1,s1,1
    800065b2:	9782                	jalr	a5
    800065b4:	b7e1                	j	8000657c <__libc_init_array+0x22>
    800065b6:	00349793          	slli	a5,s1,0x3
    800065ba:	97ca                	add	a5,a5,s2
    800065bc:	639c                	ld	a5,0(a5)
    800065be:	0485                	addi	s1,s1,1
    800065c0:	9782                	jalr	a5
    800065c2:	bfd9                	j	80006598 <__libc_init_array+0x3e>

00000000800065c4 <__register_exitproc>:
__register_exitproc():
    800065c4:	00001797          	auipc	a5,0x1
    800065c8:	fdc78793          	addi	a5,a5,-36 # 800075a0 <_global_atexit>
    800065cc:	639c                	ld	a5,0(a5)
    800065ce:	8e2a                	mv	t3,a0
    800065d0:	e39d                	bnez	a5,800065f6 <__register_exitproc+0x32>
    800065d2:	00001717          	auipc	a4,0x1
    800065d6:	fde70713          	addi	a4,a4,-34 # 800075b0 <_global_atexit0>
    800065da:	00001797          	auipc	a5,0x1
    800065de:	fce7b323          	sd	a4,-58(a5) # 800075a0 <_global_atexit>
    800065e2:	00000537          	lui	a0,0x0
    800065e6:	00050513          	mv	a0,a0
    800065ea:	87ba                	mv	a5,a4
    800065ec:	c509                	beqz	a0,800065f6 <__register_exitproc+0x32>
    800065ee:	611c                	ld	a5,0(a0)
    800065f0:	94f1bc23          	sd	a5,-1704(gp) # 800076c0 <_global_atexit0+0x110>
    800065f4:	87ba                	mv	a5,a4
    800065f6:	4798                	lw	a4,8(a5)
    800065f8:	487d                	li	a6,31
    800065fa:	557d                	li	a0,-1
    800065fc:	04e84863          	blt	a6,a4,8000664c <__register_exitproc+0x88>
    80006600:	020e0e63          	beqz	t3,8000663c <__register_exitproc+0x78>
    80006604:	1107b803          	ld	a6,272(a5)
    80006608:	04080263          	beqz	a6,8000664c <__register_exitproc+0x88>
    8000660c:	00371893          	slli	a7,a4,0x3
    80006610:	98c2                	add	a7,a7,a6
    80006612:	00c8b023          	sd	a2,0(a7)
    80006616:	20082303          	lw	t1,512(a6)
    8000661a:	4605                	li	a2,1
    8000661c:	00e6163b          	sllw	a2,a2,a4
    80006620:	00c36333          	or	t1,t1,a2
    80006624:	20682023          	sw	t1,512(a6)
    80006628:	10d8b023          	sd	a3,256(a7)
    8000662c:	4689                	li	a3,2
    8000662e:	00de1763          	bne	t3,a3,8000663c <__register_exitproc+0x78>
    80006632:	20482683          	lw	a3,516(a6)
    80006636:	8e55                	or	a2,a2,a3
    80006638:	20c82223          	sw	a2,516(a6)
    8000663c:	0017069b          	addiw	a3,a4,1
    80006640:	0709                	addi	a4,a4,2
    80006642:	070e                	slli	a4,a4,0x3
    80006644:	c794                	sw	a3,8(a5)
    80006646:	97ba                	add	a5,a5,a4
    80006648:	e38c                	sd	a1,0(a5)
    8000664a:	4501                	li	a0,0
    8000664c:	8082                	ret

000000008000664e <__call_exitprocs>:
__call_exitprocs():
    8000664e:	715d                	addi	sp,sp,-80
    80006650:	f44e                	sd	s3,40(sp)
    80006652:	f052                	sd	s4,32(sp)
    80006654:	ec56                	sd	s5,24(sp)
    80006656:	e85a                	sd	s6,16(sp)
    80006658:	e486                	sd	ra,72(sp)
    8000665a:	e0a2                	sd	s0,64(sp)
    8000665c:	fc26                	sd	s1,56(sp)
    8000665e:	f84a                	sd	s2,48(sp)
    80006660:	e45e                	sd	s7,8(sp)
    80006662:	8aaa                	mv	s5,a0
    80006664:	89ae                	mv	s3,a1
    80006666:	00001a17          	auipc	s4,0x1
    8000666a:	f3aa0a13          	addi	s4,s4,-198 # 800075a0 <_global_atexit>
    8000666e:	4b05                	li	s6,1
    80006670:	000a3403          	ld	s0,0(s4)
    80006674:	c809                	beqz	s0,80006686 <__call_exitprocs+0x38>
    80006676:	4404                	lw	s1,8(s0)
    80006678:	11043903          	ld	s2,272(s0)
    8000667c:	34fd                	addiw	s1,s1,-1
    8000667e:	0004879b          	sext.w	a5,s1
    80006682:	0007dd63          	bgez	a5,8000669c <__call_exitprocs+0x4e>
    80006686:	60a6                	ld	ra,72(sp)
    80006688:	6406                	ld	s0,64(sp)
    8000668a:	74e2                	ld	s1,56(sp)
    8000668c:	7942                	ld	s2,48(sp)
    8000668e:	79a2                	ld	s3,40(sp)
    80006690:	7a02                	ld	s4,32(sp)
    80006692:	6ae2                	ld	s5,24(sp)
    80006694:	6b42                	ld	s6,16(sp)
    80006696:	6ba2                	ld	s7,8(sp)
    80006698:	6161                	addi	sp,sp,80
    8000669a:	8082                	ret
    8000669c:	00098d63          	beqz	s3,800066b6 <__call_exitprocs+0x68>
    800066a0:	00091463          	bnez	s2,800066a8 <__call_exitprocs+0x5a>
    800066a4:	14fd                	addi	s1,s1,-1
    800066a6:	bfe1                	j	8000667e <__call_exitprocs+0x30>
    800066a8:	00349713          	slli	a4,s1,0x3
    800066ac:	974a                	add	a4,a4,s2
    800066ae:	10073703          	ld	a4,256(a4)
    800066b2:	ff3719e3          	bne	a4,s3,800066a4 <__call_exitprocs+0x56>
    800066b6:	4418                	lw	a4,8(s0)
    800066b8:	00349613          	slli	a2,s1,0x3
    800066bc:	00c405b3          	add	a1,s0,a2
    800066c0:	377d                	addiw	a4,a4,-1
    800066c2:	6994                	ld	a3,16(a1)
    800066c4:	02f71863          	bne	a4,a5,800066f4 <__call_exitprocs+0xa6>
    800066c8:	c41c                	sw	a5,8(s0)
    800066ca:	dee9                	beqz	a3,800066a4 <__call_exitprocs+0x56>
    800066cc:	00842b83          	lw	s7,8(s0)
    800066d0:	00090963          	beqz	s2,800066e2 <__call_exitprocs+0x94>
    800066d4:	20092703          	lw	a4,512(s2)
    800066d8:	00fb17bb          	sllw	a5,s6,a5
    800066dc:	8f7d                	and	a4,a4,a5
    800066de:	2701                	sext.w	a4,a4
    800066e0:	ef09                	bnez	a4,800066fa <__call_exitprocs+0xac>
    800066e2:	9682                	jalr	a3
    800066e4:	4418                	lw	a4,8(s0)
    800066e6:	000a3783          	ld	a5,0(s4)
    800066ea:	f97713e3          	bne	a4,s7,80006670 <__call_exitprocs+0x22>
    800066ee:	faf40be3          	beq	s0,a5,800066a4 <__call_exitprocs+0x56>
    800066f2:	bfbd                	j	80006670 <__call_exitprocs+0x22>
    800066f4:	0005b823          	sd	zero,16(a1)
    800066f8:	bfc9                	j	800066ca <__call_exitprocs+0x7c>
    800066fa:	20492703          	lw	a4,516(s2)
    800066fe:	964a                	add	a2,a2,s2
    80006700:	620c                	ld	a1,0(a2)
    80006702:	8ff9                	and	a5,a5,a4
    80006704:	2781                	sext.w	a5,a5
    80006706:	e781                	bnez	a5,8000670e <__call_exitprocs+0xc0>
    80006708:	8556                	mv	a0,s5
    8000670a:	9682                	jalr	a3
    8000670c:	bfe1                	j	800066e4 <__call_exitprocs+0x96>
    8000670e:	852e                	mv	a0,a1
    80006710:	9682                	jalr	a3
    80006712:	bfc9                	j	800066e4 <__call_exitprocs+0x96>

0000000080006714 <metal_init>:
metal_init():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/init.c:21
extern metal_constructor_t metal_constructors_start;
extern metal_constructor_t metal_constructors_end;
extern metal_destructor_t metal_destructors_start;
extern metal_destructor_t metal_destructors_end;

void metal_init(void) {
    80006714:	1101                	addi	sp,sp,-32
    80006716:	ec06                	sd	ra,24(sp)
    80006718:	e822                	sd	s0,16(sp)
    8000671a:	1000                	addi	s0,sp,32
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/init.c:24
    /* Make sure the constructors only run once */
    static int init_done = 0;
    if (init_done) {
    8000671c:	00001797          	auipc	a5,0x1
    80006720:	e8c78793          	addi	a5,a5,-372 # 800075a8 <init_done.1952>
    80006724:	439c                	lw	a5,0(a5)
    80006726:	efb1                	bnez	a5,80006782 <metal_init+0x6e>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/init.c:27
        return;
    }
    init_done = 1;
    80006728:	00001797          	auipc	a5,0x1
    8000672c:	e8078793          	addi	a5,a5,-384 # 800075a8 <init_done.1952>
    80006730:	4705                	li	a4,1
    80006732:	c398                	sw	a4,0(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/init.c:42
#ifdef METAL_SIFIVE_L2PF1
    /* Do L2 Stride Prefetcher initialization. */
    sifive_l2pf1_init();
#endif /* METAL_SIFIVE_L2PF1 */

    if (&metal_constructors_end <= &metal_constructors_start) {
    80006734:	ffffa717          	auipc	a4,0xffffa
    80006738:	bb470713          	addi	a4,a4,-1100 # 800002e8 <__fini_array_end>
    8000673c:	ffffa797          	auipc	a5,0xffffa
    80006740:	ba478793          	addi	a5,a5,-1116 # 800002e0 <_metal_tty_init_ptr>
    80006744:	04e7f163          	bgeu	a5,a4,80006786 <metal_init+0x72>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/init.c:46
        return;
    }

    metal_constructor_t *funcptr = &metal_constructors_start;
    80006748:	ffffa797          	auipc	a5,0xffffa
    8000674c:	b9878793          	addi	a5,a5,-1128 # 800002e0 <_metal_tty_init_ptr>
    80006750:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/init.c:47
    while (funcptr != &metal_constructors_end) {
    80006754:	a831                	j	80006770 <metal_init+0x5c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/init.c:48
        metal_constructor_t func = *funcptr;
    80006756:	fe843783          	ld	a5,-24(s0)
    8000675a:	639c                	ld	a5,0(a5)
    8000675c:	fef43023          	sd	a5,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/init.c:50

        func();
    80006760:	fe043783          	ld	a5,-32(s0)
    80006764:	9782                	jalr	a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/init.c:52

        funcptr += 1;
    80006766:	fe843783          	ld	a5,-24(s0)
    8000676a:	07a1                	addi	a5,a5,8
    8000676c:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/init.c:47
    while (funcptr != &metal_constructors_end) {
    80006770:	fe843703          	ld	a4,-24(s0)
    80006774:	ffffa797          	auipc	a5,0xffffa
    80006778:	b7478793          	addi	a5,a5,-1164 # 800002e8 <__fini_array_end>
    8000677c:	fcf71de3          	bne	a4,a5,80006756 <metal_init+0x42>
    80006780:	a021                	j	80006788 <metal_init+0x74>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/init.c:25
        return;
    80006782:	0001                	nop
    80006784:	a011                	j	80006788 <metal_init+0x74>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/init.c:43
        return;
    80006786:	0001                	nop
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/init.c:54
    }
}
    80006788:	60e2                	ld	ra,24(sp)
    8000678a:	6442                	ld	s0,16(sp)
    8000678c:	6105                	addi	sp,sp,32
    8000678e:	8082                	ret

0000000080006790 <metal_fini>:
metal_fini():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/init.c:56

void metal_fini(void) {
    80006790:	1101                	addi	sp,sp,-32
    80006792:	ec06                	sd	ra,24(sp)
    80006794:	e822                	sd	s0,16(sp)
    80006796:	1000                	addi	s0,sp,32
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/init.c:59
    /* Make sure the destructors only run once */
    static int fini_done = 0;
    if (fini_done) {
    80006798:	00001797          	auipc	a5,0x1
    8000679c:	e1478793          	addi	a5,a5,-492 # 800075ac <fini_done.1961>
    800067a0:	439c                	lw	a5,0(a5)
    800067a2:	efb1                	bnez	a5,800067fe <metal_fini+0x6e>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/init.c:62
        return;
    }
    fini_done = 1;
    800067a4:	00001797          	auipc	a5,0x1
    800067a8:	e0878793          	addi	a5,a5,-504 # 800075ac <fini_done.1961>
    800067ac:	4705                	li	a4,1
    800067ae:	c398                	sw	a4,0(a5)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/init.c:64

    if (&metal_destructors_end <= &metal_destructors_start) {
    800067b0:	ffffa717          	auipc	a4,0xffffa
    800067b4:	b3870713          	addi	a4,a4,-1224 # 800002e8 <__fini_array_end>
    800067b8:	ffffa797          	auipc	a5,0xffffa
    800067bc:	b3078793          	addi	a5,a5,-1232 # 800002e8 <__fini_array_end>
    800067c0:	04e7f163          	bgeu	a5,a4,80006802 <metal_fini+0x72>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/init.c:68
        return;
    }

    metal_destructor_t *funcptr = &metal_destructors_start;
    800067c4:	ffffa797          	auipc	a5,0xffffa
    800067c8:	b2478793          	addi	a5,a5,-1244 # 800002e8 <__fini_array_end>
    800067cc:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/init.c:69
    while (funcptr != &metal_destructors_end) {
    800067d0:	a831                	j	800067ec <metal_fini+0x5c>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/init.c:70
        metal_destructor_t func = *funcptr;
    800067d2:	fe843783          	ld	a5,-24(s0)
    800067d6:	639c                	ld	a5,0(a5)
    800067d8:	fef43023          	sd	a5,-32(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/init.c:72

        func();
    800067dc:	fe043783          	ld	a5,-32(s0)
    800067e0:	9782                	jalr	a5
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/init.c:74

        funcptr += 1;
    800067e2:	fe843783          	ld	a5,-24(s0)
    800067e6:	07a1                	addi	a5,a5,8
    800067e8:	fef43423          	sd	a5,-24(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/init.c:69
    while (funcptr != &metal_destructors_end) {
    800067ec:	fe843703          	ld	a4,-24(s0)
    800067f0:	ffffa797          	auipc	a5,0xffffa
    800067f4:	af878793          	addi	a5,a5,-1288 # 800002e8 <__fini_array_end>
    800067f8:	fcf71de3          	bne	a4,a5,800067d2 <metal_fini+0x42>
    800067fc:	a021                	j	80006804 <metal_fini+0x74>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/init.c:60
        return;
    800067fe:	0001                	nop
    80006800:	a011                	j	80006804 <metal_fini+0x74>
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/init.c:65
        return;
    80006802:	0001                	nop
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/init.c:76
    }
}
    80006804:	60e2                	ld	ra,24(sp)
    80006806:	6442                	ld	s0,16(sp)
    80006808:	6105                	addi	sp,sp,32
    8000680a:	8082                	ret

000000008000680c <metal_init_run>:
metal_init_run():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/init.c:86
 * in the case that users don't want the metal constructors or
 * destructors to run.
 */

void metal_init_run(void) __attribute__((weak));
void metal_init_run(void) { metal_init(); }
    8000680c:	1141                	addi	sp,sp,-16
    8000680e:	e406                	sd	ra,8(sp)
    80006810:	e022                	sd	s0,0(sp)
    80006812:	0800                	addi	s0,sp,16
    80006814:	f01ff0ef          	jal	ra,80006714 <metal_init>
    80006818:	0001                	nop
    8000681a:	60a2                	ld	ra,8(sp)
    8000681c:	6402                	ld	s0,0(sp)
    8000681e:	0141                	addi	sp,sp,16
    80006820:	8082                	ret

0000000080006822 <metal_fini_run>:
metal_fini_run():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/init.c:89

void metal_fini_run(void) __attribute__((weak));
void metal_fini_run(void) { metal_fini(); }
    80006822:	1141                	addi	sp,sp,-16
    80006824:	e406                	sd	ra,8(sp)
    80006826:	e022                	sd	s0,0(sp)
    80006828:	0800                	addi	s0,sp,16
    8000682a:	f67ff0ef          	jal	ra,80006790 <metal_fini>
    8000682e:	0001                	nop
    80006830:	60a2                	ld	ra,8(sp)
    80006832:	6402                	ld	s0,0(sp)
    80006834:	0141                	addi	sp,sp,16
    80006836:	8082                	ret

0000000080006838 <metal_tty_putc>:
metal_tty_putc():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/tty.c:12
int metal_tty_putc(int c) {
    80006838:	1101                	addi	sp,sp,-32
    8000683a:	ec06                	sd	ra,24(sp)
    8000683c:	e822                	sd	s0,16(sp)
    8000683e:	1000                	addi	s0,sp,32
    80006840:	87aa                	mv	a5,a0
    80006842:	fef42623          	sw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/tty.c:13
    return metal_uart_putc(__METAL_DT_STDOUT_UART_HANDLE, c);
    80006846:	fec42783          	lw	a5,-20(s0)
    8000684a:	85be                	mv	a1,a5
    8000684c:	00001517          	auipc	a0,0x1
    80006850:	cdc50513          	addi	a0,a0,-804 # 80007528 <__metal_dt_serial_10013000>
    80006854:	ff2ff0ef          	jal	ra,80006046 <metal_uart_putc>
    80006858:	87aa                	mv	a5,a0
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/src/tty.c:14
}
    8000685a:	853e                	mv	a0,a5
    8000685c:	60e2                	ld	ra,24(sp)
    8000685e:	6442                	ld	s0,16(sp)
    80006860:	6105                	addi	sp,sp,32
    80006862:	8082                	ret

0000000080006864 <_exit>:
_exit():
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:3
#include <metal/shutdown.h>

void _exit(int exit_status) {
    80006864:	1101                	addi	sp,sp,-32
    80006866:	ec06                	sd	ra,24(sp)
    80006868:	e822                	sd	s0,16(sp)
    8000686a:	1000                	addi	s0,sp,32
    8000686c:	87aa                	mv	a5,a0
    8000686e:	fef42623          	sw	a5,-20(s0)
/home/anhnt_iti2/work/freedom_tools/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:4
    metal_shutdown(exit_status);
    80006872:	fec42783          	lw	a5,-20(s0)
    80006876:	853e                	mv	a0,a5
    80006878:	eccff0ef          	jal	ra,80005f44 <metal_shutdown>
